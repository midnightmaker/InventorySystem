// <auto-generated />
using System;
using InventorySystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InventorySystem.Migrations
{
    [DbContext(typeof(InventoryContext))]
    partial class InventoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("InventorySystem.Domain.Entities.Production.ProductionWorkflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssignedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AssignedTo")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EstimatedCompletionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("OnHoldReason")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PreviousStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<int>("ProductionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("QualityCheckDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("QualityCheckNotes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("QualityCheckPassed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<int?>("QualityCheckerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("EstimatedCompletionDate");

                    b.HasIndex("ProductionId")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.ToTable("ProductionWorkflows");
                });

            modelBuilder.Entity("InventorySystem.Domain.Entities.Production.WorkflowTransition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("DurationInMinutes")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FromStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Metadata")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductionWorkflowId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("SystemInfo")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("ToStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TransitionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TriggeredBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventType");

                    b.HasIndex("ProductionWorkflowId");

                    b.HasIndex("TransitionDate");

                    b.ToTable("WorkflowTransitions");
                });

            modelBuilder.Entity("InventorySystem.Models.Accounting.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("AccountSubType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CurrentBalance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsContraAccount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSystemAccount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastTransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentAccountId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountCode")
                        .IsUnique();

                    b.HasIndex("ParentAccountId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("InventorySystem.Models.Accounting.AccountsPayable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AmountPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DiscountTaken")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("InvoiceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VendorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DueDate");

                    b.HasIndex("InvoiceNumber");

                    b.HasIndex("PaymentStatus");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("VendorId");

                    b.ToTable("AccountsPayable");
                });

            modelBuilder.Entity("InventorySystem.Models.Accounting.GeneralLedgerEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CreditAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("DebitAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("TransactionDate");

                    b.HasIndex("TransactionNumber");

                    b.HasIndex("ReferenceType", "ReferenceId");

                    b.ToTable("GeneralLedgerEntries");
                });

            modelBuilder.Entity("InventorySystem.Models.Accounting.VendorPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountsPayableId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BankAccount")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("CheckNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DiscountAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountsPayableId");

                    b.HasIndex("CheckNumber");

                    b.HasIndex("PaymentDate");

                    b.ToTable("VendorPayments");
                });

            modelBuilder.Entity("InventorySystem.Models.Bom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssemblyPartNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("BaseBomId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BomNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreatedFromChangeOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCurrentVersion")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentBomId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VersionHistory")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BaseBomId");

                    b.HasIndex("BomNumber")
                        .IsUnique();

                    b.HasIndex("ParentBomId");

                    b.ToTable("Boms");
                });

            modelBuilder.Entity("InventorySystem.Models.BomItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BomId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceDesignator")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BomId");

                    b.HasIndex("ItemId");

                    b.ToTable("BomItems");
                });

            modelBuilder.Entity("InventorySystem.Models.ChangeOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BaseBomId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BaseItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("TEXT");

                    b.Property<string>("CancelledBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CancelledDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangeOrderNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImpactAnalysis")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImplementedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ImplementedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NewBomId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NewItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NewVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PreviousVersion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BaseBomId");

                    b.HasIndex("BaseItemId");

                    b.HasIndex("ChangeOrderNumber")
                        .IsUnique();

                    b.HasIndex("NewBomId")
                        .IsUnique();

                    b.HasIndex("NewItemId")
                        .IsUnique();

                    b.ToTable("ChangeOrders");
                });

            modelBuilder.Entity("InventorySystem.Models.ChangeOrderDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChangeOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("DocumentData")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChangeOrderId");

                    b.ToTable("ChangeOrderDocuments");
                });

            modelBuilder.Entity("InventorySystem.Models.CompanyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("BusinessLicense")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogoContentType")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("LogoData")
                        .HasColumnType("BLOB");

                    b.Property<string>("LogoFileName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryContactEmail")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryContactName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryContactTitle")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TaxId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CompanyInfo");
                });

            modelBuilder.Entity("InventorySystem.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AcceptsMarketing")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BillingAddress")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingCity")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingCountry")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingState")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CreditLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefaultPaymentTerms")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTaxExempt")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("PreferredCommunication")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PreferredPaymentMethod")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("PricingTier")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShippingAddress")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingCity")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingCountry")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingState")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("TaxExempt")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TaxExemptId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("InventorySystem.Models.CustomerDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("DocumentData")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerDocuments");
                });

            modelBuilder.Entity("InventorySystem.Models.CustomerPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsJournalEntryGenerated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("JournalEntryNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentReference")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("SaleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("IsJournalEntryGenerated")
                        .HasDatabaseName("IX_CustomerPayments_IsJournalEntryGenerated");

                    b.HasIndex("JournalEntryNumber")
                        .HasDatabaseName("IX_CustomerPayments_JournalEntryNumber");

                    b.HasIndex("SaleId");

                    b.ToTable("CustomerPayments");
                });

            modelBuilder.Entity("InventorySystem.Models.FinishedGood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BomId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentStock")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<int>("MinimumStock")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BomId");

                    b.HasIndex("PartNumber")
                        .IsUnique();

                    b.ToTable("FinishedGoods");
                });

            modelBuilder.Entity("InventorySystem.Models.InventoryAdjustment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdjustedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AdjustmentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("AdjustmentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CostImpact")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantityAdjusted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("StockAfter")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StockBefore")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("InventoryAdjustments");
                });

            modelBuilder.Entity("InventorySystem.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BaseItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreatedFromChangeOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentStock")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageContentType")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("BLOB");

                    b.Property<string>("ImageFileName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCurrentVersion")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsExpense")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSellable")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaterialType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinimumStock")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentRawMaterialId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PreferredVendorItemId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UnitOfMeasure")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VendorPartNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("VersionHistory")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("WastePercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("YieldFactor")
                        .HasColumnType("decimal(10,4)");

                    b.HasKey("Id");

                    b.HasIndex("BaseItemId");

                    b.HasIndex("ParentRawMaterialId");

                    b.HasIndex("PartNumber")
                        .IsUnique();

                    b.HasIndex("PreferredVendorItemId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("InventorySystem.Models.ItemDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BomId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("DocumentData")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BomId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemDocuments");
                });

            modelBuilder.Entity("InventorySystem.Models.Production", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BomId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FinishedGoodId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("LaborCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MaterialCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OverheadCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuantityProduced")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BomId");

                    b.HasIndex("FinishedGoodId");

                    b.ToTable("Productions");
                });

            modelBuilder.Entity("InventorySystem.Models.ProductionConsumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ConsumedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductionId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("QuantityConsumed")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnitCostAtConsumption")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ProductionId");

                    b.ToTable("ProductionConsumptions");
                });

            modelBuilder.Entity("InventorySystem.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpectedEndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProjectCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectManager")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProjectCode")
                        .IsUnique();

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("InventorySystem.Models.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountCode")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ActualDeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CostPerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsJournalEntryGenerated")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ItemId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemVersion")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ItemVersionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JournalEntryGeneratedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("JournalEntryGeneratedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("JournalEntryNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("QuantityPurchased")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RemainingQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ShippingCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<decimal>("TaxAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("VendorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("IX_Purchases_ItemId");

                    b.HasIndex("ItemId1");

                    b.HasIndex("ItemVersionId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("PurchaseDate")
                        .HasDatabaseName("IX_Purchases_PurchaseDate");

                    b.HasIndex("VendorId")
                        .HasDatabaseName("IX_Purchases_VendorId");

                    b.HasIndex("ItemId", "PurchaseDate")
                        .HasDatabaseName("IX_Purchases_ItemId_PurchaseDate");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("InventorySystem.Models.PurchaseDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("DocumentData")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseDocuments");
                });

            modelBuilder.Entity("InventorySystem.Models.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("DiscountReason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsJournalEntryGenerated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JournalEntryGeneratedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("JournalEntryGeneratedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("JournalEntryNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PaymentDueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RevenueAccountCode")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SaleNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("SaleStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShippingAddress")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ShippingCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Terms")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SaleNumber")
                        .IsUnique();

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("InventorySystem.Models.SaleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FinishedGoodId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuantityBackordered")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantitySold")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SaleId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FinishedGoodId");

                    b.HasIndex("ItemId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleItems");
                });

            modelBuilder.Entity("InventorySystem.Models.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CreditLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DeliveryRating")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPreferred")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentTerms")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("QualityRating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServiceRating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TaxId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("VendorCode")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique()
                        .HasDatabaseName("IX_Vendors_CompanyName");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("InventorySystem.Models.VendorItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("LastPurchaseCost")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("LastPurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("LeadTimeDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ManufacturerPartNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("MinimumOrderQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("VendorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VendorPartNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("VendorId", "ItemId")
                        .IsUnique()
                        .HasDatabaseName("IX_VendorItems_VendorId_ItemId");

                    b.ToTable("VendorItems");
                });

            modelBuilder.Entity("InventorySystem.Services.CustomerBalanceAdjustment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AdjustmentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("AdjustmentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("AdjustmentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReversed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("SaleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AdjustmentDate")
                        .HasDatabaseName("IX_CustomerBalanceAdjustments_AdjustmentDate");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("IX_CustomerBalanceAdjustments_CustomerId");

                    b.HasIndex("SaleId")
                        .HasDatabaseName("IX_CustomerBalanceAdjustments_SaleId");

                    b.ToTable("CustomerBalanceAdjustments");
                });

            modelBuilder.Entity("InventorySystem.Domain.Entities.Production.ProductionWorkflow", b =>
                {
                    b.HasOne("InventorySystem.Models.Production", "Production")
                        .WithOne("ProductionWorkflow")
                        .HasForeignKey("InventorySystem.Domain.Entities.Production.ProductionWorkflow", "ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Production");
                });

            modelBuilder.Entity("InventorySystem.Domain.Entities.Production.WorkflowTransition", b =>
                {
                    b.HasOne("InventorySystem.Domain.Entities.Production.ProductionWorkflow", "ProductionWorkflow")
                        .WithMany("WorkflowTransitions")
                        .HasForeignKey("ProductionWorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionWorkflow");
                });

            modelBuilder.Entity("InventorySystem.Models.Accounting.Account", b =>
                {
                    b.HasOne("InventorySystem.Models.Accounting.Account", "ParentAccount")
                        .WithMany("SubAccounts")
                        .HasForeignKey("ParentAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentAccount");
                });

            modelBuilder.Entity("InventorySystem.Models.Accounting.AccountsPayable", b =>
                {
                    b.HasOne("InventorySystem.Models.Purchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventorySystem.Models.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Purchase");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("InventorySystem.Models.Accounting.GeneralLedgerEntry", b =>
                {
                    b.HasOne("InventorySystem.Models.Accounting.Account", "Account")
                        .WithMany("LedgerEntries")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("InventorySystem.Models.Accounting.VendorPayment", b =>
                {
                    b.HasOne("InventorySystem.Models.Accounting.AccountsPayable", "AccountsPayable")
                        .WithMany("Payments")
                        .HasForeignKey("AccountsPayableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountsPayable");
                });

            modelBuilder.Entity("InventorySystem.Models.Bom", b =>
                {
                    b.HasOne("InventorySystem.Models.Bom", "BaseBom")
                        .WithMany("Versions")
                        .HasForeignKey("BaseBomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InventorySystem.Models.Bom", "ParentBom")
                        .WithMany("SubAssemblies")
                        .HasForeignKey("ParentBomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BaseBom");

                    b.Navigation("ParentBom");
                });

            modelBuilder.Entity("InventorySystem.Models.BomItem", b =>
                {
                    b.HasOne("InventorySystem.Models.Bom", "Bom")
                        .WithMany("BomItems")
                        .HasForeignKey("BomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventorySystem.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bom");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("InventorySystem.Models.ChangeOrder", b =>
                {
                    b.HasOne("InventorySystem.Models.Bom", "BaseBom")
                        .WithMany()
                        .HasForeignKey("BaseBomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InventorySystem.Models.Item", "BaseItem")
                        .WithMany()
                        .HasForeignKey("BaseItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InventorySystem.Models.Bom", "NewBom")
                        .WithOne("CreatedFromChangeOrder")
                        .HasForeignKey("InventorySystem.Models.ChangeOrder", "NewBomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InventorySystem.Models.Item", "NewItem")
                        .WithOne("CreatedFromChangeOrder")
                        .HasForeignKey("InventorySystem.Models.ChangeOrder", "NewItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BaseBom");

                    b.Navigation("BaseItem");

                    b.Navigation("NewBom");

                    b.Navigation("NewItem");
                });

            modelBuilder.Entity("InventorySystem.Models.ChangeOrderDocument", b =>
                {
                    b.HasOne("InventorySystem.Models.ChangeOrder", "ChangeOrder")
                        .WithMany("ChangeOrderDocuments")
                        .HasForeignKey("ChangeOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangeOrder");
                });

            modelBuilder.Entity("InventorySystem.Models.CustomerDocument", b =>
                {
                    b.HasOne("InventorySystem.Models.Customer", "Customer")
                        .WithMany("Documents")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("InventorySystem.Models.CustomerPayment", b =>
                {
                    b.HasOne("InventorySystem.Models.Customer", "Customer")
                        .WithMany("CustomerPayments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventorySystem.Models.Sale", "Sale")
                        .WithMany("CustomerPayments")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("InventorySystem.Models.FinishedGood", b =>
                {
                    b.HasOne("InventorySystem.Models.Bom", "Bom")
                        .WithMany()
                        .HasForeignKey("BomId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Bom");
                });

            modelBuilder.Entity("InventorySystem.Models.InventoryAdjustment", b =>
                {
                    b.HasOne("InventorySystem.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("InventorySystem.Models.Item", b =>
                {
                    b.HasOne("InventorySystem.Models.Item", "BaseItem")
                        .WithMany("Versions")
                        .HasForeignKey("BaseItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InventorySystem.Models.Item", "ParentRawMaterial")
                        .WithMany("TransformedItems")
                        .HasForeignKey("ParentRawMaterialId");

                    b.HasOne("InventorySystem.Models.VendorItem", "PreferredVendorItem")
                        .WithMany()
                        .HasForeignKey("PreferredVendorItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("BaseItem");

                    b.Navigation("ParentRawMaterial");

                    b.Navigation("PreferredVendorItem");
                });

            modelBuilder.Entity("InventorySystem.Models.ItemDocument", b =>
                {
                    b.HasOne("InventorySystem.Models.Bom", "Bom")
                        .WithMany("Documents")
                        .HasForeignKey("BomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InventorySystem.Models.Item", "Item")
                        .WithMany("DesignDocuments")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Bom");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("InventorySystem.Models.Production", b =>
                {
                    b.HasOne("InventorySystem.Models.Bom", "Bom")
                        .WithMany()
                        .HasForeignKey("BomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventorySystem.Models.FinishedGood", "FinishedGood")
                        .WithMany("Productions")
                        .HasForeignKey("FinishedGoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bom");

                    b.Navigation("FinishedGood");
                });

            modelBuilder.Entity("InventorySystem.Models.ProductionConsumption", b =>
                {
                    b.HasOne("InventorySystem.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventorySystem.Models.Production", "Production")
                        .WithMany("MaterialConsumptions")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("InventorySystem.Models.Purchase", b =>
                {
                    b.HasOne("InventorySystem.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventorySystem.Models.Item", null)
                        .WithMany("Purchases")
                        .HasForeignKey("ItemId1");

                    b.HasOne("InventorySystem.Models.Item", "ItemVersionReference")
                        .WithMany()
                        .HasForeignKey("ItemVersionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("InventorySystem.Models.Project", "Project")
                        .WithMany("Purchases")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("InventorySystem.Models.Vendor", "Vendor")
                        .WithMany("Purchases")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("ItemVersionReference");

                    b.Navigation("Project");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("InventorySystem.Models.PurchaseDocument", b =>
                {
                    b.HasOne("InventorySystem.Models.Purchase", "Purchase")
                        .WithMany("PurchaseDocuments")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("InventorySystem.Models.Sale", b =>
                {
                    b.HasOne("InventorySystem.Models.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("InventorySystem.Models.SaleItem", b =>
                {
                    b.HasOne("InventorySystem.Models.FinishedGood", "FinishedGood")
                        .WithMany()
                        .HasForeignKey("FinishedGoodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InventorySystem.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("InventorySystem.Models.Sale", "Sale")
                        .WithMany("SaleItems")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinishedGood");

                    b.Navigation("Item");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("InventorySystem.Models.VendorItem", b =>
                {
                    b.HasOne("InventorySystem.Models.Item", "Item")
                        .WithMany("VendorItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventorySystem.Models.Vendor", "Vendor")
                        .WithMany("VendorItems")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("InventorySystem.Services.CustomerBalanceAdjustment", b =>
                {
                    b.HasOne("InventorySystem.Models.Customer", "Customer")
                        .WithMany("BalanceAdjustments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventorySystem.Models.Sale", "Sale")
                        .WithMany("RelatedAdjustments")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("InventorySystem.Domain.Entities.Production.ProductionWorkflow", b =>
                {
                    b.Navigation("WorkflowTransitions");
                });

            modelBuilder.Entity("InventorySystem.Models.Accounting.Account", b =>
                {
                    b.Navigation("LedgerEntries");

                    b.Navigation("SubAccounts");
                });

            modelBuilder.Entity("InventorySystem.Models.Accounting.AccountsPayable", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("InventorySystem.Models.Bom", b =>
                {
                    b.Navigation("BomItems");

                    b.Navigation("CreatedFromChangeOrder");

                    b.Navigation("Documents");

                    b.Navigation("SubAssemblies");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("InventorySystem.Models.ChangeOrder", b =>
                {
                    b.Navigation("ChangeOrderDocuments");
                });

            modelBuilder.Entity("InventorySystem.Models.Customer", b =>
                {
                    b.Navigation("BalanceAdjustments");

                    b.Navigation("CustomerPayments");

                    b.Navigation("Documents");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("InventorySystem.Models.FinishedGood", b =>
                {
                    b.Navigation("Productions");

                    b.Navigation("SaleItems");
                });

            modelBuilder.Entity("InventorySystem.Models.Item", b =>
                {
                    b.Navigation("CreatedFromChangeOrder");

                    b.Navigation("DesignDocuments");

                    b.Navigation("Purchases");

                    b.Navigation("TransformedItems");

                    b.Navigation("VendorItems");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("InventorySystem.Models.Production", b =>
                {
                    b.Navigation("MaterialConsumptions");

                    b.Navigation("ProductionWorkflow");
                });

            modelBuilder.Entity("InventorySystem.Models.Project", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("InventorySystem.Models.Purchase", b =>
                {
                    b.Navigation("PurchaseDocuments");
                });

            modelBuilder.Entity("InventorySystem.Models.Sale", b =>
                {
                    b.Navigation("CustomerPayments");

                    b.Navigation("RelatedAdjustments");

                    b.Navigation("SaleItems");
                });

            modelBuilder.Entity("InventorySystem.Models.Vendor", b =>
                {
                    b.Navigation("Purchases");

                    b.Navigation("VendorItems");
                });
#pragma warning restore 612, 618
        }
    }
}
