// <auto-generated />
using System;
using InventorySystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InventorySystem.Migrations
{
    [DbContext(typeof(InventoryContext))]
    [Migration("20250806125154_AddCompanyInfo")]
    partial class AddCompanyInfo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("InventorySystem.Domain.Entities.Production.ProductionWorkflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssignedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AssignedTo")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EstimatedCompletionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("OnHoldReason")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PreviousStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<int>("ProductionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("QualityCheckDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("QualityCheckNotes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("QualityCheckPassed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<int?>("QualityCheckerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("EstimatedCompletionDate");

                    b.HasIndex("ProductionId")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.ToTable("ProductionWorkflows");
                });

            modelBuilder.Entity("InventorySystem.Domain.Entities.Production.WorkflowTransition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("DurationInMinutes")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FromStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Metadata")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductionWorkflowId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("SystemInfo")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("ToStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TransitionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TriggeredBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventType");

                    b.HasIndex("ProductionWorkflowId");

                    b.HasIndex("TransitionDate");

                    b.ToTable("WorkflowTransitions");
                });

            modelBuilder.Entity("InventorySystem.Models.Bom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssemblyPartNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("BaseBomId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BomNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreatedFromChangeOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCurrentVersion")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentBomId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VersionHistory")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BaseBomId");

                    b.HasIndex("BomNumber")
                        .IsUnique();

                    b.HasIndex("ParentBomId");

                    b.ToTable("Boms");
                });

            modelBuilder.Entity("InventorySystem.Models.BomItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BomId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ItemId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceDesignator")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BomId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemId1");

                    b.ToTable("BomItems");
                });

            modelBuilder.Entity("InventorySystem.Models.ChangeOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BaseBomId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BaseItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("TEXT");

                    b.Property<string>("CancelledBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CancelledDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChangeOrderNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImpactAnalysis")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImplementedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ImplementedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NewBomId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NewItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NewVersion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PreviousVersion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BaseBomId");

                    b.HasIndex("BaseItemId");

                    b.HasIndex("ChangeOrderNumber")
                        .IsUnique();

                    b.HasIndex("NewBomId")
                        .IsUnique();

                    b.HasIndex("NewItemId")
                        .IsUnique();

                    b.ToTable("ChangeOrders");
                });

            modelBuilder.Entity("InventorySystem.Models.ChangeOrderDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChangeOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("DocumentData")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChangeOrderId");

                    b.ToTable("ChangeOrderDocuments");
                });

            modelBuilder.Entity("InventorySystem.Models.FinishedGood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BomId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentStock")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<int>("MinimumStock")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BomId");

                    b.HasIndex("PartNumber")
                        .IsUnique();

                    b.ToTable("FinishedGoods");
                });

            modelBuilder.Entity("InventorySystem.Models.InventoryAdjustment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdjustedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AdjustmentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("AdjustmentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CostImpact")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantityAdjusted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("StockAfter")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StockBefore")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("InventoryAdjustments");
                });

            modelBuilder.Entity("InventorySystem.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BaseItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreatedFromChangeOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentStock")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageContentType")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("BLOB");

                    b.Property<string>("ImageFileName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCurrentVersion")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSellable")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaterialType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinimumStock")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentRawMaterialId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PreferredVendorItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnitOfMeasure")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VendorPartNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("VersionHistory")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("WastePercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("YieldFactor")
                        .HasColumnType("decimal(10,4)");

                    b.HasKey("Id");

                    b.HasIndex("BaseItemId");

                    b.HasIndex("ParentRawMaterialId");

                    b.HasIndex("PartNumber")
                        .IsUnique();

                    b.HasIndex("PreferredVendorItemId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("InventorySystem.Models.ItemDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BomId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("DocumentData")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BomId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemDocuments");
                });

            modelBuilder.Entity("InventorySystem.Models.Production", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BomId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FinishedGoodId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("LaborCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MaterialCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OverheadCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuantityProduced")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BomId");

                    b.HasIndex("FinishedGoodId");

                    b.ToTable("Productions");
                });

            modelBuilder.Entity("InventorySystem.Models.ProductionConsumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ConsumedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductionId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("QuantityConsumed")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnitCostAtConsumption")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ProductionId");

                    b.ToTable("ProductionConsumptions");
                });

            modelBuilder.Entity("InventorySystem.Models.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualDeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CostPerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ItemId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemVersion")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ItemVersionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("QuantityPurchased")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RemainingQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ShippingCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<decimal>("TaxAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("VendorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("IX_Purchases_ItemId");

                    b.HasIndex("ItemId1");

                    b.HasIndex("ItemVersionId");

                    b.HasIndex("PurchaseDate")
                        .HasDatabaseName("IX_Purchases_PurchaseDate");

                    b.HasIndex("VendorId")
                        .HasDatabaseName("IX_Purchases_VendorId");

                    b.HasIndex("ItemId", "PurchaseDate")
                        .HasDatabaseName("IX_Purchases_ItemId_PurchaseDate");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("InventorySystem.Models.PurchaseDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("DocumentData")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseDocuments");
                });

            modelBuilder.Entity("InventorySystem.Models.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerPhone")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PaymentDueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SaleNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("SaleStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ShippingCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Terms")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("SaleNumber")
                        .IsUnique();

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("InventorySystem.Models.SaleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FinishedGoodId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FinishedGoodId1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuantityBackordered")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantitySold")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SaleId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FinishedGoodId");

                    b.HasIndex("FinishedGoodId1");

                    b.HasIndex("ItemId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleItems");
                });

            modelBuilder.Entity("InventorySystem.Models.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CreditLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DeliveryRating")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPreferred")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentTerms")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("QualityRating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServiceRating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TaxId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("VendorCode")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique()
                        .HasDatabaseName("IX_Vendors_CompanyName");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("InventorySystem.Models.VendorItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("LastPurchaseCost")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("LastPurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("LeadTimeDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ManufacturerPartNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("MinimumOrderQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("VendorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VendorPartNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("VendorId", "ItemId")
                        .IsUnique()
                        .HasDatabaseName("IX_VendorItems_VendorId_ItemId");

                    b.ToTable("VendorItems");
                });

            modelBuilder.Entity("InventorySystem.Domain.Entities.Production.ProductionWorkflow", b =>
                {
                    b.HasOne("InventorySystem.Models.Production", "Production")
                        .WithOne()
                        .HasForeignKey("InventorySystem.Domain.Entities.Production.ProductionWorkflow", "ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Production");
                });

            modelBuilder.Entity("InventorySystem.Domain.Entities.Production.WorkflowTransition", b =>
                {
                    b.HasOne("InventorySystem.Domain.Entities.Production.ProductionWorkflow", "ProductionWorkflow")
                        .WithMany("WorkflowTransitions")
                        .HasForeignKey("ProductionWorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionWorkflow");
                });

            modelBuilder.Entity("InventorySystem.Models.Bom", b =>
                {
                    b.HasOne("InventorySystem.Models.Bom", "BaseBom")
                        .WithMany("Versions")
                        .HasForeignKey("BaseBomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InventorySystem.Models.Bom", "ParentBom")
                        .WithMany("SubAssemblies")
                        .HasForeignKey("ParentBomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BaseBom");

                    b.Navigation("ParentBom");
                });

            modelBuilder.Entity("InventorySystem.Models.BomItem", b =>
                {
                    b.HasOne("InventorySystem.Models.Bom", "Bom")
                        .WithMany("BomItems")
                        .HasForeignKey("BomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventorySystem.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventorySystem.Models.Item", null)
                        .WithMany("BomItems")
                        .HasForeignKey("ItemId1");

                    b.Navigation("Bom");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("InventorySystem.Models.ChangeOrder", b =>
                {
                    b.HasOne("InventorySystem.Models.Bom", "BaseBom")
                        .WithMany()
                        .HasForeignKey("BaseBomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InventorySystem.Models.Item", "BaseItem")
                        .WithMany()
                        .HasForeignKey("BaseItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InventorySystem.Models.Bom", "NewBom")
                        .WithOne("CreatedFromChangeOrder")
                        .HasForeignKey("InventorySystem.Models.ChangeOrder", "NewBomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InventorySystem.Models.Item", "NewItem")
                        .WithOne("CreatedFromChangeOrder")
                        .HasForeignKey("InventorySystem.Models.ChangeOrder", "NewItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BaseBom");

                    b.Navigation("BaseItem");

                    b.Navigation("NewBom");

                    b.Navigation("NewItem");
                });

            modelBuilder.Entity("InventorySystem.Models.ChangeOrderDocument", b =>
                {
                    b.HasOne("InventorySystem.Models.ChangeOrder", "ChangeOrder")
                        .WithMany("ChangeOrderDocuments")
                        .HasForeignKey("ChangeOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangeOrder");
                });

            modelBuilder.Entity("InventorySystem.Models.FinishedGood", b =>
                {
                    b.HasOne("InventorySystem.Models.Bom", "Bom")
                        .WithMany()
                        .HasForeignKey("BomId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Bom");
                });

            modelBuilder.Entity("InventorySystem.Models.InventoryAdjustment", b =>
                {
                    b.HasOne("InventorySystem.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("InventorySystem.Models.Item", b =>
                {
                    b.HasOne("InventorySystem.Models.Item", "BaseItem")
                        .WithMany("Versions")
                        .HasForeignKey("BaseItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InventorySystem.Models.Item", "ParentRawMaterial")
                        .WithMany("TransformedItems")
                        .HasForeignKey("ParentRawMaterialId");

                    b.HasOne("InventorySystem.Models.VendorItem", "PreferredVendorItem")
                        .WithMany()
                        .HasForeignKey("PreferredVendorItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("BaseItem");

                    b.Navigation("ParentRawMaterial");

                    b.Navigation("PreferredVendorItem");
                });

            modelBuilder.Entity("InventorySystem.Models.ItemDocument", b =>
                {
                    b.HasOne("InventorySystem.Models.Bom", "Bom")
                        .WithMany("Documents")
                        .HasForeignKey("BomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InventorySystem.Models.Item", "Item")
                        .WithMany("DesignDocuments")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Bom");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("InventorySystem.Models.Production", b =>
                {
                    b.HasOne("InventorySystem.Models.Bom", "Bom")
                        .WithMany()
                        .HasForeignKey("BomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventorySystem.Models.FinishedGood", "FinishedGood")
                        .WithMany("Productions")
                        .HasForeignKey("FinishedGoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bom");

                    b.Navigation("FinishedGood");
                });

            modelBuilder.Entity("InventorySystem.Models.ProductionConsumption", b =>
                {
                    b.HasOne("InventorySystem.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventorySystem.Models.Production", "Production")
                        .WithMany("MaterialConsumptions")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("InventorySystem.Models.Purchase", b =>
                {
                    b.HasOne("InventorySystem.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventorySystem.Models.Item", null)
                        .WithMany("Purchases")
                        .HasForeignKey("ItemId1");

                    b.HasOne("InventorySystem.Models.Item", "ItemVersionReference")
                        .WithMany()
                        .HasForeignKey("ItemVersionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("InventorySystem.Models.Vendor", "Vendor")
                        .WithMany("Purchases")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("ItemVersionReference");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("InventorySystem.Models.PurchaseDocument", b =>
                {
                    b.HasOne("InventorySystem.Models.Purchase", "Purchase")
                        .WithMany("PurchaseDocuments")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("InventorySystem.Models.SaleItem", b =>
                {
                    b.HasOne("InventorySystem.Models.FinishedGood", "FinishedGood")
                        .WithMany()
                        .HasForeignKey("FinishedGoodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InventorySystem.Models.FinishedGood", null)
                        .WithMany("SaleItems")
                        .HasForeignKey("FinishedGoodId1");

                    b.HasOne("InventorySystem.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("InventorySystem.Models.Sale", "Sale")
                        .WithMany("SaleItems")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinishedGood");

                    b.Navigation("Item");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("InventorySystem.Models.VendorItem", b =>
                {
                    b.HasOne("InventorySystem.Models.Item", "Item")
                        .WithMany("VendorItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventorySystem.Models.Vendor", "Vendor")
                        .WithMany("VendorItems")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("InventorySystem.Domain.Entities.Production.ProductionWorkflow", b =>
                {
                    b.Navigation("WorkflowTransitions");
                });

            modelBuilder.Entity("InventorySystem.Models.Bom", b =>
                {
                    b.Navigation("BomItems");

                    b.Navigation("CreatedFromChangeOrder");

                    b.Navigation("Documents");

                    b.Navigation("SubAssemblies");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("InventorySystem.Models.ChangeOrder", b =>
                {
                    b.Navigation("ChangeOrderDocuments");
                });

            modelBuilder.Entity("InventorySystem.Models.FinishedGood", b =>
                {
                    b.Navigation("Productions");

                    b.Navigation("SaleItems");
                });

            modelBuilder.Entity("InventorySystem.Models.Item", b =>
                {
                    b.Navigation("BomItems");

                    b.Navigation("CreatedFromChangeOrder");

                    b.Navigation("DesignDocuments");

                    b.Navigation("Purchases");

                    b.Navigation("TransformedItems");

                    b.Navigation("VendorItems");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("InventorySystem.Models.Production", b =>
                {
                    b.Navigation("MaterialConsumptions");
                });

            modelBuilder.Entity("InventorySystem.Models.Purchase", b =>
                {
                    b.Navigation("PurchaseDocuments");
                });

            modelBuilder.Entity("InventorySystem.Models.Sale", b =>
                {
                    b.Navigation("SaleItems");
                });

            modelBuilder.Entity("InventorySystem.Models.Vendor", b =>
                {
                    b.Navigation("Purchases");

                    b.Navigation("VendorItems");
                });
#pragma warning restore 612, 618
        }
    }
}
