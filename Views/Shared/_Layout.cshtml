<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>@ViewData["Title"] - Inventory Management System</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
  <link rel="stylesheet" href="~/css/confirmation-dialog.css" />
  @if (Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") == "Development")
  {
    <link href="~/css/site.css?v=@DateTime.Now.Ticks" rel="stylesheet" />
  }
  else
  {
    <link href="~/css/site.css" rel="stylesheet" />
  }
  @RenderSection("Styles", required: false)
</head>
<body>
  <header>
    <nav class="navbar navbar-expand-lg navbar-toggleable-lg navbar-dark bg-dark border-bottom box-shadow mb-3">
      <div class="container-fluid">
        <a class="navbar-brand fw-bold" asp-area="" asp-controller="Home" asp-action="Index">
          <i class="fas fa-boxes text-primary"></i> Inventory System
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="navbar-collapse collapse d-lg-inline-flex justify-content-between">
          <ul class="navbar-nav flex-grow-1 me-auto">
            <!-- Dashboard -->
            <li class="nav-item">
              <a class="nav-link" asp-area="" asp-controller="Home" asp-action="Index">
                <i class="fas fa-tachometer-alt"></i> Dashboard
              </a>
            </li>

            <!-- Items Management Dropdown -->
            <li class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="fas fa-cube"></i> Items
              </a>
              <ul class="dropdown-menu">
                <!-- Physical Inventory Section -->
                <li>
                  <h6 class="dropdown-header">
                    <i class="fas fa-boxes"></i> Physical Inventory
                  </h6>
                </li>
                <li>
                  <a class="dropdown-item" asp-controller="Items" asp-action="Index" asp-route-itemTypeFilter="Inventoried,Consumable">
                    <i class="fas fa-warehouse text-primary"></i> Physical Inventory
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" asp-controller="Items" asp-action="Index" asp-route-itemTypeFilter="RnDMaterials">
                    <i class="fas fa-flask text-success"></i> R&D Materials
                  </a>
                </li>
                <li><hr class="dropdown-divider"></li>

                <!-- All Items -->
                <li>
                  <a class="dropdown-item" asp-controller="Items" asp-action="Index">
                    <i class="fas fa-list text-secondary"></i> View All Items
                  </a>
                </li>
                <li><hr class="dropdown-divider"></li>

                <!-- Item Management -->
                <li>
                  <a class="dropdown-item" asp-controller="Items" asp-action="Create">
                    <i class="fas fa-plus text-success"></i> Add Item
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" asp-controller="Items" asp-action="BulkUpload">
                    <i class="fas fa-upload"></i> Bulk Upload
                  </a>
                </li>
                <li><hr class="dropdown-divider"></li>

                <!-- Inventory Adjustments Section -->
                <li>
                  <h6 class="dropdown-header">
                    <i class="fas fa-balance-scale"></i> Inventory Adjustments
                  </h6>
                </li>
                <li>
                  <a class="dropdown-item" asp-controller="Inventory" asp-action="History">
                    <i class="fas fa-history text-info"></i> Adjustment History
                  </a>
                </li>
                <li><hr class="dropdown-divider"></li>

                <!-- Alerts & Monitoring -->
                <li>
                  <h6 class="dropdown-header">
                    <i class="fas fa-exclamation-triangle"></i> Alerts
                  </h6>
                </li>
                <li>
                  <a class="dropdown-item" asp-controller="Items" asp-action="LowStock">
                    <i class="fas fa-exclamation-triangle text-warning"></i> Low Stock Items
                  </a>
                </li>
              </ul>
            </li>

            <!-- **NEW: CONSOLIDATED Customer Management Dropdown** -->
            <li class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="fas fa-users"></i> Customers
              </a>
              <ul class="dropdown-menu">
                <!-- Main Customer Actions -->
                <li>
                  <h6 class="dropdown-header">
                    <i class="fas fa-users"></i> Customer Management
                  </h6>
                </li>
                <li>
                  <a class="dropdown-item" asp-controller="Customers" asp-action="Index">
                    <i class="fas fa-list"></i> All Customers
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" asp-controller="Customers" asp-action="Create">
                    <i class="fas fa-user-plus"></i> Add Customer
                  </a>
                </li>
                <li><hr class="dropdown-divider"></li>

                <!-- Customer Categories -->
                <li>
                  <h6 class="dropdown-header">
                    <i class="fas fa-tags"></i> By Type
                  </h6>
                </li>
                <li>
                  <a class="dropdown-item" asp-controller="Customers" asp-action="Index" asp-route-customerType="Retail">
                    <i class="fas fa-user text-primary"></i> Retail Customers
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" asp-controller="Customers" asp-action="Index" asp-route-customerType="Corporate">
                    <i class="fas fa-building text-info"></i> Corporate Accounts
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" asp-controller="Customers" asp-action="Index" asp-route-customerType="Wholesale">
                    <i class="fas fa-warehouse text-success"></i> Wholesale Customers
                  </a>
                </li>
                <li><hr class="dropdown-divider"></li>

                <!-- **NEW: Customer Service Section** -->
                <li>
                  <h6 class="dropdown-header">
                    <i class="fas fa-headset"></i> Customer Service
                  </h6>
                </li>
                <li>
                  <a class="dropdown-item" asp-controller="CustomerService" asp-action="Dashboard">
                    <i class="fas fa-tachometer-alt text-primary"></i> Service Dashboard
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" asp-controller="CustomerService" asp-action="Index">
                    <i class="fas fa-ticket-alt text-info"></i> Support Cases
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" asp-controller="CustomerService" asp-action="Create">
                    <i class="fas fa-plus-circle text-success"></i> New Support Case
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" asp-controller="CustomerService" asp-action="MyAssigned">
                    <i class="fas fa-user-check text-info"></i> My Cases
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" asp-controller="CustomerService" asp-action="KnowledgeBase">
                    <i class="fas fa-book text-info"></i> Knowledge Base
                  </a>
                </li>
                <li><hr class="dropdown-divider"></li>

                <!-- Credit Management -->
                <li>
                  <h6 class="dropdown-header">
                    <i class="fas fa-credit-card"></i> Account Management
                  </h6>
                </li>
                <li>
                  <a class="dropdown-item" href="/Accounting/CreateCustomerAdjustment">
                    <i class="fas fa-adjust"></i> Customer Adjustment
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" asp-controller="Customers" asp-action="Index" asp-route-hasOutstandingBalance="true">
                    <i class="fas fa-exclamation-circle text-warning"></i> Outstanding Balances
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" asp-controller="Customers" asp-action="Index" asp-route-overCreditLimit="true">
                    <i class="fas fa-exclamation-triangle text-danger"></i> Over Credit Limit
                  </a>
                </li>
                <li><hr class="dropdown-divider"></li>

                <!-- Reports -->
                <li>
                  <a class="dropdown-item" asp-controller="Customers" asp-action="Reports">
                    <i class="fas fa-chart-line"></i> Customer Reports
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" asp-controller="CustomerService" asp-action="Reports">
                    <i class="fas fa-chart-bar text-success"></i> Service Reports
                  </a>
                </li>
              </ul>
            </li>

            <!-- Sales Dropdown -->
            <li class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="#" id="salesDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="fas fa-shopping-cart"></i> Sales
              </a>
              <ul class="dropdown-menu" aria-labelledby="salesDropdown">
                <li><a class="dropdown-item" href="/Sales"><i class="fas fa-list"></i> All Sales</a></li>
                <li><a class="dropdown-item" href="/Sales/Create"><i class="fas fa-plus"></i> New Sale</a></li>
                <!-- Enhanced Create Option -->
                <li>
                  <a class="dropdown-item" href="/Sales/CreateEnhanced">
                    <i class="fas fa-plus-circle text-primary"></i>
                    <strong>Create Sale with Items</strong>
                    <small class="d-block text-muted">One-step creation with line items & discounts</small>
                  </a>
                </li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" href="/CustomerPayments"><i class="fas fa-credit-card text-danger"></i> Customer Payments</a></li>
                <li><a class="dropdown-item" href="/Sales/Backorders"><i class="fas fa-hourglass-half text-warning"></i> Backorders</a></li>
                <li><a class="dropdown-item" href="/Sales/Shipments"><i class="fas fa-shipping-fast text-info"></i> Shipments</a></li>
                <li><a class="dropdown-item" href="/AccountsReceivable"><i class="fas fa-file-invoice-dollar text-success"></i> Accounts Receivable</a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" href="/Sales/Reports"><i class="fas fa-chart-bar"></i> Reports</a></li>
                <li><a class="dropdown-item" href="/CustomerPayments/Reports"><i class="fas fa-file-invoice text-warning"></i> Payment Reports</a></li>
              </ul>
            </li>

            <!-- **NEW: CONSOLIDATED Purchasing & Vendors Dropdown** -->
            <li class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="fas fa-truck"></i> Purchasing
              </a>
              <ul class="dropdown-menu">
                <!-- Purchase Orders -->
                <li>
                  <h6 class="dropdown-header">
                    <i class="fas fa-shopping-cart"></i> Purchase Orders
                  </h6>
                </li>
                <li><a class="dropdown-item" href="/Purchases"><i class="fas fa-list"></i> All Purchases</a></li>
                <li><a class="dropdown-item" href="/Purchases/Create"><i class="fas fa-plus"></i> New Purchase</a></li>
                <li><hr class="dropdown-divider"></li>

                <!-- Vendor Management -->
                <li>
                  <h6 class="dropdown-header">
                    <i class="fas fa-building"></i> Vendor Management
                  </h6>
                </li>
                <li>
                  <a class="dropdown-item" href="/Vendors">
                    <i class="fas fa-list"></i> All Vendors
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" href="/Vendors/Create">
                    <i class="fas fa-plus"></i> Add Vendor
                  </a>
                </li>
                <li><hr class="dropdown-divider"></li>
                <li>
                  <a class="dropdown-item" href="/Vendors/Reports">
                    <i class="fas fa-chart-bar"></i> Vendor Reports
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" href="/Vendors?activeOnly=false">
                    <i class="fas fa-ban"></i> Inactive Vendors
                  </a>
                </li>
              </ul>
            </li>

            <!-- Production & Workflow Dropdown -->
            <li class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="fas fa-cogs"></i> Production
              </a>
              <ul class="dropdown-menu">
                <!-- WIP Dashboard - Featured -->
                <li>
                  <a class="dropdown-item fw-bold" asp-controller="WipDashboard" asp-action="Index">
                    <i class="fas fa-tachometer-alt text-primary"></i> WIP Dashboard
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" asp-controller="WipDashboard" asp-action="Kanban">
                    <i class="fas fa-columns text-info"></i> Kanban Board
                  </a>
                </li>
                <li><hr class="dropdown-divider"></li>
                <!-- Traditional Production -->
                <li>
                  <a class="dropdown-item" asp-controller="Production" asp-action="Index">
                    <i class="fas fa-list"></i> All Productions
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" asp-controller="Production" asp-action="BuildBom">
                    <i class="fas fa-hammer text-success"></i> Build BOM
                  </a>
                </li>
                <li><hr class="dropdown-divider"></li>
                <!-- Finished Goods -->
                <li>
                  <a class="dropdown-item" asp-controller="Production" asp-action="FinishedGoods">
                    <i class="fas fa-box"></i> Finished Goods
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" asp-controller="Production" asp-action="CreateFinishedGood">
                    <i class="fas fa-plus"></i> Add Finished Good
                  </a>
                </li>
                <li><hr class="dropdown-divider"></li>
                <!-- Services Section -->
                <li>
                  <h6 class="dropdown-header">
                    <i class="fas fa-tools"></i> Services
                  </h6>
                </li>
                <li>
                  <a class="dropdown-item" href="@Url.Action("Index", "Services")">
                    <i class="fas fa-tachometer-alt"></i> Service Dashboard
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" href="@Url.Action("ServiceOrders", "Services")">
                    <i class="fas fa-clipboard-list"></i> Service Orders
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" href="@Url.Action("Create", "Services")">
                    <i class="fas fa-plus-circle"></i> New Service Order
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" href="@Url.Action("ServiceTypes", "Services")">
                    <i class="fas fa-cogs"></i> Service Types
                  </a>
                </li>
              </ul>
            </li>

            <!-- BOMs Dropdown -->
            <li class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="fas fa-layer-group"></i> BOMs
              </a>
              <ul class="dropdown-menu">
                <li>
                  <a class="dropdown-item" asp-controller="Boms" asp-action="Index">
                    <i class="fas fa-list"></i> All BOMs
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" asp-controller="Boms" asp-action="Create">
                    <i class="fas fa-plus"></i> Create BOM
                  </a>
                </li>
                <li><hr class="dropdown-divider"></li>
                <li>
                  <a class="dropdown-item" asp-controller="Boms" asp-action="CurrentVersions">
                    <i class="fas fa-check-circle text-success"></i> Current Versions
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" asp-controller="Boms" asp-action="PendingChanges">
                    <i class="fas fa-clock text-warning"></i> Pending Changes
                  </a>
                </li>
                <li><hr class="dropdown-divider"></li>
                <li>
                  <a class="dropdown-item" href="#" onclick="openBomVisualization()">
                    <i class="fas fa-sitemap text-info"></i> BOM Diagrams
                  </a>
                </li>
              </ul>
            </li>

            <!-- **NEW: CONSOLIDATED Finance & Accounting Dropdown** -->
            <li class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="#" id="financeDropdown" role="button"
                 data-bs-toggle="dropdown" aria-expanded="false">
                <i class="fas fa-calculator"></i> Finance
              </a>
              <ul class="dropdown-menu" aria-labelledby="financeDropdown">
                <!-- Accounting Dashboard -->
                <li>
                  <a class="dropdown-item" href="/Accounting/Index">
                    <i class="fas fa-tachometer-alt"></i> Accounting Dashboard
                  </a>
                </li>
                <li><hr class="dropdown-divider"></li>

                <!-- Chart of Accounts & General Ledger -->
                <li>
                  <h6 class="dropdown-header">
                    <i class="fas fa-book"></i> Core Accounting
                  </h6>
                </li>
                <li>
                  <a class="dropdown-item" href="/Accounting/ChartOfAccounts">
                    <i class="fas fa-list"></i> Chart of Accounts
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" href="/Accounting/GeneralLedger">
                    <i class="fas fa-book"></i> General Ledger
                  </a>
                </li>
                <li><hr class="dropdown-divider"></li>

                <!-- Expenses Management -->
                <li>
                  <h6 class="dropdown-header">
                    <i class="fas fa-file-invoice-dollar"></i> Expense Management
                  </h6>
                </li>
                <li>
                  <a class="dropdown-item" href="/Expenses/Index">
                    <i class="fas fa-list"></i> Expense Types
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" href="/Expenses/RecordPayments">
                    <i class="fas fa-file-invoice-dollar text-primary"></i> Record Payments
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" href="/Expenses/Reports">
                    <i class="fas fa-chart-bar text-info"></i> Expense Reports
                  </a>
                </li>
                <li><hr class="dropdown-divider"></li>

                <!-- Journal Entries & Adjustments -->
                <li>
                  <h6 class="dropdown-header">
                    <i class="fas fa-edit"></i> Journal Entries
                  </h6>
                </li>
                <li>
                  <a class="dropdown-item" href="/Accounting/CreateManualJournalEntry">
                    <i class="fas fa-plus-circle text-primary"></i> Manual Entry
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" href="/Accounting/CreateCustomerAdjustment">
                    <i class="fas fa-adjust"></i> Customer Adjustment
                  </a>
                </li>
                <li><hr class="dropdown-divider"></li>

                <!-- Financial Reports -->
                <li>
                  <h6 class="dropdown-header">
                    <i class="fas fa-chart-line"></i> Financial Reports
                  </h6>
                </li>
                <li>
                  <a class="dropdown-item" href="/Accounting/TrialBalance">
                    <i class="fas fa-balance-scale"></i> Trial Balance
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" href="/Accounting/BalanceSheet">
                    <i class="fas fa-chart-bar"></i> Balance Sheet
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" href="/Accounting/IncomeStatement">
                    <i class="fas fa-chart-line"></i> Income Statement
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" href="/Accounting/CashFlowStatement">
                    <i class="fas fa-water text-info"></i> Cash Flow Statement
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" href="/Accounting/AccountsPayable">
                    <i class="fas fa-credit-card"></i> Accounts Payable
                  </a>
                </li>
              </ul>
            </li>

            <!-- Alerts & Monitoring -->
            <li class="nav-item">
              <a class="nav-link" href="#" onclick="showNotifications()" title="Notifications">
                <i class="fas fa-bell"></i>
                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" id="notificationCount" style="display: none;">
                  0
                </span>
              </a>
            </li>

            <!-- User Profile (placeholder) -->
            <li class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="fas fa-user-circle"></i> User
              </a>
              <ul class="dropdown-menu dropdown-menu-end">
                <li>
                  <a class="dropdown-item" href="@Url.Action("Index", "CompanyInfo")">
                    <i class="fas fa-building"></i> Company Info
                  </a>
                </li>
                <li><hr class="dropdown-divider"></li>
                <li>
                  <a class="dropdown-item" href="#">
                    <i class="fas fa-user"></i> Profile
                  </a>
                </li>
                <li>
                  <a class="dropdown-item" href="#">
                    <i class="fas fa-cog"></i> Settings
                  </a>
                </li>
                <li><hr class="dropdown-divider"></li>
                <li>
                  <a class="dropdown-item" href="#">
                    <i class="fas fa-sign-out-alt"></i> Logout
                  </a>
                </li>
              </ul>
            </li>
          </ul>
        </div>
      </div>
    </nav>
  </header>

  <!-- Alert container for notifications -->
  <div class="container-fluid">
    <div id="alertContainer"></div>
  </div>

  <div class="container-fluid">
    <main role="main" class="pb-3">
      @RenderBody()
    </main>
  </div>

  <footer class="border-top footer text-muted">
    <div class="container">
      &copy; 2025 - Inventory Management System -
      <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a> |
      <a href="#" onclick="showSystemInfo()">System Info</a> |
      <a href="#" onclick="testLoadingIndicator()" title="Test Loading Indicator">Test Loading</a> |
      <a href="#" onclick="diagnoseLoadingIndicator()" title="Diagnose Loading System">Diagnose</a> |
      <span class="small">v2.0 with Workflow</span>
    </div>
  </footer>

  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

  <!-- Embedded Loading Indicator System (inline for reliability) -->
  <script>
    // ===== EMBEDDED LOADING INDICATOR SYSTEM =====
    const LoadingIndicator = {
        isInitialized: false,
        isShowing: false,
        timeoutId: null,
        minDisplayTime: 300,
        showDelay: 150, // Restored 150ms delay to prevent flickering on fast operations

        init: function() {
            if (this.isInitialized) return;

            console.log('Initializing embedded LoadingIndicator...');

            // Create the loading overlay HTML
            const loadingHTML = `
                <div id="globalLoadingOverlay" style="display: none;">
                    <div class="loading-backdrop"></div>
                    <div class="loading-content">
                        <div class="loading-spinner">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                        <div class="loading-text">Loading...</div>
                        <div class="loading-subtext">Please wait while the page loads</div>
                    </div>
                </div>
            `;

            document.body.insertAdjacentHTML('beforeend', loadingHTML);
            this.addStyles();
            this.setupNavigationListeners();
            this.isInitialized = true;
            console.log('Embedded LoadingIndicator initialized successfully');
        },

        addStyles: function() {
            if (document.getElementById('loading-indicator-styles')) return;

            const styles = `
                <style id="loading-indicator-styles">
                    #globalLoadingOverlay {
                        position: fixed;
                        top: 0;
                        left: 0;
                        width: 100%;
                        height: 100%;
                        z-index: 9999;
                        pointer-events: none;
                        opacity: 0;
                        transition: opacity 0.2s ease-in-out;
                    }

                    #globalLoadingOverlay.show {
                        opacity: 1;
                    }

                    .loading-backdrop {
                        position: absolute;
                        top: 0;
                        left: 0;
                        width: 100%;
                        height: 100%;
                        background: rgba(255, 255, 255, 0.85);
                        backdrop-filter: blur(2px);
                    }

                    .loading-content {
                        position: absolute;
                        top: 50%;
                        left: 50%;
                        transform: translate(-50%, -50%);
                        text-align: center;
                        background: white;
                        padding: 2rem;
                        border-radius: 12px;
                        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);
                        border: 1px solid rgba(255, 255, 255, 0.2);
                        min-width: 250px;
                    }

                    .loading-spinner {
                        margin-bottom: 1rem;
                    }

                    .loading-spinner .spinner-border {
                        width: 3rem;
                        height: 3rem;
                        border-width: 0.3em;
                    }

                    .loading-text {
                        font-size: 1.1rem;
                        font-weight: 600;
                        color: #333;
                        margin-bottom: 0.5rem;
                    }

                    .loading-subtext {
                        font-size: 0.9rem;
                        color: #6c757d;
                    }

                    body.loading {
                        cursor: wait !important;
                    }

                    body.loading * {
                        cursor: wait !important;
                    }
                </style>
            `;

            document.head.insertAdjacentHTML('beforeend', styles);
        },

        show: function(message = 'Loading...', subtext = 'Please wait while the page loads', immediate = false) {
            if (!this.isInitialized) {
                console.log('LoadingIndicator not initialized, initializing now...');
                this.init();
            }

            if (this.isShowing) return;

            clearTimeout(this.timeoutId);

            // Use immediate mode or default delay
            const delay = immediate ? 0 : this.showDelay;

            this.timeoutId = setTimeout(() => {
                const overlay = document.getElementById('globalLoadingOverlay');
                if (!overlay) return;

                const textElement = overlay.querySelector('.loading-text');
                const subtextElement = overlay.querySelector('.loading-subtext');

                if (textElement) textElement.textContent = message;
                if (subtextElement) subtextElement.textContent = subtext;

                overlay.style.display = 'block';
                document.body.classList.add('loading');

                requestAnimationFrame(() => {
                    overlay.classList.add('show');
                });

                this.isShowing = true;
                console.log('🔄 Loading indicator displayed:', message);
            }, delay);
        },

        hide: function(force = false) {
            clearTimeout(this.timeoutId);

            if (!this.isShowing) return;

            // Add protection against hiding too early during navigation
            // unless explicitly forced
            if (!force && this.timeoutId && Date.now() - this.navigationStartTime < 1000) {
                console.log('🛡️ Protection: Not hiding loading indicator too early during navigation');
                return;
            }

            console.log('LoadingIndicator.hide called, force:', force);
            const overlay = document.getElementById('globalLoadingOverlay');
            if (!overlay) {
                console.log('⚠️ No overlay found, marking as not showing');
                this.isShowing = false;
                return;
            }

            // Add immediate cleanup for forced hide (like validation errors)
            if (force) {
                overlay.classList.remove('show');
                document.body.classList.remove('loading');
                overlay.style.display = 'none';
                this.isShowing = false;
                console.log('✅ Loading indicator force hidden immediately');
                return;
            }

            setTimeout(() => {
                overlay.classList.remove('show');
                document.body.classList.remove('loading');

                setTimeout(() => {
                    overlay.style.display = 'none';
                    this.isShowing = false;
                    console.log('✅ Loading indicator hidden');
                }, 200);
            }, this.minDisplayTime);
        },

        setupNavigationListeners: function() {
            console.log('🔧 Setting up navigation listeners...');

            // Navigation links - using event delegation for better performance
            document.addEventListener('click', (e) => {
                const link = e.target.closest('a[href]');
                if (!link) return;

                const href = link.getAttribute('href');
                console.log('🔗 Link clicked:', href, 'Element:', link);

                if (!href ||
                    href.startsWith('#') ||
                    href.startsWith('mailto:') ||
                    href.startsWith('tel:') ||
                    href.includes('download') ||
                    href.includes('javascript:') ||
                    link.target === '_blank' ||
                    link.hasAttribute('download') ||
                    href === window.location.pathname + window.location.search) {
                    console.log('⏭️ Skipping link:', href);
                    return;
                }

                // Enhanced message detection with specific RecordPayments handling
                let message = 'Loading...';
                let subtext = 'Please wait';
                // ✅ ADD: Cash Flow Statement handling
            if (href.includes('/CashFlowStatement')) {
                operation = 'loading-cash-flow-statement';
            }
            // Check for RecordPayments specifically
            else if (href.includes('/RecordPayments') || href.includes('/RecordPayment')) {
                operation = 'loading-payment-recording';
            }
            // ✅ ADD: Other Accounting reports
            else if (href.includes('/TrialBalance')) {
                operation = 'loading-trial-balance';
            }
            else if (href.includes('/BalanceSheet')) {
                operation = 'loading-balance-sheet';
            }
            else if (href.includes('/IncomeStatement')) {
                operation = 'loading-income-statement';
            }
            else if (href.includes('/GeneralLedger')) {
                operation = 'loading-general-ledger';
            }
            else if (href.includes('/ChartOfAccounts')) {
                operation = 'loading-chart-of-accounts';
            }
                // Check for specific Details pages
                else if (href.includes('/Details/') || href.match(/\/\w+\/\d+$/)) {
                    if (href.includes('/Items/Details/') || href.match(/\/Items\/\d+$/)) {
                        message = 'Loading Item Details...';
                        subtext = 'Retrieving complete item information';
                    } else if (href.includes('/Vendors/Details/') || href.match(/\/Vendors\/\d+$/)) {
                        message = 'Loading Vendor Details...';
                        subtext = 'Retrieving vendor information and relationships';
                    } else if (href.includes('/Customers/Details/') || href.match(/\/Customers\/\d+$/)) {
                        message = 'Loading Customer Details...';
                        subtext = 'Retrieving customer profile and history';
                    } else if (href.includes('/Sales/Details/') || href.match(/\/Sales\/\d+$/)) {
                        message = 'Loading Sale Details...';
                        subtext = 'Retrieving order details and status';
                    } else if (href.includes('/Production/Details/') || href.match(/\/Production\/\d+$/)) {
                        message = 'Loading Production Details...';
                        subtext = 'Retrieving production status and progress';
                    } else if (href.includes('/Boms/Details/') || href.match(/\/Boms\/\d+$/)) {
                        message = 'Loading BOM Details...';
                        subtext = 'Retrieving Bill of Materials structure';
                    } else if (href.includes('/Purchases/Details/') || href.match(/\/Purchases\/\d+$/)) {
                        message = 'Loading Purchase Order Details...';
                        subtext = 'Retrieving purchase order information';
                    } else if (href.includes('/Expenses/Details/') || href.match(/\/Expenses\/\d+$/)) {
                        message = 'Loading Expense Details...';
                        subtext = 'Retrieving expense information and payment history';
                    } else if (href.includes('/ChangeOrders/Details/') || href.match(/\/ChangeOrders\/\d+$/)) {
                        message = 'Loading Change Order Details...';
                        subtext = 'Retrieving change order specifications';
                    } else {
                        message = 'Loading Details...';
                        subtext = 'Retrieving detailed information';
                    }
                }
                // Check for Expenses section specifically
                else if (href.includes('/Expenses')) {
                  if (href.includes('/RecordPayments') || href.includes('/RecordPayment')) {
                      message = 'Loading Payment Recording...';
                      subtext = 'Preparing expense payment form with document upload';
                  } else if (href.includes('/Create')) {
                      message = 'Loading Expense Creator...';
                      subtext = 'Preparing new expense form';
                  } else if (href.includes('/Edit/')) {
                      message = 'Loading Expense Editor...';
                      subtext = 'Preparing expense for editing';
                  } else if (href.includes('/Reports')) {
                      message = 'Loading Expense Reports...';
                      subtext = 'Generating expense analytics and compliance data';
                  } else if (href.includes('/IncomeStatement')) {
                      message = 'Loading Income Statement...';
                      subtext = 'Generating financial performance report';
                  } else if (href.includes('/TaxReports')) {
                      message = 'Loading Tax Reports...';
                      subtext = 'Generating tax deduction reports';
                  } else if (href.includes('/UploadDocument')) {
                      message = 'Loading Document Upload...';
                      subtext = 'Preparing document upload interface';
                  } else {
                      message = 'Loading Expenses...';
                      subtext = 'Retrieving expense data';
                  }
                }
                // Check for general section navigation
                else if (href.includes('/Boms')) {
                    if (href.includes('/Create')) {
                        message = 'Loading BOM Creator...';
                        subtext = 'Preparing new Bill of Materials form';
                    } else if (href.includes('/Visualize/')) {
                        message = 'Loading BOM Visualizer...';
                        subtext = 'Generating interactive BOM diagram';
                    } else {
                        message = 'Loading BOMs...';
                        subtext = 'Retrieving Bill of Materials data';
                    }
                } else if (href.includes('/Items')) {
                    if (href.includes('/Create')) {
                        message = 'Loading Item Creator...';
                        subtext = 'Preparing new item form';
                    } else if (href.includes('/Edit/')) {
                        message = 'Loading Item Editor...';
                        subtext = 'Preparing item for editing';
                    } else if (href.includes('/BulkUpload')) {
                        message = 'Loading Bulk Upload...';
                        subtext = 'Preparing bulk import interface';
                    } else {
                        message = 'Loading Items...';
                        subtext = 'Retrieving inventory data';
                    }
                } else if (href.includes('/Vendors')) {
                    if (href.includes('/Create')) {
                        message = 'Loading Vendor Creator...';
                        subtext = 'Preparing new vendor form';
                    } else if (href.includes('/Edit/')) {
                        message = 'Loading Vendor Editor...';
                        subtext = 'Preparing vendor for editing';
                    } else if (href.includes('/Reports')) {
                        message = 'Loading Vendor Reports...';
                        subtext = 'Generating vendor analytics';
                    } else {
                        message = 'Loading Vendors...';
                        subtext = 'Retrieving vendor information';
                    }
                } else if (href.includes('/Customers')) {
                    if (href.includes('/Create')) {
                        message = 'Loading Customer Creator...';
                        subtext = 'Preparing new customer form';
                    } else if (href.includes('/Edit/')) {
                        message = 'Loading Customer Editor...';
                        subtext = 'Preparing customer for editing';
                    } else if (href.includes('/Reports')) {
                        message = 'Loading Customer Reports...';
                        subtext = 'Generating customer analytics';
                    } else {
                        message = 'Loading Customers...';
                        subtext = 'Retrieving customer data';
                    }
                } else if (href.includes('/CustomerService')) {
                    if (href.includes('/Dashboard')) {
                        message = 'Loading Service Dashboard...';
                        subtext = 'Retrieving customer service metrics';
                    } else if (href.includes('/Create')) {
                        message = 'Loading Support Case Creator...';
                        subtext = 'Preparing new support case form';
                    } else {
                        message = 'Loading Customer Service...';
                        subtext = 'Retrieving support case data';
                    }
                } else if (href.includes('/Sales')) {
                    if (href.includes('/Create')) {
                        message = 'Loading Sale Creator...';
                        subtext = 'Preparing new sale form';
                      } else if (href.includes('/Edit/')) {
                        message = 'Loading Sale Editor...';
                        subtext = 'Preparing sale for editing';
                      } else if (href.includes('/Reports')) {
                        message = 'Loading Sales Reports...';
                        subtext = 'Generating sales analytics';
                      } else if (href.includes('/Backorders')) {
                        message = 'Loading Backorders...';
                        subtext = 'Retrieving pending orders';
                      } else {
                        message = 'Loading Sales...';
                        subtext = 'Retrieving sales information';
                      }
                } else if (href.includes('/Production')) {
                    if (href.includes('/BuildBom')) {
                        message = 'Loading Production Builder...';
                        subtext = 'Preparing BOM production interface';
                    } else if (href.includes('/FinishedGoods')) {
                        message = 'Loading Finished Goods...';
                        subtext = 'Retrieving completed products';
                    } else {
                        message = 'Loading Production...';
                        subtext = 'Retrieving production data';
                    }
                } else if (href.includes('/Purchases')) {
                    if (href.includes('/Create')) {
                        message = 'Loading Purchase Order Creator...';
                        subtext = 'Preparing new purchase order';
                    } else if (href.includes('/CreateMultiLine')) {
                        message = 'Loading Multi-Line Purchase Order...';
                        subtext = 'Preparing bulk purchase interface';
                    } else {
                        message = 'Loading Purchases...';
                        subtext = 'Retrieving purchase data';
                    }
                } else if (href.includes('/WipDashboard')) {
                    if (href.includes('/Kanban')) {
                        message = 'Loading Kanban Board...';
                        subtext = 'Retrieving workflow visualization';
                    } else {
                        message = 'Loading WIP Dashboard...';
                        subtext = 'Retrieving work-in-progress data';
                    }
                } else if (href.includes('/Accounting')) {
                    if (href.includes('/TrialBalance')) {
                        message = 'Loading Trial Balance...';
                        subtext = 'Calculating account balances';
                    } else if (href.includes('/BalanceSheet')) {
                        message = 'Loading Balance Sheet...';
                        subtext = 'Generating financial position statement';
                    } else if (href.includes('/IncomeStatement')) {
                        message = 'Loading Income Statement...';
                        subtext = 'Calculating revenue and expenses';
                    } else if (href.includes('/CashFlowStatement')) {
                        message = 'Loading Cash Flow Statement...';
                        subtext = 'Generating cash flow analysis';
                    } else {
                        message = 'Loading Accounting...';
                        subtext = 'Retrieving financial data';
                    }
                } else if (href.includes('/Home')) {
                    message = 'Loading Dashboard...';
                    subtext = 'Retrieving dashboard data';
                } else {
                    message = 'Navigating...';
                    subtext = 'Loading page content';
                }

                console.log(`🚀 Navigation detected! Showing: "${message}"`);
                this.show(message, subtext);
            });

            // Form submissions
            document.addEventListener('submit', (e) => {
                const form = e.target;
                if (form.enctype === 'multipart/form-data') {
                    this.show('Uploading...', 'Processing file upload and form data');
                } else {
                    this.show('Processing...', 'Submitting form data');
                }
            });

            // Page events - remove beforeunload to prevent early hiding
            window.addEventListener('load', () => this.hide());
        },

        showForOperation: function(operation, immediate = true) {
            const messages = {
                'loading-accounting': { text: 'Loading Accounting...', subtext: 'Retrieving financial data and reports' },
                'loading-bom': { text: 'Loading BOM...', subtext: 'Retrieving Bill of Materials data' },
                'loading-items': { text: 'Loading Items...', subtext: 'Retrieving inventory data' },
                'loading-vendors': { text: 'Loading Vendors...', subtext: 'Retrieving vendor information' },
                'loading-customers': { text: 'Loading Customers...', subtext: 'Retrieving customer data' },
                'loading-sales': { text: 'Loading Sales...', subtext: 'Retrieving sales information' },
                'loading-production': { text: 'Loading Production...', subtext: 'Retrieving production data' },
                'loading-dashboard': { text: 'Loading Dashboard...', subtext: 'Retrieving dashboard data' },
                'loading-purchases': { text: 'Loading Purchases...', subtext: 'Retrieving purchase data' },
                'loading-expenses': { text: 'Loading Expenses...', subtext: 'Retrieving expense data' },
                'loading-payment-recording': { text: 'Loading Payment Recording...', subtext: 'Preparing expense payment form with document upload' },
                'generating-report': { text: 'Generating Report...', subtext: 'Processing data and calculations' },
                'uploading': { text: 'Uploading...', subtext: 'Transferring files to server' },
                'saving': { text: 'Saving...', subtext: 'Updating database records' },
                'recording-payment': { text: 'Recording Payment...', subtext: 'Processing payment data and documents' }
            };

            const config = messages[operation] || { text: 'Loading...', subtext: 'Please wait' };
            this.show(config.text, config.subtext, immediate);
        },

        test: function() {
            console.log('🧪 Testing LoadingIndicator...');
            this.show('Test Loading...', 'This is a test', true);
            setTimeout(() => this.hide(), 3000);
        }
    };

    // Initialize immediately when declared (not waiting for DOMContentLoaded)
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            console.log('📄 DOM loaded, initializing LoadingIndicator...');
            LoadingIndicator.init();
        });
    } else {
        // DOM is already loaded, initialize immediately
        console.log('📄 DOM already loaded, initializing LoadingIndicator immediately...');
        LoadingIndicator.init();
    }

    // Make globally available immediately
    window.LoadingIndicator = LoadingIndicator;
  </script>

  <!-- Try to load site.js but don't depend on it -->
  <script src="~/js/site.js" asp-append-version="true" onerror="console.log('site.js failed to load, using embedded LoadingIndicator')"></script>

  <!-- Global workflow JavaScript -->
  <script>
        // Global notification system
        function showNotification(message, type = 'info') {
            const alertContainer = document.getElementById('alertContainer');
            const alertId = 'alert-' + Date.now();

            const alertHtml = `
                <div class="alert alert-${type} alert-dismissible fade show" role="alert" id="${alertId}">
                    <i class="fas fa-${getIconForType(type)}"></i> ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;

            alertContainer.insertAdjacentHTML('beforeend', alertHtml);

            // Auto-dismiss after 5 seconds
            setTimeout(() => {
                const alert = document.getElementById(alertId);
                if (alert) {
                    const bsAlert = new bootstrap.Alert(alert);
                    bsAlert.close();
                }
            }, 5000);
        }

        function getIconForType(type) {
            switch(type) {
                case 'success': return 'check-circle';
                case 'danger': return 'exclamation-triangle';
                case 'warning': return 'exclamation-circle';
                case 'info': return 'info-circle';
                default: return 'info-circle';
            }
        }

        // Placeholder notification function
        function showNotifications() {
            showNotification('Notification system coming soon!', 'info');
        }

        // System info modal
        function showSystemInfo() {
            alert('Inventory Management System v2.0\nWith Advanced Workflow Management\n\nFeatures:\n• Real-time WIP Dashboard\n• Kanban Board\n• Production Workflow\n• Quality Control\n• Employee Assignment');
        }

        // Check for workflow updates every 30 seconds
        setInterval(function() {
            if (window.location.pathname.includes('WipDashboard') ||
                window.location.pathname.includes('Production')) {
                // Refresh workflow data if on relevant pages
                // This would call an API endpoint to check for updates
            }
        }, 30000);

        // Highlight active navigation item
        document.addEventListener('DOMContentLoaded', function() {
            const currentPath = window.location.pathname;
            const navLinks = document.querySelectorAll('.navbar-nav .nav-link, .dropdown-item');

            navLinks.forEach(link => {
                const href = link.getAttribute('href');
                if (href && currentPath.includes(href) && href !== '/') {
                    link.classList.add('active');
                    // Also highlight parent dropdown if it's a dropdown item
                    const dropdown = link.closest('.dropdown');
                    if (dropdown) {
                        dropdown.querySelector('.nav-link').classList.add('active');
                    }
                }
            });

            // Enhanced navigation with loading indicators
            setupEnhancedNavigation();

            // Global validation error detection and cleanup (run after a short delay to ensure DOM is fully loaded)
            setTimeout(() => {
                checkForValidationErrorsAndCleanup();
            }, 250);
        });
        
        // Enhanced Navigation Setup
        function setupEnhancedNavigation() {
            console.log('🔧 Setting up enhanced navigation...');

            // Add loading indicators for specific page types
            const navLinks = document.querySelectorAll('.navbar-nav a[href], .dropdown-item[href]');
            console.log(`🔧 Found ${navLinks.length} navigation links`);

            navLinks.forEach((link, index) => {
                const href = link.getAttribute('href');

                link.addEventListener('click', function(e) {
                    const href = this.getAttribute('href');

                    // Skip if it's not a navigation link
                    if (!href || href.startsWith('#') || href.startsWith('mailto:') || this.target === '_blank') {
                        console.log('⏭️ Enhanced nav: Skipping link:', href);
                        return;
                    }

                    console.log('🔧 Enhanced navigation click:', href);

                    // Show appropriate loading indicator with immediate mode
                    if (window.LoadingIndicator) {
                        console.log('🚀 Enhanced nav: Showing loading');
                        window.LoadingIndicator.show('Loading...', 'Please wait', true); // Always immediate
                    } else {
                        console.error('❌ LoadingIndicator not available in enhanced nav!');
                    }
                });
            });

            console.log('✅ Enhanced navigation setup complete');
        }

        // Global validation error detection and loading indicator cleanup
        function checkForValidationErrorsAndCleanup() {
            // Check for various validation error indicators
            const validationErrors = document.querySelectorAll(
                '.text-danger:not(:empty), ' +
                '.alert-danger, ' +
                '.alert-warning, ' +
                '.validation-summary-errors, ' +
                '.field-validation-error:not(:empty), ' +
                '.is-invalid, ' +
                'span[data-valmsg-for]:not(:empty)'
            );

            const hasValidationErrors = validationErrors.length > 0;

            if (hasValidationErrors) {
                console.log('⚠️ Global validation error detection: Found', validationErrors.length, 'validation errors');

                // Force hide any loading indicator that might be showing
                if (window.LoadingIndicator && window.LoadingIndicator.isShowing) {
                    console.log('⚠️ Hiding loading indicator due to validation errors');
                    window.LoadingIndicator.hide(true); // Force hide
                }

                // Add a small delay to ensure the page is fully rendered
                setTimeout(() => {
                    // Find and focus on the first error field for better UX
                    const firstErrorField = document.querySelector(
                        'input.is-invalid, ' +
                        'select.is-invalid, ' +
                        'textarea.is-invalid, ' +
                        '.text-danger:not(:empty)'
                    );

                    if (firstErrorField) {
                        let targetElement = firstErrorField;

                        // If it's an error message, try to find the related input
                        if (firstErrorField.classList.contains('text-danger') || firstErrorField.tagName === 'SPAN') {
                          const forAttribute = firstErrorField.getAttribute('data-valmsg-for');
                          if (forAttribute) {
                            const relatedInput = document.querySelector(`[name="${forAttribute}"], #${forAttribute}`);
                            if (relatedInput) {
                              targetElement = relatedInput;
                            }
                          } else {
                            // Try to find a nearby input
                            const nearbyInput = firstErrorField.parentElement?.querySelector('input, select, textarea');
                            if (nearbyInput) {
                              targetElement = nearbyInput;
                            }
                          }
                        }

                        console.log('⚠️ Focusing on error field:', targetElement);
                        targetElement.focus();

                        // Scroll to the error if it's not visible
                        targetElement.scrollIntoView({
                            behavior: 'smooth',
                            block: 'center'
                        });
                    }
                }, 100);
            }

            return hasValidationErrors;
        }

        // Add page visibility change handler for cleanup
        document.addEventListener('visibilitychange', function() {
            if (document.visibilityState === 'visible') {
                console.log('⚠️ Page became visible, checking for validation errors and cleaning up loading indicators');

                // Run cleanup after a small delay to ensure page is fully rendered
                setTimeout(() => {
                    checkForValidationErrorsAndCleanup();
                }, 100);
            }
        });

        // Add beforeunload handler to ensure cleanup
        window.addEventListener('beforeunload', function() {
            if (window.LoadingIndicator && window.LoadingIndicator.isShowing) {
                console.log('⚠️ Page unloading, hiding loading indicator');
                window.LoadingIndicator.hide(true);
            }
        });

        // Add loading indicator test functionality (for debugging)
        window.testLoadingIndicator = function() {
            console.log('Testing LoadingIndicator...');
            if (window.LoadingIndicator) {
                if (window.LoadingIndicator.isInitialized) {
                    window.LoadingIndicator.test();
                } else {
                    console.error('LoadingIndicator not initialized!');
                    alert('LoadingIndicator not initialized! Check console for errors.');
                }
            } else {
                console.error('LoadingIndicator not found!');
                alert('LoadingIndicator not found! This should not happen with embedded system.');
            }
        };

        // Diagnostic function
        window.diagnoseLoadingIndicator = function() {
            console.log('=== LoadingIndicator Diagnostics ===');
            console.log('LoadingIndicator exists:', !!window.LoadingIndicator);
            console.log('IsInitialized:', window.LoadingIndicator?.isInitialized);
            console.log('IsShowing:', window.LoadingIndicator?.isShowing);
            console.log('Overlay exists:', !!document.getElementById('globalLoadingOverlay'));
            console.log('Styles exist:', !!document.getElementById('loading-indicator-styles'));
            console.log('jQuery available:', !!window.jQuery);

            const results = `
    EMBEDDED LOADING SYSTEM:
    - LoadingIndicator exists: ${!!window.LoadingIndicator}
    - IsInitialized: ${window.LoadingIndicator?.isInitialized}
    - IsShowing: ${window.LoadingIndicator?.isShowing}
    - Overlay exists: ${!!document.getElementById('globalLoadingOverlay')}
    - Styles exist: ${!!document.getElementById('loading-indicator-styles')}

    ENVIRONMENT:
    - jQuery available: ${!!window.jQuery}
    - DOM ready: ${document.readyState}
            `;

            alert('LoadingIndicator Diagnostics:\n' + results);

            // Test the system
            if (window.LoadingIndicator && window.LoadingIndicator.isInitialized) {
                console.log('Running quick test...');
                window.LoadingIndicator.show('Diagnostic Test', 'System is working!');
                setTimeout(() => {
                    window.LoadingIndicator.hide();
                }, 2000);
            }
        };
  </script>

  @await RenderSectionAsync("Scripts", required: false)
</body>
</html>