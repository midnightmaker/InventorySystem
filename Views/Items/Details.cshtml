@model InventorySystem.Models.Item
@{
  ViewData["Title"] = "Item Details";

  var averageCost = ViewBag.AverageCost as decimal? ?? 0;
  var fifoValue = ViewBag.FifoValue as decimal? ?? 0;
  var purchases = ViewBag.Purchases as IEnumerable<InventorySystem.Models.Purchase> ?? new List<InventorySystem.Models.Purchase>();
}

<div class="d-flex justify-content-between align-items-center mb-4">
  <div class="d-flex align-items-center">
    <h1 class="me-3"><i class="fas fa-cube"></i> @Model.PartNumber</h1>
    <!-- Version Dropdown -->
    @if (ViewBag.ItemVersions != null)
    {
      @await Html.PartialAsync("_VersionDropdown", ViewBag.ItemVersions, new ViewDataDictionary(ViewData)
      {
      ["CurrentVersion"] = Model.Version,
        ["EntityType"] = "Items",
        ["EntityId"] = Model.BaseItemId ?? Model.Id
        })
        }
  </div>
  <div class="btn-group">
    @if (Model.IsCurrentVersion)
    {
      <a href="/Items/Edit/@Model.Id" class="btn btn-outline-primary">
        <i class="fas fa-edit"></i> Edit
      </a>
    }
    <a href="/Purchases/Create?itemId=@Model.Id" class="btn btn-success">
      <i class="fas fa-shopping-cart"></i> Add Purchase
    </a>
    @if (Model.IsCurrentVersion)
    {
      <a href="/Documents/Upload?itemId=@Model.Id" class="btn btn-outline-info">
        <i class="fas fa-upload"></i> Upload Document
      </a>
    }
    <!-- Create New Version Button -->
    <button type="button" class="btn btn-outline-warning" onclick="showCreateVersionModal('Item', @(Model.BaseItemId ?? Model.Id))">
      <i class="fas fa-code-branch"></i> New Version
    </button>
  </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
  <div class="alert alert-success alert-dismissible fade show">
    @TempData["SuccessMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

@if (TempData["ErrorMessage"] != null)
{
  <div class="alert alert-danger alert-dismissible fade show">
    @TempData["ErrorMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

@if (TempData["WarningMessage"] != null)
{
  <div class="alert alert-warning alert-dismissible fade show">
    @TempData["WarningMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

<div class="row">
  <div class="col-md-8">
    <div class="card">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h5><i class="fas fa-info-circle"></i> Item Information</h5>
        @if (!Model.IsCurrentVersion)
        {
          <span class="badge bg-warning">Historical Version</span>
        }
        else
        {
          <span class="badge bg-success">Current Version</span>
        }
      </div>
      <div class="card-body">
        <dl class="row">
          <dt class="col-sm-3">Part Number:</dt>
          <dd class="col-sm-9">
            <strong>@Model.PartNumber</strong>
            <span class="badge bg-primary ms-2">@Model.Version</span>
          </dd>

          <dt class="col-sm-3">Description:</dt>
          <dd class="col-sm-9">@Model.Description</dd>

          <dt class="col-sm-3">Current Stock:</dt>
          <dd class="col-sm-9">
            <span class="badge bg-@(Model.CurrentStock > Model.MinimumStock ? "success" : "danger") fs-6">
              @Model.CurrentStock
            </span>
            @if (Model.TrackInventory)
            {
              <small class="text-muted ms-2">(Min: @Model.MinimumStock)</small>
            }
          </dd>

          <dt class="col-sm-3">Item Type:</dt>
          <dd class="col-sm-9">
            <span class="badge bg-info">@Model.ItemTypeDisplayName</span>
          </dd>

          @if (Model.IsSellable)
          {
            <dt class="col-sm-3">Sellable:</dt>
            <dd class="col-sm-9">
              <span class="badge bg-success">Yes</span>
            </dd>
          }

          @if (!string.IsNullOrEmpty(Model.VendorPartNumber))
          {
            <dt class="col-sm-3">Vendor Part #:</dt>
            <dd class="col-sm-9">@Model.VendorPartNumber</dd>
          }

          @if (!string.IsNullOrEmpty(Model.PreferredVendor))
          {
            <dt class="col-sm-3">Preferred Vendor:</dt>
            <dd class="col-sm-9">@Model.PreferredVendor</dd>
          }

          <dt class="col-sm-3">Created:</dt>
          <dd class="col-sm-9">@Model.CreatedDate.ToString("MM/dd/yyyy")</dd>

          @if (Model.TrackInventory)
          {
            <dt class="col-sm-3">Average Cost:</dt>
            <dd class="col-sm-9">
              <strong class="text-primary">@averageCost.ToString("C")</strong>
            </dd>

            <dt class="col-sm-3">FIFO Value:</dt>
            <dd class="col-sm-9">
              <strong class="text-success">@fifoValue.ToString("C")</strong>
            </dd>
          }

          @if (!string.IsNullOrEmpty(Model.Comments))
          {
            <dt class="col-sm-3">Comments:</dt>
            <dd class="col-sm-9">@Model.Comments</dd>
          }
        </dl>
      </div>
    </div>

    <!-- Item Image Section -->
    @if (Model.HasImage && Model.ImageData != null)
    {
      <div class="card mt-4">
        <div class="card-header">
          <h5><i class="fas fa-image"></i> Item Image</h5>
        </div>
        <div class="card-body text-center">
          <img src="data:@Model.ImageContentType;base64,@Convert.ToBase64String(Model.ImageData)"
               alt="@Model.PartNumber"
               class="img-thumbnail"
               style="max-height: 300px; cursor: pointer;"
               onclick="showImageModal('@Model.PartNumber', 'data:@Model.ImageContentType;base64,@Convert.ToBase64String(Model.ImageData)')" />
          <br>
          <small class="text-muted">@Model.ImageFileName</small>
        </div>
      </div>
    }

    <!-- Design Documents Section -->
    @if (Model.DesignDocuments?.Any() == true)
    {
      <div class="card mt-4">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h5><i class="fas fa-file-alt"></i> Design Documents (@Model.DesignDocuments.Count)</h5>
          @if (Model.IsCurrentVersion)
          {
            <a href="/Documents/Upload?itemId=@Model.Id" class="btn btn-sm btn-outline-success">
              <i class="fas fa-plus"></i> Add Document
            </a>
          }
        </div>
        <div class="card-body">
          <div class="list-group list-group-flush">
            @foreach (var doc in Model.DesignDocuments.OrderBy(d => d.DocumentType).ThenBy(d => d.DocumentName))
            {
              <div class="list-group-item d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                  <i class="@doc.FileTypeIcon fa-2x me-3"></i>
                  <div>
                    <h6 class="mb-1">@doc.DocumentName</h6>
                    <small class="text-muted">
                      <strong>Type:</strong> @doc.DocumentType<br>
                      <strong>File:</strong> @doc.FileName (@doc.FileSizeFormatted)<br>
                      <strong>Uploaded:</strong> @doc.UploadedDate.ToString("MM/dd/yyyy HH:mm")
                    </small>
                    @if (!string.IsNullOrEmpty(doc.Description))
                    {
                      <br>
                      <small class="text-muted"><strong>Description:</strong> @doc.Description</small>
                    }
                  </div>
                </div>
                <div class="btn-group btn-group-sm">
                  <a href="/Documents/Download/@doc.Id" class="btn btn-outline-primary" target="_blank" title="Download">
                    <i class="fas fa-download"></i>
                  </a>
                  @if (Model.IsCurrentVersion)
                  {
                    <form asp-controller="Documents" asp-action="Delete" method="post" style="display:inline;">
                      <input type="hidden" name="id" value="@doc.Id" />
                      <button type="submit" class="btn btn-outline-danger"
                              onclick="return confirm('Delete this document? This action cannot be undone.')"
                              title="Delete Document">
                        <i class="fas fa-trash"></i>
                      </button>
                    </form>
                  }
                </div>
              </div>
            }
          </div>
        </div>
      </div>
    }
    else
    {
      <div class="card mt-4">
        <div class="card-header">
          <h6><i class="fas fa-file-alt"></i> Design Documents</h6>
        </div>
        <div class="card-body text-center">
          <i class="fas fa-file-alt fa-3x text-muted mb-3"></i>
          <h6 class="text-muted">No Documents Uploaded</h6>
          <p class="text-muted">
            @if (Model.IsCurrentVersion)
            {
              <span>Upload drawings, specifications, datasheets, and other design documents related to this item.</span>
            }
            else
            {
              <span>No documents were uploaded for Version @Model.Version</span>
            }
          </p>
          @if (Model.IsCurrentVersion)
          {
            <a href="/Documents/Upload?itemId=@Model.Id" class="btn btn-outline-success">
              <i class="fas fa-upload"></i> Upload First Document
            </a>
          }
        </div>
      </div>
    }

    <!-- Purchase History with Version Filtering -->
    <div class="card mt-4">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h5>Purchase History</h5>
        @if (ViewBag.PurchasesByVersion != null)
        {
          <div class="dropdown">
            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
              <i class="fas fa-filter"></i> Filter by Version
            </button>
            <ul class="dropdown-menu">
              <li><a class="dropdown-item" href="#" onclick="filterPurchasesByVersion('')">All Versions</a></li>
              @foreach (var versionGroup in (Dictionary<string, IEnumerable<InventorySystem.Models.Purchase>>)ViewBag.PurchasesByVersion)
              {
                <li>
                  <a class="dropdown-item" href="#" onclick="filterPurchasesByVersion('@versionGroup.Key')">
                    Version @versionGroup.Key (@versionGroup.Value.Count())
                  </a>
                </li>
              }
            </ul>
          </div>
        }
      </div>
      <div class="card-body">
        @if (purchases.Any())
        {
          <div class="table-responsive">
            <table class="table table-sm" id="purchaseTable">
              <thead>
                <tr>
                  <th>Date</th>
                  <th>Vendor</th>
                  <th>Version</th>
                  <th>Quantity</th>
                  <th>Cost/Unit</th>
                  <th>Total Cost</th>
                  <th>Remaining</th>
                  <th>PO#</th>
                </tr>
              </thead>
              <tbody>
                @foreach (var purchase in purchases)
                {
                  <tr data-version="@(purchase.ItemVersion ?? "N/A")">
                    <td>@purchase.PurchaseDate.ToString("MM/dd/yyyy")</td>
                    <td>@purchase.Vendor</td>
                    <td>
                      <span class="badge bg-@(purchase.ItemVersion == Model.Version ? "primary" : "secondary")">
                        @(purchase.ItemVersion ?? "N/A")
                      </span>
                    </td>
                    <td>@purchase.QuantityPurchased</td>
                    <td>@purchase.CostPerUnit.ToString("C")</td>
                    <td>@purchase.TotalCost.ToString("C")</td>
                    <td>@purchase.RemainingQuantity</td>
                    <td>@purchase.PurchaseOrderNumber</td>
                  </tr>
                }
              </tbody>
            </table>
          </div>
        }
        else
        {
          <div class="text-center py-4">
            <i class="fas fa-shopping-cart fa-3x text-muted mb-3"></i>
            <h6 class="text-muted">No Purchase History</h6>
            <p class="text-muted">No purchases have been recorded for this item.</p>
            <a href="/Purchases/Create?itemId=@Model.Id" class="btn btn-outline-success">
              <i class="fas fa-plus"></i> Add First Purchase
            </a>
          </div>
        }
      </div>
    </div>

    <!-- Item Versions Section -->
    @if (ViewBag.ItemVersions != null)
    {
      var itemVersions = ViewBag.ItemVersions as IEnumerable<InventorySystem.Models.Item>;
      if (itemVersions != null && itemVersions.Count() > 1)
      {
        <div class="card mt-4">
          <div class="card-header">
            <h5><i class="fas fa-code-branch"></i> Version History (@itemVersions.Count())</h5>
          </div>
          <div class="card-body">
            <div class="row">
              @foreach (var version in itemVersions)
              {
                <div class="col-md-6 mb-3">
                  <div class="card @(version.IsCurrentVersion ? "border-success" : version.Version == Model.Version ? "border-primary" : "")">
                    <div class="card-body py-2 @(version.Version == Model.Version ? "bg-light" : version.IsCurrentVersion ? "bg-light" : "")">
                      <div class="d-flex justify-content-between align-items-center @(version.Version == Model.Version ? "active" : "")">
                        <div>
                          <strong>@version.Version</strong>
                          @if (version.IsCurrentVersion)
                          {
                            <span class="badge bg-success ms-2">Current</span>
                          }
                          <br>
                          <small class="text-muted">@version.CreatedDate.ToString("MM/dd/yyyy")</small>
                        </div>
                        @if (version.Version != Model.Version)
                        {
                          <a href="/Items/Details/@version.Id" class="btn btn-sm btn-outline-primary">View</a>
                        }
                      </div>
                    </div>
                  </div>
                </div>
              }
            </div>
          </div>
        </div>
      }
    }
  </div>

  <div class="col-md-4">
    <div class="card">
      <div class="card-header">
        <h6><i class="fas fa-chart-bar"></i> Item Summary</h6>
      </div>
      <div class="card-body">
        <dl class="row small">
          <dt class="col-sm-6">Version:</dt>
          <dd class="col-sm-6">@Model.Version</dd>

          <dt class="col-sm-6">Type:</dt>
          <dd class="col-sm-6">@Model.ItemTypeDisplayName</dd>

          <dt class="col-sm-6">Stock:</dt>
          <dd class="col-sm-6">@Model.CurrentStock</dd>

          <dt class="col-sm-6">Value:</dt>
          <dd class="col-sm-6">@fifoValue.ToString("C")</dd>

          <dt class="col-sm-6">Documents:</dt>
          <dd class="col-sm-6">@(Model.DesignDocuments?.Count ?? 0)</dd>

          <dt class="col-sm-6">Purchases:</dt>
          <dd class="col-sm-6">@purchases.Count()</dd>
        </dl>
      </div>
    </div>

    @if (!Model.IsCurrentVersion)
    {
      <div class="card mt-3">
        <div class="card-header bg-warning text-dark">
          <h6><i class="fas fa-exclamation-triangle"></i> Historical Version</h6>
        </div>
        <div class="card-body">
          <p class="mb-2">This is version <strong>@Model.Version</strong> of the item.</p>
          <p class="mb-3">To make changes, work with the current version.</p>
          @if (ViewBag.ItemVersions != null)
          {
            var currentVersion = ((IEnumerable<InventorySystem.Models.Item>)ViewBag.ItemVersions).FirstOrDefault(v => v.IsCurrentVersion);
            if (currentVersion != null)
            {
              <a href="/Items/Details/@currentVersion.Id" class="btn btn-outline-primary btn-sm">
                <i class="fas fa-arrow-right"></i> Go to Current Version (@currentVersion.Version)
              </a>
            }
          }
        </div>
      </div>
    }

    @if (ViewBag.PendingChangeOrders != null)
    {
      var pendingChangeOrders = ViewBag.PendingChangeOrders as List<InventorySystem.Models.ChangeOrder>;
      if (pendingChangeOrders != null && pendingChangeOrders.Any())
      {
        <div class="card mt-3">
          <div class="card-header bg-warning text-dark">
            <h6><i class="fas fa-clock"></i> Pending Change Orders</h6>
          </div>
          <div class="card-body">
            @foreach (var changeOrder in pendingChangeOrders)
            {
              <div class="mb-2">
                <strong>@changeOrder.ChangeOrderNumber</strong>
                <span class="badge bg-warning ms-2">@changeOrder.NewVersion</span>
                <br>
                <small class="text-muted">@changeOrder.CreatedDate.ToString("MM/dd/yyyy")</small>
                <div class="mt-1">
                  <a href="/ChangeOrders/Details/@changeOrder.Id" class="btn btn-sm btn-outline-primary">
                    <i class="fas fa-eye"></i> View
                  </a>
                </div>
              </div>
            }
          </div>
        </div>
      }
    }
  </div>
</div>

<div class="mt-3">
  <a href="/Items" class="btn btn-secondary">Back to Items</a>
</div>

<!-- Image Modal -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="imageModalLabel">Item Image</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body text-center">
        <img id="modalImage" src="#" alt="Item Image" class="img-fluid" />
      </div>
    </div>
  </div>
</div>

<!-- Pending Change Orders Modal -->
<div class="modal fade" id="pendingChangeOrdersModal" tabindex="-1" aria-labelledby="pendingChangeOrdersModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header bg-warning text-dark">
        <h5 class="modal-title" id="pendingChangeOrdersModalLabel">
          <i class="fas fa-exclamation-triangle"></i> Cannot Create Change Order
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="alert alert-warning" role="alert">
          <p class="mb-3" id="pendingModalMessage">
            <!-- Message will be populated by JavaScript -->
          </p>
        </div>

        <h6><i class="fas fa-list"></i> Pending Change Orders:</h6>
        <div id="pendingChangeOrdersList">
          <!-- Content will be populated by JavaScript -->
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          <i class="fas fa-times"></i> Close
        </button>
        <button type="button" class="btn btn-primary" onclick="refreshPage()">
          <i class="fas fa-refresh"></i> Refresh Page
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  function showImageModal(partNumber, imageUrl) {
      document.getElementById('imageModalLabel').textContent = 'Item Image - ' + partNumber;
      document.getElementById('modalImage').src = imageUrl;
      var imageModal = new bootstrap.Modal(document.getElementById('imageModal'));
      imageModal.show();
  }

  function filterPurchasesByVersion(version) {
      const rows = document.querySelectorAll('#purchaseTable tbody tr');
      rows.forEach(row => {
          if (version === '' || row.dataset.version === version) {
              row.style.display = '';
          } else {
              row.style.display = 'none';
          }
      });
  }

  // Updated showCreateVersionModal function with better error handling
  function showCreateVersionModal(entityType, entityId) {
      console.log(`Attempting to load modal for ${entityType} ID: ${entityId}`);

      // Add visual feedback to the button
      const button = event?.target;
      if (button) {
          button.disabled = true;
          button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Loading...';
      }

      // Load the change order modal using the new route
      fetch(`/ChangeOrders/CreateModal/${entityType}/${entityId}`, {
          method: 'GET',
          headers: {
              'X-Requested-With': 'XMLHttpRequest',
              'Accept': 'text/html,application/json'
          }
      })
          .then(response => {
              console.log(`Response status: ${response.status}`);
              console.log(`Response content-type: ${response.headers.get('content-type')}`);

              if (!response.ok) {
                  // For server errors, try to get the response text for debugging
                  return response.text().then(text => {
                      console.error('Server error response:', text);
                      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                  });
              }

              // Check if the response is JSON (error response) or HTML (modal content)
              const contentType = response.headers.get('content-type');
              if (contentType && contentType.includes('application/json')) {
                  return response.json().then(data => {
                      if (data.success === false) {
                          throw new Error(JSON.stringify(data));
                      }
                      return data;
                  });
              }

              return response.text();
          })
          .then(result => {
              if (typeof result === 'string') {
                  // HTML response - show modal
                  console.log('Modal HTML loaded successfully');

                  // Remove any existing modal first
                  const existingModal = document.getElementById('changeOrderModal');
                  if (existingModal) {
                      existingModal.remove();
                  }

                  document.body.insertAdjacentHTML('beforeend', result);
                  const modal = new bootstrap.Modal(document.getElementById('changeOrderModal'));
                  modal.show();
              } else {
                  // JSON response
                  console.log('JSON response received:', result);
              }
          })
          .catch(error => {
              console.error('Error loading modal:', error);

              // Try to parse the error as JSON for validation errors
              try {
                  const errorData = JSON.parse(error.message);
                  if (errorData.success === false) {
                      // Show the pending change orders modal instead of alert
                      if (errorData.pendingChangeOrders) {
                          showPendingChangeOrdersModal(errorData);
                      } else {
                          alert(`Error: ${errorData.message || errorData.error || 'Unknown error occurred'}`);
                      }
                      return;
                  }
              } catch (e) {
                  // Not a JSON error, show the actual error message
                  console.error('Failed to parse error as JSON:', e);
              }

              // Show the actual error message for debugging
              alert(`Error loading change order form: ${error.message}\n\nPlease check the browser console for more details.`);
          })
          .finally(() => {
              // Re-enable button
              if (button) {
                  button.disabled = false;
                  button.innerHTML = '<i class="fas fa-code-branch"></i> New Version';
              }
          });
  }

  // Function to show pending change orders modal when there are conflicts
  function showPendingChangeOrdersModal(errorData) {
      console.log('Showing pending change orders modal:', errorData);

      // Update the modal content
      const messageElement = document.getElementById('pendingModalMessage');
      if (messageElement) {
          messageElement.textContent = errorData.message;
      }

      // Build the pending change orders list
      const listContainer = document.getElementById('pendingChangeOrdersList');
      if (listContainer && errorData.pendingChangeOrders && errorData.pendingChangeOrders.length > 0) {
          const listHtml = errorData.pendingChangeOrders.map(co => `
              <div class="card mb-2">
                  <div class="card-body py-2">
                      <div class="d-flex justify-content-between align-items-center">
                          <div>
                              <strong>${co.changeOrderNumber}</strong>
                              <span class="badge bg-warning ms-2">Version ${co.newVersion}</span>
                          </div>
                          <div class="text-end">
                              <small class="text-muted">Created: ${co.createdDate}</small><br>
                              <small class="text-muted">By: ${co.createdBy}</small>
                          </div>
                      </div>
                      <div class="mt-2">
                          <a href="/ChangeOrders/Details/${co.id}" class="btn btn-sm btn-outline-primary">
                              <i class="fas fa-eye"></i> View Details
                          </a>
                      </div>
                  </div>
              </div>
          `).join('');
          listContainer.innerHTML = listHtml;
      } else if (listContainer) {
          listContainer.innerHTML = '<p class="text-muted">No pending change orders found.</p>';
      }

      // Show the modal
      const pendingModal = document.getElementById('pendingChangeOrdersModal');
      if (pendingModal) {
          const modal = new bootstrap.Modal(pendingModal);
          modal.show();
      } else {
          console.error('Pending change orders modal not found in DOM');
          alert(errorData.message);
      }
  }

  // Function to refresh the current page
  function refreshPage() {
      location.reload();
  }

  // Clean up modal when closed to prevent duplicates
  document.addEventListener('hidden.bs.modal', function (event) {
      if (event.target.id === 'changeOrderModal') {
          event.target.remove();
      }
  });

  // Debug helper - check if modal containers exist
  document.addEventListener('DOMContentLoaded', function() {
      console.log('Change order modal script loaded for Items page');
      const pendingModal = document.getElementById('pendingChangeOrdersModal');
      if (!pendingModal) {
          console.warn('pendingChangeOrdersModal not found - make sure it exists in the page');
      }
  });
</script>