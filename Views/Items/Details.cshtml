@model InventorySystem.Models.Item
@using System.IO
@{
  ViewData["Title"] = "Item Details";

  var averageCost = ViewBag.AverageCost as decimal? ?? 0;
  var fifoValue = ViewBag.FifoValue as decimal? ?? 0;
  var purchases = ViewBag.Purchases as IEnumerable<InventorySystem.Models.Purchase> ?? new List<InventorySystem.Models.Purchase>();
  var vendorItems = ViewBag.VendorItems as IEnumerable<InventorySystem.Models.VendorItem> ?? new List<InventorySystem.Models.VendorItem>();
}

<div class="d-flex justify-content-between align-items-center mb-4">
  <div class="d-flex align-items-center">
    <h1 class="me-3"><i class="fas fa-cube"></i> @Model.PartNumber</h1>
    <!-- Version Dropdown -->
    @if (ViewBag.ItemVersions != null)
    {
      @await Html.PartialAsync("_VersionDropdown", ViewBag.ItemVersions, new ViewDataDictionary(ViewData)
      {
      ["CurrentVersion"] = Model.Version,
        ["EntityType"] = "Items",
        ["EntityId"] = Model.BaseItemId ?? Model.Id
        })
        }
  </div>
  <div class="btn-group">
    @if (Model.IsCurrentVersion)
    {
      <a href="/Items/Edit/@Model.Id" class="btn btn-outline-primary">
        <i class="fas fa-edit"></i> Edit
      </a>
    }
    <a href="/Purchases/Create?itemId=@Model.Id" class="btn btn-success">
      <i class="fas fa-shopping-cart"></i> Add Purchase
    </a>
    @if (Model.IsCurrentVersion)
    {
      <a href="/Documents/Upload?itemId=@Model.Id" class="btn btn-outline-info">
        <i class="fas fa-upload"></i> Upload Document
      </a>
    }
    <!-- Create New Version Button -->
    <button type="button" class="btn btn-outline-warning" onclick="showCreateVersionModal('Item', @(Model.BaseItemId ?? Model.Id))">
      <i class="fas fa-code-branch"></i> New Version
    </button>
  </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
  <div class="alert alert-success alert-dismissible fade show">
    @TempData["SuccessMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

@if (TempData["ErrorMessage"] != null)
{
  <div class="alert alert-danger alert-dismissible fade show">
    @TempData["ErrorMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

@if (TempData["WarningMessage"] != null)
{
  <div class="alert alert-warning alert-dismissible fade show">
    @TempData["WarningMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

<div class="row">
  <div class="col-md-8">
    <div class="card">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h5><i class="fas fa-info-circle"></i> Item Information</h5>
        @if (!Model.IsCurrentVersion)
        {
          <span class="badge bg-warning">Historical Version</span>
        }
        else
        {
          <span class="badge bg-success">Current Version</span>
        }
      </div>
      <div class="card-body">
        <dl class="row">
          <dt class="col-sm-3">Part Number:</dt>
          <dd class="col-sm-9">
            <strong>@Model.PartNumber</strong>
            <span class="badge bg-primary ms-2">@Model.Version</span>
          </dd>

          <dt class="col-sm-3">Description:</dt>
          <dd class="col-sm-9">@Model.Description</dd>

          <dt class="col-sm-3">Current Stock:</dt>
          <dd class="col-sm-9">
            <span class="badge bg-@(Model.CurrentStock > Model.MinimumStock ? "success" : "danger") fs-6">
              @Model.CurrentStock
            </span>
            @if (Model.TrackInventory)
            {
              <small class="text-muted ms-2">(Min: @Model.MinimumStock)</small>
            }
          </dd>

          <dt class="col-sm-3">Item Type:</dt>
          <dd class="col-sm-9">
            <span class="badge bg-info">@Model.ItemTypeDisplayName</span>
          </dd>

          @if (Model.IsSellable)
          {
            <dt class="col-sm-3">Sellable:</dt>
            <dd class="col-sm-9">
              <span class="badge bg-success">Yes</span>
            </dd>
          }

          @if (!string.IsNullOrEmpty(Model.VendorPartNumber))
          {
            <dt class="col-sm-3">Vendor Part #:</dt>
            <dd class="col-sm-9">@Model.VendorPartNumber</dd>
          }

          <!-- UPDATED: Enhanced preferred vendor display with TBA support -->
          <dt class="col-sm-3">Preferred Vendor:</dt>
          <dd class="col-sm-9">
            @if (Model.PreferredVendorItem != null && Model.PreferredVendorItem.Vendor != null)
            {
              <div class="d-flex align-items-center">
                <strong class="text-success">@Model.PreferredVendorItem.Vendor.CompanyName</strong>
                <span class="badge bg-success ms-2">
                  <i class="fas fa-link"></i> Linked
                </span>
                @if (Model.PreferredVendorItem.IsPrimary)
                {
                  <span class="badge bg-primary ms-1">
                    <i class="fas fa-star"></i> Primary
                  </span>
                }
                <a href="/Vendors/Details/@Model.PreferredVendorItem.VendorId" class="btn btn-outline-info btn-sm ms-2" target="_blank">
                  <i class="fas fa-external-link-alt"></i> View Vendor
                </a>
              </div>
              @if (Model.PreferredVendorItem.UnitCost > 0)
              {
                <small class="text-muted">Expected Cost: @Model.PreferredVendorItem.UnitCost.ToString("C")</small>
              }
              @if (!string.IsNullOrEmpty(Model.PreferredVendorItem.VendorPartNumber))
              {
                <br><small class="text-muted">Vendor P/N: @Model.PreferredVendorItem.VendorPartNumber</small>
              }
            }
            else
            {
              <div class="d-flex align-items-center">
                <span class="badge bg-warning text-dark fs-6">
                  <i class="fas fa-exclamation-triangle"></i> TBA (To be Allocated)
                </span>
                @if (Model.IsCurrentVersion)
                {
                  <a href="/Items/Edit/@Model.Id" class="btn btn-outline-primary btn-sm ms-2">
                    <i class="fas fa-edit"></i> Assign Vendor
                  </a>
                  <a href="/Vendors/ManageItems?itemId=@Model.Id" class="btn btn-outline-success btn-sm ms-1">
                    <i class="fas fa-handshake"></i> Manage Vendors
                  </a>
                }
              </div>
              <small class="text-muted">No preferred vendor assigned. Consider setting up vendor relationships for better procurement management.</small>
            }
          </dd>

          <dt class="col-sm-3">Created:</dt>
          <dd class="col-sm-9">@Model.CreatedDate.ToString("MM/dd/yyyy")</dd>

          @if (Model.TrackInventory)
          {
            <dt class="col-sm-3">Average Cost:</dt>
            <dd class="col-sm-9">
              <strong class="text-primary">@averageCost.ToString("C")</strong>
            </dd>

            <dt class="col-sm-3">FIFO Value:</dt>
            <dd class="col-sm-9">
              <strong class="text-success">@fifoValue.ToString("C")</strong>
            </dd>
          }

          @if (!string.IsNullOrEmpty(Model.Comments))
          {
            <dt class="col-sm-3">Comments:</dt>
            <dd class="col-sm-9">@Model.Comments</dd>
          }
        </dl>
      </div>
    </div>
    @if (Model.IsTransformed && Model.MaterialType == MaterialType.Transformed)
{
  <div class="card mt-4">
    <div class="card-header">
      <h5><i class="fas fa-industry text-success"></i> Manufacturing Information</h5>
    </div>
    <div class="card-body">
      <div class="row">
        <div class="col-md-6">
          <dl class="row">
            <dt class="col-sm-6">Parent Raw Material:</dt>
            <dd class="col-sm-6">
              @if (Model.ParentRawMaterial != null)
              {
                <a href="/Items/Details/@Model.ParentRawMaterial.Id" class="text-decoration-none">
                  @Model.ParentRawMaterial.PartNumber
                </a>
                <br><small class="text-muted">@Model.ParentRawMaterial.Description</small>
              }
              else
              {
                <span class="text-muted">Not specified</span>
              }
            </dd>
            
            <dt class="col-sm-6">Yield Factor:</dt>
            <dd class="col-sm-6">
              @if (Model.YieldFactor.HasValue)
              {
                <strong>@Model.YieldFactor.Value.ToString("P2")</strong>
                <br><small class="text-muted">@Math.Round(1.0m / (decimal)Model.YieldFactor.Value, 2) units raw material needed per unit</small>
              }
              else
              {
                <span class="text-muted">Not specified</span>
              }
            </dd>
            
            @if (Model.WastePercentage.HasValue)
            {
              <dt class="col-sm-6">Expected Waste:</dt>
              <dd class="col-sm-6">
                <span class="text-warning">@Model.WastePercentage.Value.ToString("F1")%</span>
              </dd>
            }
          </dl>
        </div>
        <div class="col-md-6">
          <div class="alert alert-info">
            <h6><i class="fas fa-info-circle"></i> Manufacturing BOM</h6>
            <p class="mb-1">
              <strong>BOM Number:</strong> @Model.PartNumber-MFG<br>
              <small class="text-muted">Automatically generated manufacturing bill of materials</small>
            </p>
            <a href="/Boms?search=@(Model.PartNumber)-MFG" class="btn btn-sm btn-outline-primary">
              <i class="fas fa-external-link-alt"></i> View Manufacturing BOM
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
  }
    <!-- NEW: Vendor Relationships Section -->
    @if (vendorItems.Any())
    {
      <div class="card mt-4">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h5><i class="fas fa-handshake"></i> Vendor Relationships (@vendorItems.Count())</h5>
          @if (Model.IsCurrentVersion)
          {
            <a href="/Vendors/ManageItems?itemId=@Model.Id" class="btn btn-sm btn-outline-success">
              <i class="fas fa-cog"></i> Manage Vendors
            </a>
          }
        </div>
        <div class="card-body">
          <div class="table-responsive">
            <table class="table table-sm">
              <thead>
                <tr>
                  <th>Vendor</th>
                  <th>Vendor P/N</th>
                  <th>Unit Cost</th>
                  <th>Lead Time</th>
                  <th>Min Order</th>
                  <th>Status</th>
                  <th>Last Purchase</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                @foreach (var vendorItem in vendorItems.OrderBy(vi => vi.IsPrimary ? 0 : 1).ThenBy(vi => vi.Vendor.CompanyName))
                {
                  <tr class="@(vendorItem.IsPrimary ? "table-success" : "")">
                    <td>
                      <div class="d-flex align-items-center">
                        @if (vendorItem.IsPrimary)
                        {
                          <i class="fas fa-star text-warning me-1" title="Primary Vendor"></i>
                        }
                        <div>
                          <strong>@vendorItem.Vendor.CompanyName</strong>
                          @if (Model.PreferredVendorItemId == vendorItem.Id)
                          {
                            <br><small class="text-success"><i class="fas fa-check-circle"></i> Preferred</small>
                          }
                        </div>
                      </div>
                    </td>
                    <td>
                      @if (!string.IsNullOrEmpty(vendorItem.VendorPartNumber))
                      {
                        <code>@vendorItem.VendorPartNumber</code>
                      }
                      else
                      {
                        <span class="text-muted">N/A</span>
                      }
                    </td>
                    <td>
                      @if (vendorItem.UnitCost > 0)
                      {
                        <strong>@vendorItem.UnitCost.ToString("C")</strong>
                        @if (vendorItem.LastPurchaseCost.HasValue && vendorItem.CostVariancePercentage.HasValue)
                        {
                          <br><small class="text-@(vendorItem.CostVariancePercentage > 0 ? "danger" : "success")">
                            @(vendorItem.CostVariancePercentage > 0 ? "+" : "")@vendorItem.CostVariancePercentage.Value.ToString("F1")%
                          </small>
                        }
                      }
                      else
                      {
                        <span class="text-muted">TBD</span>
                      }
                    </td>
                    <td>
                      <span class="badge bg-@(vendorItem.LeadTimeDays <= 7 ? "success" : vendorItem.LeadTimeDays <= 30 ? "warning" : "danger")">
                        @vendorItem.LeadTimeDescription
                      </span>
                    </td>
                    <td>@vendorItem.MinimumOrderQuantity</td>
                    <td>
                      <span class="badge bg-@(vendorItem.IsActive ? "success" : "secondary")">
                        @(vendorItem.IsActive ? "Active" : "Inactive")
                      </span>
                    </td>
                    <td>
                      @if (vendorItem.LastPurchaseDate.HasValue)
                      {
                        <div>
                          <small>@vendorItem.LastPurchaseDate.Value.ToString("MM/dd/yyyy")</small>
                          @if (vendorItem.LastPurchaseCost.HasValue)
                          {
                            <br><small class="text-muted">@vendorItem.LastPurchaseCost.Value.ToString("C")</small>
                          }
                        </div>
                      }
                      else
                      {
                        <span class="text-muted">None</span>
                      }
                    </td>
                    <td>
                      <div class="btn-group btn-group-sm">
                        <a href="/Vendors/Details/@vendorItem.VendorId" class="btn btn-outline-info" title="View Vendor" target="_blank">
                          <i class="fas fa-eye"></i>
                        </a>
                        @if (Model.IsCurrentVersion)
                        {
                          <a href="/Purchases/Create?itemId=@Model.Id&vendorId=@vendorItem.VendorId" class="btn btn-outline-success" title="Create Purchase">
                            <i class="fas fa-shopping-cart"></i>
                          </a>
                        }
                      </div>
                    </td>
                  </tr>
                }
              </tbody>
            </table>
          </div>
          @if (vendorItems.Count(vi => vi.IsPrimary) == 0)
          {
            <div class="alert alert-info mt-3">
              <i class="fas fa-info-circle"></i>
              <strong>Tip:</strong> Consider setting one vendor as "Primary" for better procurement automation.
            </div>
          }
        </div>
      </div>
    }
    else if (Model.IsCurrentVersion)
    {
      <div class="card mt-4">
        <div class="card-header">
          <h6><i class="fas fa-handshake"></i> Vendor Relationships</h6>
        </div>
        <div class="card-body text-center">
          <i class="fas fa-handshake fa-3x text-muted mb-3"></i>
          <h6 class="text-muted">No Vendor Relationships</h6>
          <p class="text-muted">Set up vendor relationships to manage preferred suppliers, pricing, and lead times for better procurement management.</p>
          <div class="d-flex justify-content-center gap-2">
            <a href="/Vendors/ManageItems?itemId=@Model.Id" class="btn btn-outline-success">
              <i class="fas fa-plus"></i> Add Vendor Relationship
            </a>
            <a href="/Vendors/Create" class="btn btn-outline-primary">
              <i class="fas fa-building"></i> Create New Vendor
            </a>
          </div>
        </div>
      </div>
    }

    <!-- Item Image Section -->
    @if (Model.HasImage && Model.ImageData != null)
    {
      <div class="card mt-4">
        <div class="card-header">
          <h5><i class="fas fa-image"></i> Item Image</h5>
        </div>
        <div class="card-body text-center">
          <img src="data:@Model.ImageContentType;base64,@Convert.ToBase64String(Model.ImageData)"
               alt="@Model.PartNumber"
               class="img-thumbnail"
               style="max-height: 300px; cursor: pointer;"
               onclick="showImageModal('@Model.PartNumber', 'data:@Model.ImageContentType;base64,@Convert.ToBase64String(Model.ImageData)')" />
          <br>
          <small class="text-muted">@Model.ImageFileName</small>
        </div>
      </div>
    }

    <!-- Design Documents Section -->
    @if (Model.DesignDocuments?.Any() == true)
    {
      <div class="card mt-4">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h5><i class="fas fa-file-alt"></i> Design Documents (@Model.DesignDocuments.Count)</h5>
          @if (Model.IsCurrentVersion)
          {
            <a href="/Documents/Upload?itemId=@Model.Id" class="btn btn-sm btn-outline-success">
              <i class="fas fa-plus"></i> Add Document
            </a>
          }
        </div>
        <div class="card-body">
          <div class="table-responsive">
            <table class="table table-sm">
              <thead>
                <tr>
                  <th>Document Name</th>
                  <th>Type</th>
                  <th>Size</th>
                  <th>Uploaded</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                @foreach (var doc in Model.DesignDocuments.OrderBy(d => d.DocumentType).ThenBy(d => d.DocumentName))
                {
                  <tr>
                    <td>
                      <div class="d-flex align-items-center">
                        <i class="@doc.FileTypeIcon me-2"></i>
                        <div>
                          <strong>@doc.DocumentName</strong>
                          @if (!string.IsNullOrEmpty(doc.Description))
                          {
                            <br>
                      
                            <small class="text-muted">@doc.Description</small>
                          }
                        </div>
                      </div>
                    </td>
                    <td>
                      <span class="badge bg-secondary">@doc.DocumentType</span>
                    </td>
                    <td>@doc.FileSizeFormatted</td>
                    <td>
                      <small>@doc.UploadedDate.ToString("MM/dd/yyyy")</small>
                    </td>
                    <td>
                      <div class="btn-group btn-group-sm">
                        @{
                          var canPreview = new[] { ".pdf", ".png", ".jpg", ".jpeg", ".gif", ".bmp", ".tiff" }
                          .Contains(System.IO.Path.GetExtension(doc.FileName).ToLowerInvariant());
                        }

                        @if (canPreview)
                        {
                          <button class="btn btn-outline-info" onclick="previewDocument(@doc.Id, '@doc.DocumentName')" title="Preview">
                            <i class="fas fa-eye"></i>
                          </button>
                        }

                        <a href="/Documents/Download/@doc.Id" class="btn btn-outline-primary" title="Download">
                          <i class="fas fa-download"></i>
                        </a>
                      </div>
                    </td>
                  </tr>
                }
              </tbody>
            </table>
          </div>
        </div>
      </div>
    }
    else
    {
      <div class="card mt-4">
        <div class="card-header">
          <h6><i class="fas fa-file-alt"></i> Design Documents</h6>
        </div>
        <div class="card-body text-center">
          <i class="fas fa-file-alt fa-3x text-muted mb-3"></i>
          <h6 class="text-muted">No Documents Uploaded</h6>
          <p class="text-muted">
            @if (Model.IsCurrentVersion)
            {
              <span>Upload drawings, specifications, datasheets, and other design documents related to this item.</span>
            }
            else
            {
              <span>No documents were uploaded for Version @Model.Version</span>
            }
          </p>
          @if (Model.IsCurrentVersion)
          {
            <a href="/Documents/Upload?itemId=@Model.Id" class="btn btn-outline-success">
              <i class="fas fa-upload"></i> Upload First Document
            </a>
          }
        </div>
      </div>
    }

    <!-- Purchase History with Version Filtering -->
    <div class="card mt-4">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h5>Purchase History</h5>
        @if (ViewBag.PurchasesByVersion != null)
        {
          <div class="dropdown">
            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
              <i class="fas fa-filter"></i> Filter by Version
            </button>
            <ul class="dropdown-menu">
              <li><a class="dropdown-item" href="#" onclick="filterPurchasesByVersion('')">All Versions</a></li>
              @foreach (var versionGroup in (Dictionary<string, IEnumerable<InventorySystem.Models.Purchase>>)ViewBag.PurchasesByVersion)
              {
                <li>
                  <a class="dropdown-item" href="#" onclick="filterPurchasesByVersion('@versionGroup.Key')">
                    Version @versionGroup.Key (@versionGroup.Value.Count())
                  </a>
                </li>
              }
            </ul>
          </div>
        }
      </div>
      <div class="card-body">
        @if (purchases.Any())
        {
          <div class="table-responsive">
            <table class="table table-sm" id="purchaseTable">
              <thead>
                <tr>
                  <th>Date</th>
                  <th>Vendor</th>
                  <th>Version</th>
                  <th>Quantity</th>
                  <th>Cost/Unit</th>
                  <th>Total Cost</th>
                  <th>Remaining</th>
                  <th>PO#</th>
                </tr>
              </thead>
              <tbody>
                @foreach (var purchase in purchases)
                {
                  <tr data-version="@(purchase.ItemVersion ?? "N/A")">
                    <td>@purchase.PurchaseDate.ToString("MM/dd/yyyy")</td>
                    <td>
                      @if (purchase.Vendor != null)
                      {
                        <a href="/Vendors/Details/@purchase.VendorId" target="_blank">@purchase.Vendor.CompanyName</a>
                      }
                      else
                      {
                        <span class="text-muted">Unknown Vendor</span>
                      }
                    </td>
                    <td>
                      <span class="badge bg-@(purchase.ItemVersion == Model.Version ? "primary" : "secondary")">
                        @(purchase.ItemVersion ?? "N/A")
                      </span>
                    </td>
                    <td>@purchase.QuantityPurchased</td>
                    <td>@purchase.CostPerUnit.ToString("C")</td>
                    <td>@purchase.TotalCost.ToString("C")</td>
                    <td>@purchase.RemainingQuantity</td>
                    <td>@purchase.PurchaseOrderNumber</td>
                  </tr>
                }
              </tbody>
            </table>
          </div>
        }
        else
        {
          <div class="text-center py-4">
            <i class="fas fa-shopping-cart fa-3x text-muted mb-3"></i>
            <h6 class="text-muted">No Purchase History</h6>
            <p class="text-muted">No purchases have been recorded for this item.</p>
            <a href="/Purchases/Create?itemId=@Model.Id" class="btn btn-outline-success">
              <i class="fas fa-plus"></i> Add First Purchase
            </a>
          </div>
        }
      </div>
    </div>

    <!-- Item Versions Section -->
    @if (ViewBag.ItemVersions != null)
    {
      var itemVersions = ViewBag.ItemVersions as IEnumerable<InventorySystem.Models.Item>;
      if (itemVersions != null && itemVersions.Count() > 1)
      {
        <div class="card mt-4">
          <div class="card-header">
            <h5><i class="fas fa-code-branch"></i> Version History (@itemVersions.Count())</h5>
          </div>
          <div class="card-body">
            <div class="row">
              @foreach (var version in itemVersions)
              {
                <div class="col-md-6 mb-3">
                  <div class="card @(version.IsCurrentVersion ? "border-success" : version.Version == Model.Version ? "border-primary" : "")">
                    <div class="card-body py-2 @(version.Version == Model.Version ? "bg-light" : version.IsCurrentVersion ? "bg-light" : "")">
                      <div class="d-flex justify-content-between align-items-center @(version.Version == Model.Version ? "active" : "")">
                        <div>
                          <strong>@version.Version</strong>
                          @if (version.IsCurrentVersion)
                          {
                            <span class="badge bg-success ms-2">Current</span>
                          }
                          <br>
                          <small class="text-muted">@version.CreatedDate.ToString("MM/dd/yyyy")</small>
                        </div>
                        @if (version.Version != Model.Version)
                        {
                          <a href="/Items/Details/@version.Id" class="btn btn-sm btn-outline-primary">View</a>
                        }
                      </div>
                    </div>
                  </div>
                </div>
              }
            </div>
          </div>
        </div>
      }
    }
  </div>

  <div class="col-md-4">
    <div class="card">
      <div class="card-header">
        <h6><i class="fas fa-chart-bar"></i> Item Summary</h6>
      </div>
      <div class="card-body">
        <dl class="row small">
          <dt class="col-sm-6">Version:</dt>
          <dd class="col-sm-6">@Model.Version</dd>

          <dt class="col-sm-6">Type:</dt>
          <dd class="col-sm-6">@Model.ItemTypeDisplayName</dd>

          <dt class="col-sm-6">Stock:</dt>
          <dd class="col-sm-6">@Model.CurrentStock</dd>

          <dt class="col-sm-6">Value:</dt>
          <dd class="col-sm-6">@fifoValue.ToString("C")</dd>

          <dt class="col-sm-6">Documents:</dt>
          <dd class="col-sm-6">@(Model.DesignDocuments?.Count ?? 0)</dd>

          <dt class="col-sm-6">Purchases:</dt>
          <dd class="col-sm-6">@purchases.Count()</dd>

          <!-- NEW: Vendor summary -->
          <dt class="col-sm-6">Vendors:</dt>
          <dd class="col-sm-6">@vendorItems.Count()</dd>

          <dt class="col-sm-6">Preferred:</dt>
          <dd class="col-sm-6">
            @if (Model.PreferredVendorItem != null)
            {
              <span class="badge bg-success">Set</span>
            }
            else
            {
              <span class="badge bg-warning text-dark">TBA</span>
            }
          </dd>
        </dl>
      </div>
    </div>

    @if (!Model.IsCurrentVersion)
    {
      <div class="card mt-3">
        <div class="card-header bg-warning text-dark">
          <h6><i class="fas fa-exclamation-triangle"></i> Historical Version</h6>
        </div>
        <div class="card-body">
          <p class="mb-2">This is version <strong>@Model.Version</strong> of the item.</p>
          <p class="mb-3">To make changes, work with the current version.</p>
          @if (ViewBag.ItemVersions != null)
          {
            var currentVersion = ((IEnumerable<InventorySystem.Models.Item>)ViewBag.ItemVersions).FirstOrDefault(v => v.IsCurrentVersion);
            if (currentVersion != null)
            {
              <a href="/Items/Details/@currentVersion.Id" class="btn btn-outline-primary btn-sm">
                <i class="fas fa-arrow-right"></i> Go to Current Version (@currentVersion.Version)
              </a>
            }
          }
        </div>
      </div>
    }

    <!-- NEW: Vendor Assignment Status Card -->
    @if (Model.IsCurrentVersion && !vendorItems.Any())
    {
      <div class="card mt-3 border-warning">
        <div class="card-header bg-warning text-dark">
          <h6><i class="fas fa-exclamation-triangle"></i> Vendor Assignment Needed</h6>
        </div>
        <div class="card-body">
          <p class="mb-2">This item has no vendor relationships configured.</p>
          <p class="mb-3 small text-muted">Setting up vendor relationships improves procurement efficiency and cost management.</p>
          <div class="d-grid gap-2">
            <a href="/Vendors/ManageItems?itemId=@Model.Id" class="btn btn-warning btn-sm">
              <i class="fas fa-handshake"></i> Set Up Vendors
            </a>
          </div>
        </div>
      </div>
    }

    @if (ViewBag.PendingChangeOrders != null)
    {
      var pendingChangeOrders = ViewBag.PendingChangeOrders as List<InventorySystem.Models.ChangeOrder>;
      if (pendingChangeOrders != null && pendingChangeOrders.Any())
      {
        <div class="card mt-3">
          <div class="card-header bg-warning text-dark">
            <h6><i class="fas fa-clock"></i> Pending Change Orders</h6>
          </div>
          <div class="card-body">
            @foreach (var changeOrder in pendingChangeOrders)
            {
              <div class="mb-2">
                <strong>@changeOrder.ChangeOrderNumber</strong>
                <span class="badge bg-warning ms-2">@changeOrder.NewVersion</span>
                <br>
                <small class="text-muted">@changeOrder.CreatedDate.ToString("MM/dd/yyyy")</small>
                <div class="mt-1">
                  <a href="/ChangeOrders/Details/@changeOrder.Id" class="btn btn-sm btn-outline-primary">
                    <i class="fas fa-eye"></i> View
                  </a>
                </div>
              </div>
            }
          </div>
        </div>
      }
    }
  </div>
</div>

<div class="mt-3">
  <a href="/Items" class="btn btn-secondary">Back to Items</a>
</div>

<!-- Image Modal -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="imageModalLabel">Item Image</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body text-center">
        <img id="modalImage" src="#" alt="Item Image" class="img-fluid" />
      </div>
    </div>
  </div>
</div>

<!-- Document Preview Modal -->
<div class="modal fade" id="documentPreviewModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-xl">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="previewModalTitle">Document Preview</h5>
        <div class="btn-group btn-group-sm">
          <button type="button" class="btn btn-outline-secondary" onclick="zoomOut()">
            <i class="fas fa-search-minus"></i>
          </button>
          <button type="button" class="btn btn-outline-secondary" onclick="resetZoom()">
            <i class="fas fa-compress-arrows-alt"></i>
          </button>
          <button type="button" class="btn btn-outline-secondary" onclick="zoomIn()">
            <i class="fas fa-search-plus"></i>
          </button>
        </div>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body p-0">
        <div id="previewLoading" class="text-center p-4">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
          <p class="mt-2">Loading document...</p>
        </div>
        <iframe id="previewIframe" style="width: 100%; height: 70vh; border: none; display: none;"></iframe>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <a id="downloadLink" href="#" class="btn btn-primary">
          <i class="fas fa-download"></i> Download
        </a>
      </div>
    </div>
  </div>
</div>

<!-- Pending Change Orders Modal -->
<div class="modal fade" id="pendingChangeOrdersModal" tabindex="-1" aria-labelledby="pendingChangeOrdersModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header bg-warning text-dark">
        <h5 class="modal-title" id="pendingChangeOrdersModalLabel">
          <i class="fas fa-exclamation-triangle"></i> Cannot Create Change Order
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="alert alert-warning" role="alert">
          <p class="mb-3" id="pendingModalMessage">
            <!-- Message will be populated by JavaScript -->
          </p>
        </div>

        <h6><i class="fas fa-list"></i> Pending Change Orders:</h6>
        <div id="pendingChangeOrdersList">
          <!-- Content will be populated by JavaScript -->
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          <i class="fas fa-times"></i> Close
        </button>
        <button type="button" class="btn btn-primary" onclick="refreshPage()">
          <i class="fas fa-refresh"></i> Refresh Page
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  let currentZoom = 1;
  let currentDocumentId = null;

  function previewDocument(documentId, documentName) {
      currentDocumentId = documentId;
      const modal = new bootstrap.Modal(document.getElementById('documentPreviewModal'));
      const iframe = document.getElementById('previewIframe');
      const modalTitle = document.getElementById('previewModalTitle');
      const downloadLink = document.getElementById('downloadLink');
      const loading = document.getElementById('previewLoading');

      modalTitle.textContent = `Preview: ${documentName}`;
      downloadLink.href = `/Documents/Download/${documentId}`;

      // Show loading, hide iframe
      loading.style.display = 'block';
      iframe.style.display = 'none';

      // Set iframe source to view the document
      iframe.src = `/Documents/View/${documentId}`;

      // Show modal
      modal.show();

      // Handle iframe load
      iframe.onload = function() {
          loading.style.display = 'none';
          iframe.style.display = 'block';
      };

      // Handle iframe error
      iframe.onerror = function() {
          loading.innerHTML = `
              <div class="text-center p-4">
                  <i class="fas fa-exclamation-triangle fa-3x text-warning mb-3"></i>
                  <h5>Preview Not Available</h5>
                  <p class="text-muted">This document cannot be previewed in your browser.</p>
                  <a href="/Documents/Download/${documentId}" class="btn btn-primary">
                      <i class="fas fa-download"></i> Download Document
                  </a>
              </div>
          `;
      };
  }

  function zoomIn() {
      currentZoom += 0.25;
      applyZoom();
  }

  function zoomOut() {
      if (currentZoom > 0.5) {
          currentZoom -= 0.25;
          applyZoom();
      }
  }

  function resetZoom() {
      currentZoom = 1;
      applyZoom();
  }

  function applyZoom() {
      const iframe = document.getElementById('previewIframe');
      iframe.style.transform = `scale(${currentZoom})`;
      iframe.style.transformOrigin = 'top left';
  }

  // Reset zoom when modal is closed
  document.getElementById('documentPreviewModal').addEventListener('hidden.bs.modal', function () {
      currentZoom = 1;
      applyZoom();
      document.getElementById('previewIframe').src = '';
  });

  function showImageModal(partNumber, imageUrl) {
      document.getElementById('imageModalLabel').textContent = 'Item Image - ' + partNumber;
      document.getElementById('modalImage').src = imageUrl;
      var imageModal = new bootstrap.Modal(document.getElementById('imageModal'));
      imageModal.show();
  }

  function filterPurchasesByVersion(version) {
      const rows = document.querySelectorAll('#purchaseTable tbody tr');
      rows.forEach(row => {
          if (version === '' || row.dataset.version === version) {
              row.style.display = '';
          } else {
              row.style.display = 'none';
          }
      });
  }

  // Updated showCreateVersionModal function with better error handling
  function showCreateVersionModal(entityType, entityId) {
      console.log(`Attempting to load modal for ${entityType} ID: ${entityId}`);

      // Add visual feedback to the button
      const button = event?.target;
      if (button) {
          button.disabled = true;
          button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Loading...';
      }

      // Load the change order modal using the new route
      fetch(`/ChangeOrders/CreateModal/${entityType}/${entityId}`, {
          method: 'GET',
          headers: {
              'X-Requested-With': 'XMLHttpRequest',
              'Accept': 'text/html,application/json'
          }
      })
          .then(response => {
              console.log(`Response status: ${response.status}`);
              console.log(`Response content-type: ${response.headers.get('content-type')}`);

              if (!response.ok) {
                  // For server errors, try to get the response text for debugging
                  return response.text().then(text => {
                      console.error('Server error response:', text);
                      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                  });
              }

              // Check if the response is JSON (error response) or HTML (modal content)
              const contentType = response.headers.get('content-type');
              if (contentType && contentType.includes('application/json')) {
                  return response.json().then(data => {
                      if (data.success === false) {
                          throw new Error(JSON.stringify(data));
                      }
                      return data;
                  });
              }

              return response.text();
          })
          .then(result => {
              if (typeof result === 'string') {
                  // HTML response - show modal
                  console.log('Modal HTML loaded successfully');

                  // Remove any existing modal first
                  const existingModal = document.getElementById('changeOrderModal');
                  if (existingModal) {
                      existingModal.remove();
                  }

                  document.body.insertAdjacentHTML('beforeend', result);
                  const modal = new bootstrap.Modal(document.getElementById('changeOrderModal'));
                  modal.show();
              } else {
                  // JSON response
                  console.log('JSON response received:', result);
              }
          })
          .catch(error => {
              console.error('Error loading modal:', error);

              // Try to parse the error as JSON for validation errors
              try {
                  const errorData = JSON.parse(error.message);
                  if (errorData.success === false) {
                      // Show the pending change orders modal instead of alert
                      if (errorData.pendingChangeOrders) {
                          showPendingChangeOrdersModal(errorData);
                      } else {
                          alert(`Error: ${errorData.message || errorData.error || 'Unknown error occurred'}`);
                      }
                      return;
                  }
              } catch (e) {
                  // Not a JSON error, show the actual error message
                  console.error('Failed to parse error as JSON:', e);
              }

              // Show the actual error message for debugging
              alert(`Error loading change order form: ${error.message}\n\nPlease check the browser console for more details.`);
          })
          .finally(() => {
              // Re-enable button
              if (button) {
                  button.disabled = false;
                  button.innerHTML = '<i class="fas fa-code-branch"></i> New Version';
              }
          });
  }

  // Function to show pending change orders modal when there are conflicts
  function showPendingChangeOrdersModal(errorData) {
      console.log('Showing pending change orders modal:', errorData);

      // Update the modal content
      const messageElement = document.getElementById('pendingModalMessage');
      if (messageElement) {
          messageElement.textContent = errorData.message;
      }

      // Build the pending change orders list
      const listContainer = document.getElementById('pendingChangeOrdersList');
      if (listContainer && errorData.pendingChangeOrders && errorData.pendingChangeOrders.length > 0) {
          const listHtml = errorData.pendingChangeOrders.map(co => `
              <div class="card mb-2">
                  <div class="card-body py-2">
                      <div class="d-flex justify-content-between align-items-center">
                          <div>
                              <strong>${co.changeOrderNumber}</strong>
                              <span class="badge bg-warning ms-2">Version ${co.newVersion}</span>
                          </div>
                          <div class="text-end">
                              <small class="text-muted">Created: ${co.createdDate}</small><br>
                              <small class="text-muted">By: ${co.createdBy}</small>
                          </div>
                      </div>
                      <div class="mt-2">
                          <a href="/ChangeOrders/Details/${co.id}" class="btn btn-sm btn-outline-primary">
                              <i class="fas fa-eye"></i> View Details
                          </a>
                      </div>
                  </div>
              </div>
          `).join('');
          listContainer.innerHTML = listHtml;
      } else if (listContainer) {
          listContainer.innerHTML = '<p class="text-muted">No pending change orders found.</p>';
      }

      // Show the modal
      const pendingModal = document.getElementById('pendingChangeOrdersModal');
      if (pendingModal) {
          const modal = new bootstrap.Modal(pendingModal);
          modal.show();
      } else {
          console.error('Pending change orders modal not found in DOM');
          alert(errorData.message);
      }
  }

  // Enhanced loading indicators for Item Details page
  document.addEventListener('DOMContentLoaded', function() {
      console.log('Item Details page loading enhancement loaded');

      // Add loading to all navigation buttons with null checks
      const elementsWithEvents = document.querySelectorAll('a[href], button[onclick]');
      if (elementsWithEvents && elementsWithEvents.length > 0) {
          elementsWithEvents.forEach(element => {
              if (element && element.addEventListener) {
                  element.addEventListener('click', function(e) {
                      if (window.LoadingIndicator && window.LoadingIndicator.isInitialized) {
                          const href = this.getAttribute('href');
                          const onclick = this.getAttribute('onclick');
                          
                          if (href && !href.startsWith('#') && !href.startsWith('javascript:')) {
                              if (href.includes('/Edit/')) {
                                  window.LoadingIndicator.show('Loading Item Editor...', 'Preparing item for editing');
                              } else if (href.includes('/Purchases/Create')) {
                                  window.LoadingIndicator.show('Creating Purchase Order...', 'Setting up new purchase for this item');
                              } else if (href.includes('/Documents/Upload')) {
                                  window.LoadingIndicator.show('Loading Document Uploader...', 'Preparing document upload interface');
                              } else if (href.includes('/Documents/Download')) {
                                  window.LoadingIndicator.show('Downloading Document...', 'Preparing document for download');
                              } else if (href.includes('/Vendors/Details')) {
                                  window.LoadingIndicator.showForOperation('loading-vendors');
                              } else if (href.includes('/Vendors/ManageItems')) {
                                  window.LoadingIndicator.show('Loading Vendor Manager...', 'Preparing vendor relationship management');
                              } else if (href.includes('/Items/Details')) {
                                  window.LoadingIndicator.showForOperation('loading-items');
                              } else if (href.includes('/Items') && !href.includes('/Details')) {
                                  window.LoadingIndicator.show('Loading Items List...', 'Returning to items index');
                              } else if (href.includes('/ChangeOrders/Details')) {
                                  window.LoadingIndicator.show('Loading Change Order...', 'Fetching change order details');
                              }
                          } else if (onclick && onclick.includes('showCreateVersionModal')) {
                              // Loading handled by the function itself
                          } else if (onclick && onclick.includes('previewDocument')) {
                              window.LoadingIndicator.show('Loading Document Preview...', 'Preparing document for preview');
                              // Hide after a short delay as the modal will take over
                              setTimeout(() => {
                                  if (window.LoadingIndicator) {
                                      window.LoadingIndicator.hide();
                                  }
                              }, 1000);
                          }
                      }
                  });
              }
          });
      }

      // Add loading to version filter buttons with null checks
      const versionFilterLinks = document.querySelectorAll('a[onclick*="filterPurchasesByVersion"]');
      if (versionFilterLinks && versionFilterLinks.length > 0) {
          versionFilterLinks.forEach(link => {
              if (link && link.addEventListener) {
                  link.addEventListener('click', function(e) {
                      e.preventDefault(); // Prevent default link behavior
                      if (window.LoadingIndicator && window.LoadingIndicator.isInitialized) {
                          try {
                              const version = this.onclick.toString().match(/filterPurchasesByVersion\('(.*)'\)/)[1];
                              const versionText = version === '' ? 'All Versions' : `Version ${version}`;
                              window.LoadingIndicator.show('Filtering Purchases...', `Showing purchases for ${versionText}`);
                              
                              // Hide after filtering is complete
                              setTimeout(() => {
                                  if (window.LoadingIndicator) {
                                      window.LoadingIndicator.hide();
                                  }
                              }, 500);
                          } catch (error) {
                              console.warn('Error parsing version filter:', error);
                          }
                      }
                      
                      // Execute the original function safely
                      try {
                          eval(this.getAttribute('onclick'));
                      } catch (error) {
                          console.warn('Error executing onclick function:', error);
                      }
                  });
              }
          });
      }

      // Add loading to external links (vendor details, etc.) with null checks
      const externalLinks = document.querySelectorAll('a[target="_blank"]');
      if (externalLinks && externalLinks.length > 0) {
          externalLinks.forEach(link => {
              if (link && link.addEventListener) {
                  link.addEventListener('click', function(e) {
                      if (window.LoadingIndicator && window.LoadingIndicator.isInitialized) {
                          window.LoadingIndicator.show('Opening External Link...', 'Loading in new tab');
                          // Hide quickly since it opens in new tab
                          setTimeout(() => {
                              if (window.LoadingIndicator) {
                                  window.LoadingIndicator.hide();
                              }
                          }, 1000);
                      }
                  });
              }
          });
      }

      // Hide loading indicator when page is fully loaded
      window.addEventListener('load', function() {
          if (window.LoadingIndicator) {
              window.LoadingIndicator.hide();
          }
      });

      // Handle image modal with loading - only if function exists
      if (typeof window.showImageModal === 'function') {
          const originalShowImageModal = window.showImageModal;
          window.showImageModal = function(partNumber, imageUrl) {
              if (window.LoadingIndicator && window.LoadingIndicator.isInitialized) {
                  window.LoadingIndicator.show('Loading Image...', 'Preparing image for display');
                  setTimeout(() => {
                      if (window.LoadingIndicator) {
                          window.LoadingIndicator.hide();
                      }
                  }, 500);
              }
              originalShowImageModal(partNumber, imageUrl);
          };
      }

      // Check for pendingChangeOrdersModal safely
      const pendingModal = document.getElementById('pendingChangeOrdersModal');
      if (pendingModal) {
          console.log('pendingChangeOrdersModal found and ready');
      } else {
          console.warn('pendingChangeOrdersModal not found - this is normal if there are no pending change orders');
      }
  });


  // Clean up modal when closed to prevent duplicates
  document.addEventListener('hidden.bs.modal', function (event) {
      if (event.target.id === 'changeOrderModal') {
          event.target.remove();
      }
  });
</script>

@section Scripts {
  <style>
    .btn-group-sm .btn {
      padding: 0.25rem 0.5rem;
      font-size: 0.875rem;
    }

    .table th {
      border-top: none;
      font-weight: 600;
      font-size: 0.875rem;
    }

    .badge {
      font-size: 0.75rem;
    }

    /* NEW: Enhanced styles for vendor relationships */
    .table-success {
      --bs-table-bg: rgba(25, 135, 84, 0.1);
    }

    .vendor-card {
      transition: all 0.2s ease-in-out;
    }

    .vendor-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .cost-variance-positive {
      color: #dc3545;
    }

    .cost-variance-negative {
      color: #198754;
    }
  </style>
}