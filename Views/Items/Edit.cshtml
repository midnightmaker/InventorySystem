@model InventorySystem.Models.Item
@using InventorySystem.Helpers
@using InventorySystem.Models.Enums
@{
  ViewData["Title"] = "Edit Item";
}

<div class="d-flex justify-content-between align-items-center mb-4">
  <h1><i class="fas fa-edit"></i> Edit Item</h1>
  <div class="btn-group">
    <a href="/Items/Details/@Model.Id" class="btn btn-outline-secondary">
      <i class="fas fa-arrow-left"></i> Back to Details
    </a>
    <a href="/Items" class="btn btn-outline-info">
      <i class="fas fa-list"></i> All Items
    </a>
  </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
  <div class="alert alert-success alert-dismissible fade show">
    @TempData["SuccessMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

@if (TempData["ErrorMessage"] != null)
{
  <div class="alert alert-danger alert-dismissible fade show">
    @TempData["ErrorMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

<div class="row">
  <div class="col-md-8">
    <form asp-action="Edit" enctype="multipart/form-data" id="editItemForm">
      @Html.HiddenFor(model => model.Id)
      @Html.HiddenFor(model => model.CreatedDate)
      @Html.HiddenFor(model => model.CurrentStock)
      @Html.HiddenFor(model => model.ImageData)
      @Html.HiddenFor(model => model.ImageContentType)
      @Html.HiddenFor(model => model.ImageFileName)
      @Html.HiddenFor(model => model.IsCurrentVersion)
      @Html.HiddenFor(model => model.BaseItemId)
      @Html.HiddenFor(model => model.Version)
      @Html.HiddenFor(model => model.CreatedFromChangeOrderId)

      <!-- Basic Information Card -->
      <div class="card">
        <div class="card-header">
          <h5><i class="fas fa-info-circle"></i> Basic Information</h5>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label asp-for="PartNumber" class="form-label">
                  <i class="fas fa-tag text-primary"></i>
                  Part Number <span class="text-danger">*</span>
                </label>
                <input asp-for="PartNumber" class="form-control" />
                <span asp-validation-for="PartNumber" class="text-danger"></span>
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label asp-for="Version" class="form-label">
                  <i class="fas fa-code-branch text-info"></i>
                  Version
                </label>
                <input asp-for="Version" class="form-control" readonly />
                <div class="form-text">Version cannot be changed. Create a new version using Change Orders.</div>
              </div>
            </div>
          </div>

          <div class="mb-3">
            <label asp-for="Description" class="form-label">
              <i class="fas fa-file-text text-success"></i>
              Description <span class="text-danger">*</span>
            </label>
            <input asp-for="Description" class="form-control" />
            <span asp-validation-for="Description" class="text-danger"></span>
          </div>

          <div class="mb-3">
            <label asp-for="Comments" class="form-label">
              <i class="fas fa-comment text-muted"></i>
              Comments
            </label>
            <textarea asp-for="Comments" class="form-control" rows="3" placeholder="Component specifications for optical, mechanical, or electronic parts"></textarea>
            <span asp-validation-for="Comments" class="text-danger"></span>
          </div>
        </div>
      </div>

      <!-- Item Properties Card -->
      <div class="card mt-3">
        <div class="card-header">
          <h5><i class="fas fa-cog"></i> Item Properties</h5>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label asp-for="ItemType" class="form-label">
                  <i class="fas fa-tags text-warning"></i>
                  Item Type <span class="text-danger">*</span>
                </label>
                <select asp-for="ItemType" class="form-select" id="itemTypeSelect">
                  <option value="0">Inventoried - Raw materials, components with precise quantity tracking</option>
                  <option value="4">Consumable - Office supplies, hand tools, PPE, small parts</option>
                  <option value="8">R&D Materials - Research and development specific materials</option>
                </select>
                <span asp-validation-for="ItemType" class="text-danger"></span>
                <div class="form-text">Determines how this item is tracked and managed in operations.</div>
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label asp-for="UnitOfMeasure" class="form-label">
                  <i class="fas fa-ruler-combined text-info"></i>
                  Unit of Measure <span class="text-danger">*</span>
                </label>
                <select asp-for="UnitOfMeasure"
                        class="form-select"
                        asp-items="@UnitOfMeasureHelper.GetGroupedUnitOfMeasureSelectList(Model.UnitOfMeasure)">
                </select>
                <span asp-validation-for="UnitOfMeasure" class="text-danger"></span>
                <div class="form-text">
                  <i class="fas fa-info-circle"></i>
                  Current: <strong>@Model.UnitOfMeasureDisplayName</strong> (@Model.UnitOfMeasureCategory)
                </div>
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <div class="form-check mt-2">
                  <input asp-for="IsSellable" class="form-check-input" type="checkbox" id="isSellableSwitch" />
                  <label asp-for="IsSellable" class="form-check-label">
                    <i class="fas fa-dollar-sign text-success"></i>
                    This item can be sold to customers
                  </label>
                  <div class="form-text">Uncheck for raw materials, components, or internal-use items.</div>
                </div>
              </div>
            </div>
          </div>
          <!-- NEW: Revenue Account Selection -->
          <div id="revenueAccountSection" style="@(Model.IsSellable ? "" : "display: none;")">
            @await Component.InvokeAsync("RevenueAccountDropdown", new {
                entity = Model,
                propertyName = "PreferredRevenueAccountCode",
                isRequired = false
            })
          </div>
          <!-- Stock Management (only for Inventoried items) -->
          <div class="row" id="stockManagement">
            <div class="col-md-6">
              <div class="mb-3">
                <label asp-for="MinimumStock" class="form-label">
                  <i class="fas fa-exclamation-triangle text-warning"></i>
                  Minimum Stock
                </label>
                <input asp-for="MinimumStock" class="form-control" type="number" min="0" />
                <span asp-validation-for="MinimumStock" class="text-danger"></span>
                <div class="form-text">Alert threshold for low stock warnings.</div>
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label class="form-label">
                  <i class="fas fa-cubes text-info"></i>
                  Current Stock
                </label>
                <div class="input-group">
                  <input type="text" class="form-control" value="@Model.CurrentStock @Model.UnitOfMeasureDisplayName" readonly />
                  <span class="input-group-text">
                    @if (Model.CurrentStock <= Model.MinimumStock)
                    {
                      <span class="badge bg-danger">Low Stock</span>
                    }
                    else
                    {
                      <span class="badge bg-success">In Stock</span>
                    }
                  </span>
                </div>
                <div class="form-text">Current stock is updated through purchases and inventory adjustments.</div>
              </div>
            </div>
          </div>

          <!-- Pricing Information -->
          <div class="row" id="pricingSection">
            <div class="col-md-6">
              <div class="mb-3">
                <label asp-for="SalePrice" class="form-label">
                  <i class="fas fa-tag text-success"></i>
                  Sale Price <span class="text-muted">(Optional)</span>
                </label>
                <div class="input-group">
                  <span class="input-group-text">$</span>
                  <input asp-for="SalePrice" class="form-control" type="number" step="0.01" min="0" placeholder="0.00" />
                </div>
                <span asp-validation-for="SalePrice" class="text-danger"></span>
                <div class="form-text">
                  <i class="fas fa-info-circle"></i>
                  Default price for selling this item. Used as the suggested price in sales forms.
                </div>
              </div>
            </div>
            <div class="col-md-6" id="pricingInfo">
              <div class="mb-3">
                <label class="form-label">
                  <i class="fas fa-calculator text-info"></i>
                  Pricing Information
                </label>
                <div class="alert alert-light border p-2" id="pricingGuidance">
                  <small>
                    @if (Model.HasSalePrice)
                    {
                      <span class="text-success">
                        <i class="fas fa-check-circle"></i>
                        <strong>Sale Price Set:</strong> @Model.SalePrice.ToString("F2")
                      </span>
                    }
                    else
                    {
                      <span class="text-muted">
                        <i class="fas fa-info-circle"></i>
                        <strong>No Sale Price:</strong> System will suggest pricing based on cost and item type
                      </span>
                    }
                    <br>
                    <strong>Suggested Price:</strong> @Model.SuggestedSalePrice.ToString("C")
                  </small>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Vendor Information Card -->
      <div class="card mt-3">
        <div class="card-header">
          <h5><i class="fas fa-truck"></i> Vendor Information</h5>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-md-8">
              <div class="mb-3">
                <label for="preferredVendorId" class="form-label">
                  <i class="fas fa-star text-warning"></i>
                  Primary Vendor
                </label>
                <div class="input-group">
                  <select name="preferredVendorId" id="preferredVendorId" class="form-select" asp-items="ViewBag.PreferredVendorId">
                    <!-- Options populated from ViewBag -->
                  </select>
                  <button type="button" class="btn btn-outline-info" id="addNewVendorBtn" title="Add New Vendor">
                    <i class="fas fa-plus"></i>
                  </button>
                </div>
                <div class="form-text">
                  <i class="fas fa-info-circle"></i>
                  Select the primary supplier for this item. This vendor will be automatically selected in bulk purchase requests.
                </div>

                <!-- Current Primary Vendor Display -->
                @if (!string.IsNullOrEmpty(Model.PrimaryVendor))
                {
                  <div class="mt-2">
                    <small class="text-muted">
                      <strong>Current:</strong> @Model.PrimaryVendor
                      @if (ViewBag.CurrentPreferredVendorId == null)
                      {
                        <span class="badge bg-warning text-dark">Vendor not found in active vendors</span>
                      }
                    </small>
                  </div>
                }
              </div>
            </div>
            <div class="col-md-4">
              <!-- Vendor Quick Actions -->
              <div class="vendor-actions">
                <h6 class="text-muted">Quick Actions</h6>
                <div class="d-grid gap-2">
                  <button type="button" class="btn btn-outline-primary btn-sm" id="viewVendorDetailsBtn" disabled>
                    <i class="fas fa-eye"></i> View Vendor Details
                  </button>
                  <button type="button" class="btn btn-outline-success btn-sm" id="addPurchaseBtn">
                    <i class="fas fa-shopping-cart"></i> Add Purchase
                  </button>
                  <button type="button" class="btn btn-outline-info btn-sm" id="viewPurchaseHistoryBtn">
                    <i class="fas fa-history"></i> Purchase History
                  </button>
                </div>
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label asp-for="VendorPartNumber" class="form-label">
                  <i class="fas fa-barcode text-info"></i>
                  Vendor Part Number
                </label>
                <input asp-for="VendorPartNumber" class="form-control" placeholder="Supplier's part number for this item" />
                <span asp-validation-for="VendorPartNumber" class="text-danger"></span>
                <div class="form-text">The part number used by the preferred vendor.</div>
              </div>
            </div>
            <div class="col-md-6">
              <!-- Vendor relationship info will be displayed here -->
              <div id="vendorRelationshipInfo" class="mt-4">
                <!-- Populated via JavaScript when vendor is selected -->
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Image Management Card -->
      <div class="card mt-3">
        <div class="card-header">
          <h5><i class="fas fa-image"></i> Item Image</h5>
        </div>
        <div class="card-body">
          @if (Model.HasImage)
          {
            <div class="row mb-3">
              <div class="col-md-4">
                <label class="form-label">Current Image:</label>
                <div>
                  <img src="data:@Model.ImageContentType;base64,@Convert.ToBase64String(Model.ImageData)"
                       alt="Item Image"
                       style="max-width: 150px; max-height: 150px; border: 1px solid #ddd; border-radius: 4px; padding: 5px;" />
                  <div class="mt-2">
                    <small class="text-muted">@Model.ImageFileName</small>
                  </div>
                </div>
              </div>
              <div class="col-md-8">
                <div class="mb-3">
                  <label for="newImageFile" class="form-label">
                    <i class="fas fa-upload text-primary"></i>
                    Replace Image
                  </label>
                  <input name="newImageFile" class="form-control" type="file" accept="image/*" id="newImageFile" />
                  <div class="form-text">
                    <i class="fas fa-info-circle"></i>
                    Leave empty to keep current image. Upload a new image (JPG, PNG, GIF, BMP - Max 5MB)
                  </div>
                </div>
              </div>
            </div>
          }
          else
          {
            <div class="mb-3">
              <label for="newImageFile" class="form-label">
                <i class="fas fa-upload text-primary"></i>
                Upload Image
              </label>
              <input name="newImageFile" class="form-control" type="file" accept="image/*" id="newImageFile" />
              <div class="form-text">
                <i class="fas fa-info-circle"></i>
                Upload an image (JPG, PNG, GIF, BMP - Max 5MB)
              </div>
            </div>
          }

          <!-- Image preview -->
          <div id="imagePreview" style="display: none;">
            <label class="form-label">New Image Preview:</label>
            <div>
              <img id="previewImg" src="#" alt="New image preview"
                   style="max-width: 200px; max-height: 200px; border: 1px solid #ddd; border-radius: 4px; padding: 5px;" />
            </div>
          </div>
        </div>
      </div>

      <!-- Submit Buttons -->
      <div class="card mt-3">
        <div class="card-body text-center">
          <button type="submit" class="btn btn-success btn-lg">
            <i class="fas fa-save"></i> Update Item
          </button>
          <a href="/Items/Details/@Model.Id" class="btn btn-outline-secondary btn-lg ms-2">
            <i class="fas fa-times"></i> Cancel
          </a>
        </div>
      </div>
    </form>

    <!-- Design Documents Section -->
    @if (Model.DesignDocuments?.Any() == true)
    {
      <div class="card mt-4">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h5><i class="fas fa-file-alt"></i> Design Documents (@Model.DesignDocuments.Count)</h5>
          <a href="/Documents/Upload?itemId=@Model.Id" class="btn btn-sm btn-outline-success">
            <i class="fas fa-plus"></i> Add Document
          </a>
        </div>
        <div class="card-body">
          <div class="table-responsive">
            <table class="table table-sm">
              <thead>
                <tr>
                  <th>Document Name</th>
                  <th>Type</th>
                  <th>Size</th>
                  <th>Uploaded</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                @foreach (var doc in Model.DesignDocuments.OrderBy(d => d.DocumentType).ThenBy(d => d.DocumentName))
                {
                  <tr>
                    <td>
                      <div class="d-flex align-items-center">
                        <i class="@doc.FileTypeIcon me-2"></i>
                        <div>
                          <strong>@doc.DocumentName</strong>
                          @if (!string.IsNullOrEmpty(doc.Description))
                          {
                            <br>
                      
    
                            <small class="text-muted">@doc.Description</small>
                          }
                        </div>
                      </div>
                    </td>
                    <td>
                      <span class="badge bg-secondary">@doc.DocumentType</span>
                    </td>
                    <td>@doc.FileSizeFormatted</td>
                    <td>
                      <small>@doc.UploadedDate.ToString("MM/dd/yyyy")</small>
                    </td>
                    <td>
                      <div class="btn-group btn-group-sm">
                        @{
                          var canPreview = new[] { ".pdf", ".png", ".jpg", ".jpeg", ".gif", ".bmp", ".tiff" }
                          .Contains(System.IO.Path.GetExtension(doc.FileName).ToLowerInvariant());
                        }

                        @if (canPreview)
                        {
                          <button class="btn btn-outline-info" onclick="previewDocument(@doc.Id, '@doc.DocumentName')" title="Preview">
                            <i class="fas fa-eye"></i>
                          </button>
                        }

                        <a href="/Documents/Download/@doc.Id" class="btn btn-outline-primary" title="Download">
                          <i class="fas fa-download"></i>
                        </a>

                        <!-- Delete button is available in Edit view -->
                        <form asp-controller="Documents" asp-action="Delete" method="post" style="display:inline;">
                          <input type="hidden" name="id" value="@doc.Id" />
                          <button type="submit" class="btn btn-outline-danger"
                                  onclick="return confirm('Delete this document? This action cannot be undone.')"
                                  title="Delete Document">
                            <i class="fas fa-trash"></i>
                          </button>
                        </form>
                      </div>
                    </td>
                  </tr>
                }
              </tbody>
            </table>
          </div>
        </div>
      </div>
    }
  </div>

  <!-- Right Column - Help and Info -->
  <div class="col-md-4">
    <!-- Current Item Information -->
    <div class="card">
      <div class="card-header">
        <h6><i class="fas fa-info-circle"></i> Item Information</h6>
      </div>
      <div class="card-body">
        <dl class="row">
          <dt class="col-sm-6">Version:</dt>
          <dd class="col-sm-6">
            <span class="badge bg-primary">@Model.Version</span>
            @if (Model.IsCurrentVersion)
            {
              <span class="badge bg-success ms-1">Current</span>
            }
          </dd>

          <dt class="col-sm-6">Created:</dt>
          <dd class="col-sm-6">@Model.CreatedDate.ToString("MM/dd/yyyy")</dd>

          <dt class="col-sm-6">Current Stock:</dt>
          <dd class="col-sm-6">
            <span class="@(Model.CurrentStock <= Model.MinimumStock ? "text-danger" : "text-success")">
              @Model.CurrentStock @Model.UnitOfMeasureDisplayName
            </span>
          </dd>

          <dt class="col-sm-6">Unit Category:</dt>
          <dd class="col-sm-6">
            <span class="badge bg-outline-secondary">@Model.UnitOfMeasureCategory</span>
          </dd>

          <dt class="col-sm-6">Revenue Account:</dt>
          <dd class="col-sm-6" id="displayRevenueAccount">
            @if (string.IsNullOrEmpty(Model.PreferredRevenueAccountCode))
            {
              <span class="text-muted">@Model.GetDefaultRevenueAccountCode() (Default)</span>
            }
            else
            {
              <span class="text-primary">@Model.PreferredRevenueAccountCode (Override)</span>
            }
          </dd>

          @if (Model.CreatedFromChangeOrder != null)
          {
            <dt class="col-sm-6">Change Order:</dt>
            <dd class="col-sm-6">
              <a href="/ChangeOrders/Details/@Model.CreatedFromChangeOrderId" class="text-decoration-none">
                @Model.CreatedFromChangeOrder.ChangeOrderNumber
              </a>
            </dd>
          }
        </dl>
      </div>
    </div>

    <!-- Unit of Measure Info -->
    <div class="card mt-3">
      <div class="card-header">
        <h6><i class="fas fa-ruler-combined"></i> Unit of Measure</h6>
      </div>
      <div class="card-body">
        <div class="text-center p-3 bg-light rounded">
          <div class="h4 mb-1">@Model.UnitOfMeasureDisplayName</div>
          <div class="text-muted">@Model.UnitOfMeasureCategory</div>
        </div>
        <div class="mt-3">
          <small class="text-muted">
            <i class="fas fa-exclamation-triangle text-warning"></i>
            <strong>Important:</strong> Changing the unit of measure will affect how quantities are displayed throughout the system, but won't convert existing values.
          </small>
        </div>
      </div>
    </div>

    <!-- Editing Tips -->
    <div class="card mt-3">
      <div class="card-header">
        <h6><i class="fas fa-lightbulb"></i> Editing Tips</h6>
      </div>
      <div class="card-body">
        <div class="list-group list-group-flush">
          <div class="list-group-item border-0 px-0">
            <strong>Item Type:</strong>
            <small class="text-muted d-block">Choose how this item is tracked - affects inventory management and stock calculations.</small>
          </div>
          <div class="list-group-item border-0 px-0">
            <strong>Sellable Status:</strong>
            <small class="text-muted d-block">Controls whether this item appears in sales forms and customer-facing areas.</small>
          </div>
          <div class="list-group-item border-0 px-0">
            <strong>Revenue Account:</strong>
            <small class="text-muted d-block">Configure which account receives revenue when this item is sold. Defaults based on item type.</small>
          </div>
          <div class="list-group-item border-0 px-0">
            <strong>Version Control:</strong>
            <small class="text-muted d-block">Version cannot be edited. Use Change Orders to create new versions with modifications.</small>
          </div>
          <div class="list-group-item border-0 px-0">
            <strong>Stock Management:</strong>
            <small class="text-muted d-block">Current stock is updated through purchases and inventory adjustments, not directly edited.</small>
          </div>
        </div>
      </div>
    </div>

    <!-- Quick Actions -->
    @if (Model.IsCurrentVersion)
    {
      <div class="card mt-3">
        <div class="card-header">
          <h6><i class="fas fa-lightning-bolt"></i> Quick Actions</h6>
        </div>
        <div class="card-body">
          <div class="d-grid gap-2">
            <a href="/Purchases/Create?itemId=@Model.Id" class="btn btn-outline-success btn-sm">
              <i class="fas fa-shopping-cart"></i> Add Purchase
            </a>
            <a href="/Documents/Upload?itemId=@Model.Id" class="btn btn-outline-info btn-sm">
              <i class="fas fa-upload"></i> Upload Document
            </a>
            @if (Model.HasImage)
            {
              <form asp-controller="Items" asp-action="RemoveImage" method="post" class="d-grid">
                <input type="hidden" name="id" value="@Model.Id" />
                <button type="submit" class="btn btn-outline-danger btn-sm"
                        onclick="return confirm('Remove the current image? This action cannot be undone.');">
                  <i class="fas fa-trash"></i> Remove Image
                </button>
              </form>
            }
            <a href="/Inventory/Adjust?itemId=@Model.Id" class="btn btn-outline-warning btn-sm">
              <i class="fas fa-edit"></i> Adjust Stock
            </a>
          </div>
        </div>
      </div>
    }
  </div>
</div>

@* Document Preview Modal *@
<div class="modal fade" id="documentPreviewModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-xl">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="previewModalTitle">Document Preview</h5>
        <div class="btn-group btn-group-sm">
          <button type="button" class="btn btn-outline-secondary" onclick="zoomOut()">
            <i class="fas fa-search-minus"></i>
          </button>
          <button type="button" class="btn btn-outline-secondary" onclick="resetZoom()">
            <i class="fas fa-compress-arrows-alt"></i>
          </button>
          <button type="button" class="btn btn-outline-secondary" onclick="zoomIn()">
            <i class="fas fa-search-plus"></i>
          </button>
        </div>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body p-0">
        <div id="previewLoading" class="text-center p-4">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
          <p class="mt-2">Loading document...</p>
        </div>
        <iframe id="previewIframe" style="width: 100%; height: 70vh; border: none; display: none;"></iframe>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <a id="downloadLink" href="#" class="btn btn-primary">
          <i class="fas fa-download"></i> Download
        </a>
      </div>
    </div>
  </div>
</div>

@section Scripts {
  <script>
    let currentZoom = 1;
    let currentDocumentId = null;

    function previewDocument(documentId, documentName) {
        currentDocumentId = documentId;
        const modal = new bootstrap.Modal(document.getElementById('documentPreviewModal'));
        const iframe = document.getElementById('previewIframe');
        const modalTitle = document.getElementById('previewModalTitle');
        const downloadLink = document.getElementById('downloadLink');
        const loading = document.getElementById('previewLoading');

        modalTitle.textContent = `Preview: ${documentName}`;
        downloadLink.href = `/Documents/Download/${documentId}`;

        // Show loading, hide iframe
        loading.style.display = 'block';
        iframe.style.display = 'none';

        // Set iframe source to view the document
        iframe.src = `/Documents/View/${documentId}`;

        // Show modal
        modal.show();

        // Handle iframe load
        iframe.onload = function() {
            loading.style.display = 'none';
            iframe.style.display = 'block';
        };

        // Handle iframe error
        iframe.onerror = function() {
            loading.innerHTML = `
                <div class="text-center p-4">
                    <i class="fas fa-exclamation-triangle fa-3x text-warning mb-3"></i>
                    <h5>Preview Not Available</h5>
                    <p class="text-muted">This document cannot be previewed in your browser.</p>
                    <a href="/Documents/Download/${documentId}" class="btn btn-primary">
                        <i class="fas fa-download"></i> Download Document
                    </a>
                </div>
            `;
        };
    }

    function zoomIn() {
        currentZoom += 0.25;
        applyZoom();
    }

    function zoomOut() {
        if (currentZoom > 0.5) {
            currentZoom -= 0.25;
            applyZoom();
        }
    }

    function resetZoom() {
        currentZoom = 1;
        applyZoom();
    }

    function applyZoom() {
        const iframe = document.getElementById('previewIframe');
        iframe.style.transform = `scale(${currentZoom})`;
        iframe.style.transformOrigin = 'top left';
    }

    // Reset zoom when modal is closed
    document.getElementById('documentPreviewModal').addEventListener('hidden.bs.modal', function () {
        currentZoom = 1;
        applyZoom();
        document.getElementById('previewIframe').src = '';
    });

    document.addEventListener('DOMContentLoaded', function () {
    console.log('Edit Item page loaded');

    // Get elements
    const itemTypeSelect = document.getElementById('itemTypeSelect');
    const stockManagement = document.getElementById('stockManagement');
    const pricingSection = document.getElementById('pricingSection');
    const isSellableSwitch = document.getElementById('isSellableSwitch');
    const revenueAccountSection = document.getElementById('revenueAccountSection');

    function updateFormBasedOnItemType() {
      const itemType = parseInt(itemTypeSelect.value);
      const isInventoried = itemType === 0; // Inventoried = 0

      if (isInventoried) 
      {
        stockManagement.style.display = 'block';
        pricingSection.style.display = 'block';
      } 
      else 
      {
        stockManagement.style.display = 'none';
      }

      pricingSection.style.display = 'block';
      
      // Update revenue account display
      updateRevenueAccountDisplay();
    }

    // Show/hide revenue account section based on sellable status
    function toggleRevenueAccountSection() {
      if (isSellableSwitch && isSellableSwitch.checked) {
        revenueAccountSection.style.display = '';
      } else {
        revenueAccountSection.style.display = 'none';
      }
      updateRevenueAccountDisplay();
    }

    // Update revenue account display in sidebar
    function updateRevenueAccountDisplay() {
      const revenueAccountSelect = document.querySelector('select[name="PreferredRevenueAccountCode"]');
      const displayElement = document.getElementById('displayRevenueAccount');
      
      if (revenueAccountSelect && displayElement) {
        const selectedValue = revenueAccountSelect.value;
        
        if (selectedValue) {
          const selectedText = revenueAccountSelect.selectedOptions[0]?.text || selectedValue;
          displayElement.innerHTML = `<span class="text-primary">${selectedText} (Override)</span>`;
        } else {
          // Show default based on item type
          const defaultAccount = getDefaultAccountForItemType(parseInt(itemTypeSelect.value));
          displayElement.innerHTML = `<span class="text-muted">${defaultAccount} (Default)</span>`;
        }
      }
    }

    function getDefaultAccountForItemType(itemType) {
      switch(itemType) {
        case 0: return '4000 - Product Sales'; // Inventoried
        case 4: return '4010 - Supply Sales';  // Consumable  
        case 8: return '4020 - Research Material Sales'; // R&D Materials
        default: return '4000 - Product Sales';
      }
    }

    // Initial setup
    updateFormBasedOnItemType();
    toggleRevenueAccountSection();

    // Handle item type changes
    itemTypeSelect.addEventListener('change', function() {
      updateFormBasedOnItemType();

      // Show warning if changing from inventoried to non-inventoried with existing stock
      const currentStock = @Model.CurrentStock;
      const newItemType = parseInt(this.value);

      if (currentStock > 0 && newItemType !== 0) {
        if (!confirm('This item has current stock of ' + currentStock + ' @Model.UnitOfMeasureDisplayName. Changing to non-inventoried will hide stock tracking. Continue?')) {
          this.value = '0'; // Reset to inventoried
          updateFormBasedOnItemType();
        }
      }
    });

    // Handle sellable status changes
    if (isSellableSwitch) {
      isSellableSwitch.addEventListener('change', toggleRevenueAccountSection);
    }

    // Handle revenue account changes
    const revenueAccountSelect = document.querySelector('select[name="PreferredRevenueAccountCode"]');
    if (revenueAccountSelect) {
      revenueAccountSelect.addEventListener('change', updateRevenueAccountDisplay);
    }

    $(document).ready(function() {
        var currentItemId = @Model.Id;

        // Handle vendor dropdown change
        $('#preferredVendorId').change(function() {
            var selectedVendorId = $(this).val();
            var selectedVendorName = $(this).find('option:selected').text();

            updateVendorActions(selectedVendorId, selectedVendorName);

            if (selectedVendorId) {
                loadVendorRelationshipInfo(selectedVendorId);
            } else {
                clearVendorRelationshipInfo();
            }
        });

        // Add new vendor button
        $('#addNewVendorBtn').click(function() {
            // Open vendor creation in new tab/window
            window.open('/Vendors/Create', '_blank');
        });

        // View vendor details button
        $('#viewVendorDetailsBtn').click(function() {
            var vendorId = $('#preferredVendorId').val();
            if (vendorId) {
                window.open(`/Vendors/Details/${vendorId}`, '_blank');
            }
        });

        // Add purchase button
        $('#addPurchaseBtn').click(function() {
            window.open(`/Purchases/Create?itemId=${currentItemId}`, '_blank');
        });

        // View purchase history button
        $('#viewPurchaseHistoryBtn').click(function() {
            window.open(`/Items/Details/${currentItemId}#purchases`, '_blank');
        });

        function updateVendorActions(vendorId, vendorName) {
            var viewDetailsBtn = $('#viewVendorDetailsBtn');

            if (vendorId && vendorId !== '') {
                viewDetailsBtn.prop('disabled', false);
                viewDetailsBtn.attr('title', `View details for ${vendorName}`);
            } else {
                viewDetailsBtn.prop('disabled', true);
                viewDetailsBtn.attr('title', 'Select a vendor first');
            }
        }

        function loadVendorRelationshipInfo(vendorId) {
            // Load vendor-item relationship info via AJAX
            $.get(`/Vendors/GetVendorItemInfo?vendorId=${vendorId}&itemId=${currentItemId}`)
                .done(function(data) {
                    if (data.success && data.vendorItem) {
                        var info = `
                            <div class="card border-success">
                                <div class="card-body p-2">
                                    <h6 class="card-title text-success mb-1">
                                        <i class="fas fa-link"></i> Vendor Relationship
                                    </h6>
                                    <small class="text-muted">
                                        <strong>Unit Cost:</strong> $${data.vendorItem.unitCost}<br>
                                        <strong>Lead Time:</strong> ${data.vendorItem.leadTimeDays} days<br>
                                        <strong>Min Order:</strong> ${data.vendorItem.minimumOrderQuantity}
                                        ${data.vendorItem.isPrimary ? '<br><span class="badge bg-primary">Primary Vendor</span>' : ''}
                                    </small>
                                </div>
                            </div>`;
                        $('#vendorRelationshipInfo').html(info);
                    } else {
                        var noRelationshipInfo = `
                            <div class="card border-warning">
                                <div class="card-body p-2">
                                    <h6 class="card-title text-warning mb-1">
                                        <i class="fas fa-exclamation-triangle"></i> No Relationship
                                    </h6>
                                    <small class="text-muted">
                                        No vendor-item relationship found. Consider adding this item to the vendor's catalog.
                                    </small>
                                    <br>
                                    <a href="/Vendors/Details/${vendorId}#manage-items" class="btn btn-outline-warning btn-sm mt-1" target="_blank">
                                        <i class="fas fa-plus"></i> Add to Vendor
                                    </a>
                                </div>
                            </div>`;
                        $('#vendorRelationshipInfo').html(noRelationshipInfo);
                    }
                })
                .fail(function() {
                    $('#vendorRelationshipInfo').html(`
                        <div class="alert alert-warning p-2">
                            <small>Could not load vendor relationship information.</small>
                        </div>`);
                });
        }

        function clearVendorRelationshipInfo() {
            $('#vendorRelationshipInfo').empty();
        }

        // Initialize vendor actions on page load
        var initialVendorId = $('#preferredVendorId').val();
        var initialVendorName = $('#preferredVendorId').find('option:selected').text();
        updateVendorActions(initialVendorId, initialVendorName);

        if (initialVendorId) {
            loadVendorRelationshipInfo(initialVendorId);
        }
    });
  });
  </script>

  <style>
    .btn-group-sm .btn {
      padding: 0.25rem 0.5rem;
      font-size: 0.875rem;
    }

    .table th {
      border-top: none;
      font-weight: 600;
      font-size: 0.875rem;
    }

    .badge {
      font-size: 0.75rem;
    }
  </style>
}