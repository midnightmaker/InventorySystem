@model InventorySystem.ViewModels.CreateItemViewModel
@{
  ViewData["Title"] = "Create Item";
}

<h1><i class="fas fa-plus"></i> Create Item</h1>

<div class="row">
  <div class="col-md-8">
    <form asp-action="Create" asp-controller="Items" enctype="multipart/form-data" method="post" id="createItemForm">
      <div class="card">
        <div class="card-header">
          <h5><i class="fas fa-info-circle"></i> Basic Information</h5>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label asp-for="PartNumber" class="form-label"></label>
                <input asp-for="PartNumber" class="form-control" required />
                <span asp-validation-for="PartNumber" class="text-danger"></span>
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label asp-for="MinimumStock" class="form-label"></label>
                <input asp-for="MinimumStock" class="form-control" type="number" min="0" value="0" />
                <span asp-validation-for="MinimumStock" class="text-danger"></span>
              </div>
            </div>
          </div>

          <div class="mb-3">
            <label asp-for="Description" class="form-label"></label>
            <input asp-for="Description" class="form-control" required />
            <span asp-validation-for="Description" class="text-danger"></span>
          </div>

          <div class="mb-3">
            <label asp-for="Comments" class="form-label"></label>
            <textarea asp-for="Comments" class="form-control" rows="3" placeholder="Component specifications for optical, mechanical, or electronic parts"></textarea>
            <span asp-validation-for="Comments" class="text-danger"></span>
          </div>
        </div>
      </div>

      <div class="card mt-3">
        <div class="card-header">
          <h5><i class="fas fa-image"></i> Item Image (Optional)</h5>
        </div>
        <div class="card-body">
          <div class="mb-3">
            <label asp-for="ImageFile" class="form-label"></label>
            <input asp-for="ImageFile" class="form-control" type="file" accept="image/*" id="imageFile" />
            <span asp-validation-for="ImageFile" class="text-danger"></span>
            <div class="form-text">
              Upload an image of the component (JPG, PNG, GIF, BMP - Max 5MB)
            </div>
          </div>

          <!-- Image preview -->
          <div id="imagePreview" style="display: none;">
            <label class="form-label">Preview:</label>
            <div>
              <img id="previewImg" src="#" alt="Image preview" style="max-width: 200px; max-height: 200px; border: 1px solid #ddd; border-radius: 4px; padding: 5px;" />
            </div>
          </div>
        </div>
      </div>

      <div class="card mt-3">
        <div class="card-header">
          <div class="form-check">
            <input asp-for="HasInitialPurchase" class="form-check-input" type="checkbox" id="hasInitialPurchase" />
            <label class="form-check-label" for="hasInitialPurchase">
              <h5><i class="fas fa-shopping-cart"></i> Add Initial Purchase (Optional)</h5>
            </label>
          </div>
        </div>
        <div class="card-body" id="initialPurchaseSection" style="display: none;">
          <div class="alert alert-info">
            <i class="fas fa-info-circle"></i>
            <strong>Optional:</strong> Add initial inventory and cost information when creating the item. You can always add purchases later.
          </div>

          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label asp-for="InitialVendor" class="form-label"></label>
                <input asp-for="InitialVendor" class="form-control initial-purchase-field" placeholder="Vendor name" disabled />
                <span asp-validation-for="InitialVendor" class="text-danger"></span>
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label asp-for="InitialPurchaseDate" class="form-label"></label>
                <input asp-for="InitialPurchaseDate" class="form-control initial-purchase-field" type="date" disabled />
                <span asp-validation-for="InitialPurchaseDate" class="text-danger"></span>
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-4">
              <div class="mb-3">
                <label asp-for="InitialQuantity" class="form-label"></label>
                <input asp-for="InitialQuantity" class="form-control initial-purchase-field" type="number" min="1" id="initialQuantity" disabled />
                <span asp-validation-for="InitialQuantity" class="text-danger"></span>
              </div>
            </div>
            <div class="col-md-4">
              <div class="mb-3">
                <label asp-for="InitialCostPerUnit" class="form-label"></label>
                <input asp-for="InitialCostPerUnit" class="form-control initial-purchase-field" type="number" step="0.01" min="0" id="initialCostPerUnit" disabled />
                <span asp-validation-for="InitialCostPerUnit" class="text-danger"></span>
              </div>
            </div>
            <div class="col-md-4">
              <div class="mb-3">
                <label class="form-label">Total Cost</label>
                <input type="text" class="form-control" id="initialTotalCost" readonly />
              </div>
            </div>
          </div>

          <div class="mb-3">
            <label asp-for="InitialPurchaseOrderNumber" class="form-label"></label>
            <input asp-for="InitialPurchaseOrderNumber" class="form-control" placeholder="Optional PO number" disabled />
            <span asp-validation-for="InitialPurchaseOrderNumber" class="text-danger"></span>
          </div>
        </div>
      </div>

      <div class="mt-3 mb-5">
        <button type="submit" class="btn btn-primary" id="submitBtn">
          <i class="fas fa-save"></i> Create Item
        </button>
        <a href="/Items" class="btn btn-secondary">Cancel</a>
        
        <!-- Debug button for testing -->
        <button type="button" class="btn btn-outline-info ms-2" onclick="testFormSubmission()">
          <i class="fas fa-bug"></i> Test Form
        </button>
      </div>
      
      <!-- Add extra space at bottom to prevent button obstruction -->
      <div style="height: 100px;"></div>
    </form>
  </div>

  <div class="col-md-4">
    <div class="card">
      <div class="card-header">
        <h6><i class="fas fa-lightbulb"></i> Tips</h6>
      </div>
      <div class="card-body">
        <ul class="list-unstyled small">
          <li><i class="fas fa-check text-success"></i> Use descriptive part numbers</li>
          <li><i class="fas fa-check text-success"></i> Add component specifications in comments</li>
          <li><i class="fas fa-check text-success"></i> Upload clear component images</li>
          <li><i class="fas fa-check text-success"></i> Set appropriate minimum stock levels</li>
          <li><i class="fas fa-check text-success"></i> Initial purchase is completely optional</li>
        </ul>
      </div>
    </div>
    
    <div class="card mt-3">
      <div class="card-header">
        <h6><i class="fas fa-info-circle"></i> Initial Purchase</h6>
      </div>
      <div class="card-body">
        <small class="text-muted">
          The initial purchase section is <strong>completely optional</strong>. You can:
          <ul class="mt-2 mb-0">
            <li>Create items without any purchase information</li>
            <li>Add purchases later from the item details page</li>
            <li>Use the initial purchase for immediate inventory setup</li>
          </ul>
        </small>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Handle initial purchase section toggle
    const hasInitialPurchaseCheckbox = document.getElementById('hasInitialPurchase');
    const initialPurchaseSection = document.getElementById('initialPurchaseSection');
    const initialPurchaseFields = document.querySelectorAll('.initial-purchase-field');

    if (hasInitialPurchaseCheckbox && initialPurchaseSection) {
      hasInitialPurchaseCheckbox.addEventListener('change', function () {
        if (this.checked) {
          initialPurchaseSection.style.display = 'block';
          // Enable fields and remove disabled attribute
          initialPurchaseFields.forEach(field => {
            field.removeAttribute('disabled');
            // Don't add required attribute here - we'll handle validation manually
          });
        } else {
          initialPurchaseSection.style.display = 'none';
          // Disable fields and clear values
          initialPurchaseFields.forEach(field => {
            field.setAttribute('disabled', 'disabled');
            field.value = '';
            // Remove any validation attributes
            field.removeAttribute('required');
          });
          // Clear total cost
          document.getElementById('initialTotalCost').value = '';
        }
      });
    }

    // Handle total cost calculation
    const quantityInput = document.getElementById('initialQuantity');
    const costInput = document.getElementById('initialCostPerUnit');
    const totalCostInput = document.getElementById('initialTotalCost');

    function updateInitialTotal() {
      if (quantityInput && costInput && totalCostInput) {
        const quantity = parseFloat(quantityInput.value) || 0;
        const cost = parseFloat(costInput.value) || 0;
        const total = quantity * cost;
        totalCostInput.value = total > 0 ? '$' + total.toFixed(2) : '';
      }
    }

    if (quantityInput && costInput) {
      quantityInput.addEventListener('input', updateInitialTotal);
      costInput.addEventListener('input', updateInitialTotal);
    }

    // Handle image preview
    const imageFileInput = document.getElementById('imageFile');
    const imagePreview = document.getElementById('imagePreview');
    const previewImg = document.getElementById('previewImg');

    if (imageFileInput && imagePreview && previewImg) {
      imageFileInput.addEventListener('change', function (e) {
        const file = e.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = function (e) {
            previewImg.src = e.target.result;
            imagePreview.style.display = 'block';
          };
          reader.readAsDataURL(file);
        } else {
          imagePreview.style.display = 'none';
        }
      });
    }

    // Form submission validation
    const form = document.getElementById('createItemForm');
    if (!form) {
      console.error('Form not found!');
      return;
    }
    
    form.addEventListener('submit', function(e) {
      console.log('Form submission started');
      
      // Check required fields
      const partNumber = document.querySelector('input[name="PartNumber"]').value.trim();
      const description = document.querySelector('input[name="Description"]').value.trim();
      
      if (!partNumber || !description) {
        e.preventDefault();
        alert('Please fill in the required fields: Part Number and Description');
        return false;
      }
      
      const hasInitialPurchase = document.getElementById('hasInitialPurchase').checked;
      console.log('Has initial purchase:', hasInitialPurchase);
      
      if (hasInitialPurchase) {
        const vendor = document.querySelector('input[name="InitialVendor"]').value.trim();
        const quantity = document.querySelector('input[name="InitialQuantity"]').value;
        const cost = document.querySelector('input[name="InitialCostPerUnit"]').value;
        
        console.log('Vendor:', vendor, 'Quantity:', quantity, 'Cost:', cost);
        
        if (!vendor) {
          e.preventDefault();
          alert('Please enter the vendor name for the initial purchase.');
          document.querySelector('input[name="InitialVendor"]').focus();
          return false;
        }
        
        if (!quantity || quantity <= 0) {
          e.preventDefault();
          alert('Please enter a valid quantity (greater than 0) for the initial purchase.');
          document.querySelector('input[name="InitialQuantity"]').focus();
          return false;
        }
        
        if (!cost || cost <= 0) {
          e.preventDefault();
          alert('Please enter a valid cost per unit (greater than 0) for the initial purchase.');
          document.querySelector('input[name="InitialCostPerUnit"]').focus();
          return false;
        }
      }
      
      console.log('Form validation passed, submitting...');
      // Let the form submit normally
    });
  });

  // Debug function to test form submission
  function testFormSubmission() {
    console.log('=== FORM DEBUG TEST ===');
    const form = document.querySelector('form');
    console.log('Form found:', !!form);
    console.log('Form action:', form ? form.action : 'No form');
    console.log('Form method:', form ? form.method : 'No form');
    
    const partNumber = document.querySelector('input[name="PartNumber"]');
    const description = document.querySelector('input[name="Description"]');
    
    console.log('Part Number field:', !!partNumber, 'Value:', partNumber ? partNumber.value : 'Not found');
    console.log('Description field:', !!description, 'Value:', description ? description.value : 'Not found');
    
    const submitBtn = document.getElementById('submitBtn');
    console.log('Submit button found:', !!submitBtn);
    console.log('Submit button type:', submitBtn ? submitBtn.type : 'Not found');
    
    if (form) {
      console.log('Attempting manual form submission...');
      form.submit();
    }
  }
</script>