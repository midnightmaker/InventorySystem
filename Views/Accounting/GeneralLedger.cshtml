@model InventorySystem.ViewModels.Accounting.GeneralLedgerViewModel
@{
  ViewData["Title"] = "General Ledger";
}

<div class="d-flex justify-content-between align-items-center mb-4">
  <h1><i class="fas fa-book"></i> General Ledger</h1>
  <div class="btn-group">
    <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
      <i class="fas fa-arrow-left"></i> Back to Dashboard
    </a>
    <button class="btn btn-success" onclick="exportLedger()">
      <i class="fas fa-download"></i> Export
    </button>
  </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
  <div class="alert alert-success alert-dismissible fade show">
    <i class="fas fa-check-circle"></i> @TempData["SuccessMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

@if (TempData["ErrorMessage"] != null)
{
  <div class="alert alert-danger alert-dismissible fade show">
    <i class="fas fa-exclamation-circle"></i> @TempData["ErrorMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

<!-- Filter Controls -->
<div class="card mb-4">
  <div class="card-header">
    <h5><i class="fas fa-filter"></i> Filter Transactions</h5>
  </div>
  <div class="card-body">
    <form method="get">
      <div class="row">
        <div class="col-md-3">
          <div class="mb-3">
            <label class="form-label">Account</label>
            <select name="accountCode" class="form-select">
              <option value="">All Accounts</option>
              @foreach (var account in Model.Accounts.OrderBy(a => a.AccountCode))
              {
                var isSelected = account.AccountCode == Model.SelectedAccountCode;
                <option value="@account.AccountCode" selected="@isSelected">
                  @account.AccountCode - @account.AccountName
                </option>
              }
            </select>
          </div>
        </div>
        <div class="col-md-3">
          <div class="mb-3">
            <label class="form-label">Start Date</label>
            <input type="date" name="startDate" class="form-control"
                   value="@Model.StartDate.ToString("yyyy-MM-dd")" />
          </div>
        </div>
        <div class="col-md-3">
          <div class="mb-3">
            <label class="form-label">End Date</label>
            <input type="date" name="endDate" class="form-control"
                   value="@Model.EndDate.ToString("yyyy-MM-dd")" />
          </div>
        </div>
        <div class="col-md-3">
          <div class="mb-3">
            <label class="form-label">&nbsp;</label>
            <button type="submit" class="btn btn-primary d-block">
              <i class="fas fa-search"></i> Apply Filter
            </button>
          </div>
        </div>
      </div>
    </form>
  </div>
</div>

<!-- Balance Check Alert -->
@if (!Model.IsBalanced && Model.Entries.Any())
{
  <div class="alert alert-warning">
    <i class="fas fa-exclamation-triangle"></i>
    <strong>Trial Balance Warning:</strong>
    Debits (@Model.TotalDebits.ToString("C")) do not equal Credits (@Model.TotalCredits.ToString("C")).
    Difference: @Math.Abs(Model.TotalDebits - Model.TotalCredits).ToString("C")
  </div>
}

<!-- Ledger Entries -->
<div class="card">
  <div class="card-header d-flex justify-content-between align-items-center">
    <h5><i class="fas fa-list"></i> Ledger Entries</h5>
    <div>
      @if (!string.IsNullOrEmpty(Model.SelectedAccountCode))
      {
        var selectedAccount = Model.Accounts.FirstOrDefault(a => a.AccountCode == Model.SelectedAccountCode);
        if (selectedAccount != null)
        {
          <span class="badge bg-primary">@selectedAccount.AccountCode - @selectedAccount.AccountName</span>
        }
      }
      <span class="badge bg-info">@Model.Entries.Count entries</span>
    </div>
  </div>
  <div class="card-body p-0">
    @if (Model.Entries.Any())
    {
      <div class="table-responsive">
        <table class="table table-hover mb-0">
          <thead class="table-light">
            <tr>
              <th>Date</th>
              <th>Transaction #</th>
              <th>Account</th>
              <th>Description</th>
              <th class="text-end">Debit</th>
              <th class="text-end">Credit</th>
              <th>Reference</th>
            </tr>
          </thead>
          <tbody>
            @{
              decimal runningBalance = 0;
              string currentTransactionNumber = "";
            }
            @foreach (var entry in Model.Entries)
            {
              var isNewTransaction = entry.TransactionNumber != currentTransactionNumber;
              currentTransactionNumber = entry.TransactionNumber;

              <tr class="@(isNewTransaction ? "border-top-2" : "")">
                <td>
                  @entry.TransactionDate.ToString("MM/dd/yyyy")
                  @if (isNewTransaction)
                  {
                    <br>
              
                    <small class="text-muted">@entry.TransactionDate.ToString("h:mm tt")</small>
                  }
                </td>
                <td>
                  @if (isNewTransaction)
                  {
                    <strong>@entry.TransactionNumber</strong>
                  }
                </td>
                <td>
                  <strong>@entry.Account.AccountCode</strong>
                  <br><small class="text-muted">@entry.Account.AccountName</small>
                </td>
                <td>@entry.Description</td>
                <td class="text-end">
                  @if (entry.DebitAmount > 0)
                  {
                    <span class="text-success fw-bold">@entry.DebitAmount.ToString("C")</span>
                  }
                  else
                  {
                    <span class="text-muted">-</span>
                  }
                </td>
                <td class="text-end">
                  @if (entry.CreditAmount > 0)
                  {
                    <span class="text-danger fw-bold">@entry.CreditAmount.ToString("C")</span>
                  }
                  else
                  {
                    <span class="text-muted">-</span>
                  }
                </td>
                <td>
                  @if (entry.HasReference)
                  {
                    var url = entry.GetFinalReferenceUrl();
                    var displayText = entry.GetFinalReferenceText();
                    
                    if (!string.IsNullOrEmpty(url))
                    {
                      <a href="@url" class="@entry.GetReferenceBadgeClass() text-decoration-none" 
                         title="View @entry.ReferenceType Details" target="_blank">
                        <i class="@entry.GetReferenceIcon() me-1"></i>
                        @displayText
                      </a>
                    }
                    else
                    {
                      <span class="@entry.GetReferenceBadgeClass()">
                        <i class="@entry.GetReferenceIcon() me-1"></i>
                        @displayText
                      </span>
                    }
                  }
                  else
                  {
                    <span class="text-muted">-</span>
                  }
                </td>
              </tr>
            }
          </tbody>
          <tfoot class="table-light">
            <tr>
              <th colspan="4" class="text-end">Totals:</th>
              <th class="text-end text-success">@Model.TotalDebits.ToString("C")</th>
              <th class="text-end text-danger">@Model.TotalCredits.ToString("C")</th>
              <th>
                @if (Model.IsBalanced)
                {
                  <span class="badge bg-success">Balanced</span>
                }
                else
                {
                  <span class="badge bg-warning">Out of Balance</span>
                }
              </th>
            </tr>
          </tfoot>
        </table>
      </div>
    }
    else
    {
      <div class="text-center py-5">
        <i class="fas fa-book-open fa-3x text-muted mb-3"></i>
        <h4 class="text-muted">No Transactions Found</h4>
        <p class="text-muted">
          @if (!string.IsNullOrEmpty(Model.SelectedAccountCode))
          {
            <span>No transactions found for the selected account and date range.</span>
          }
          else
          {
            <span>No transactions found for the selected date range.</span>
          }
        </p>
        <div class="mt-3">
          <a href="@Url.Action("Index")" class="btn btn-primary">
            <i class="fas fa-arrow-left"></i> Back to Dashboard
          </a>
          <form method="post" action="@Url.Action("GenerateJournalEntries")" class="d-inline">
            @Html.AntiForgeryToken()
            <button type="submit" class="btn btn-success">
              <i class="fas fa-sync"></i> Generate Missing Entries
            </button>
          </form>
        </div>
      </div>
    }
  </div>
</div>

<!-- Summary Cards -->
@if (Model.Entries.Any())
{
  <div class="row mt-4">
    <div class="col-md-4">
      <div class="card text-center">
        <div class="card-body">
          <h5 class="card-title text-success">Total Debits</h5>
          <h3 class="text-success">@Model.TotalDebits.ToString("C")</h3>
        </div>
      </div>
    </div>
    <div class="col-md-4">
      <div class="card text-center">
        <div class="card-body">
          <h5 class="card-title text-danger">Total Credits</h5>
          <h3 class="text-danger">@Model.TotalCredits.ToString("C")</h3>
        </div>
      </div>
    </div>
    <div class="col-md-4">
      <div class="card text-center">
        <div class="card-body">
          <h5 class="card-title">Balance Status</h5>
          @if (Model.IsBalanced)
          {
            <h3 class="text-success">
              <i class="fas fa-check-circle"></i> Balanced
            </h3>
          }
          else
          {
            <h3 class="text-warning">
              <i class="fas fa-exclamation-triangle"></i> Out of Balance
            </h3>
            <small class="text-muted">Difference: @Math.Abs(Model.TotalDebits - Model.TotalCredits).ToString("C")</small>
          }
        </div>
      </div>
    </div>
  </div>
}

<script>
  function exportLedger() {
      // Create a form to export the current filtered results
      const form = document.createElement('form');
      form.method = 'GET';
      form.action = '@Url.Action("ExportLedger")';

      // Add current filter parameters
      const params = new URLSearchParams(window.location.search);
      params.forEach((value, key) => {
          const input = document.createElement('input');
          input.type = 'hidden';
          input.name = key;
          input.value = value;
          form.appendChild(input);
      });

      document.body.appendChild(form);
      form.submit();
      document.body.removeChild(form);
  }
</script>

<style>
  .border-top-2 {
    border-top: 2px solid #dee2e6 !important;
  }
</style>