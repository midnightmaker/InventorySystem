@model InventorySystem.ViewModels.Accounting.AccountsPayableViewModel
@{
  ViewData["Title"] = "Accounts Payable";
}

<div class="d-flex justify-content-between align-items-center mb-4">
  <h1><i class="fas fa-file-invoice-dollar"></i> Accounts Payable</h1>
  <div class="btn-group">
    <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
      <i class="fas fa-arrow-left"></i> Back to Dashboard
    </a>
    <button class="btn btn-success" onclick="paySelectedInvoices()">
      <i class="fas fa-credit-card"></i> Pay Selected
    </button>
    <button class="btn btn-outline-success" onclick="exportAP()">
      <i class="fas fa-download"></i> Export
    </button>
  </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
  <div class="alert alert-success alert-dismissible fade show">
    <i class="fas fa-check-circle"></i> @TempData["SuccessMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

@if (TempData["ErrorMessage"] != null)
{
  <div class="alert alert-danger alert-dismissible fade show">
    <i class="fas fa-exclamation-circle"></i> @TempData["ErrorMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

<!-- A/P Summary Cards -->
<div class="row mb-4">
  <div class="col-md-3">
    <div class="card bg-primary text-white">
      <div class="card-body">
        <div class="d-flex justify-content-between">
          <div>
            <h4>@Model.FormattedTotalAP</h4>
            <p class="mb-0">Total A/P</p>
          </div>
          <div class="align-self-center">
            <i class="fas fa-file-invoice fa-2x"></i>
          </div>
        </div>
        <small>@Model.TotalUnpaidCount unpaid invoice(s)</small>
      </div>
    </div>
  </div>
  <div class="col-md-3">
    <div class="card bg-danger text-white">
      <div class="card-body">
        <div class="d-flex justify-content-between">
          <div>
            <h4>@Model.FormattedTotalOverdue</h4>
            <p class="mb-0">Overdue</p>
          </div>
          <div class="align-self-center">
            <i class="fas fa-exclamation-triangle fa-2x"></i>
          </div>
        </div>
        <small>@Model.TotalOverdueCount overdue invoice(s)</small>
      </div>
    </div>
  </div>
  <div class="col-md-3">
    <div class="card bg-warning text-white">
      <div class="card-body">
        <div class="d-flex justify-content-between">
          <div>
            <h4>@((Model.TotalAccountsPayable - Model.TotalOverdueAmount).ToString("C"))</h4>
            <p class="mb-0">Current</p>
          </div>
          <div class="align-self-center">
            <i class="fas fa-clock fa-2x"></i>
          </div>
        </div>
        <small>@((Model.TotalUnpaidCount - Model.TotalOverdueCount)) current invoice(s)</small>
      </div>
    </div>
  </div>
  <div class="col-md-3">
    <div class="card bg-info text-white">
      <div class="card-body">
        <div class="d-flex justify-content-between">
          <div>
            <h4>@(Model.TotalOverdueCount > 0 ? (Model.TotalOverdueAmount / Model.TotalOverdueCount).ToString("C") : "$0.00")</h4>
            <p class="mb-0">Avg Overdue</p>
          </div>
          <div class="align-self-center">
            <i class="fas fa-calculator fa-2x"></i>
          </div>
        </div>
        <small>Per overdue invoice</small>
      </div>
    </div>
  </div>
</div>

<!-- Overdue Invoices (Priority) -->
@if (Model.OverdueAccountsPayable.Any())
{
  <div class="card border-danger mb-4">
    <div class="card-header bg-danger text-white">
      <h5><i class="fas fa-exclamation-triangle"></i> Overdue Invoices - Immediate Attention Required</h5>
    </div>
    <div class="card-body p-0">
      <div class="table-responsive">
        <table class="table table-hover mb-0">
          <thead class="table-light">
            <tr>
              <th>
                <input type="checkbox" id="selectAllOverdue" onchange="toggleAllOverdue(this)">
              </th>
              <th>Vendor</th>
              <th>Invoice #</th>
              <th>Invoice Date</th>
              <th>Due Date</th>
              <th class="text-end">Amount</th>
              <th class="text-end">Balance</th>
              <th>Days Overdue</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            @foreach (var ap in Model.OverdueAccountsPayable.OrderByDescending(a => a.DaysOverdue))
            {
              <tr class="table-danger">
                <td>
                  <input type="checkbox" name="selectedInvoices" value="@ap.Id" class="overdue-invoice">
                </td>
                <td>
                  <strong>@ap.Vendor.CompanyName</strong>
                  @if (!string.IsNullOrEmpty(ap.Vendor.ContactPhone))
                  {
                    <br>
              
                    <small class="text-muted">@ap.Vendor.ContactPhone</small>
                  }
                </td>
                <td>
                  <strong>@ap.InvoiceNumber</strong>
                </td>
                <td>@ap.InvoiceDate.ToString("MM/dd/yyyy")</td>
                <td>@ap.DueDate.ToString("MM/dd/yyyy")</td>
                <td class="text-end">@ap.GetFormattedInvoiceAmount()</td>
                <td class="text-end">
                  <strong class="text-danger">@ap.GetFormattedBalance()</strong>
                </td>
                <td>
                  <span class="badge bg-danger">@ap.DaysOverdue days</span>
                </td>
                <td>
                  <div class="btn-group btn-group-sm">
                    <button class="btn btn-success" onclick="payInvoice(@ap.Id, '@ap.GetFormattedBalance()')">
                      <i class="fas fa-credit-card"></i> Pay
                    </button>
                    <button class="btn btn-outline-info" onclick="viewInvoiceDetails(@ap.Id)">
                      <i class="fas fa-eye"></i>
                    </button>
                  </div>
                </td>
              </tr>
            }
          </tbody>
        </table>
      </div>
    </div>
  </div>
}

<!-- Current Unpaid Invoices -->
@if (Model.UnpaidAccountsPayable.Where(ap => !ap.IsOverdue).Any())
{
  <div class="card">
    <div class="card-header">
      <h5><i class="fas fa-file-invoice"></i> Current Unpaid Invoices</h5>
    </div>
    <div class="card-body p-0">
      <div class="table-responsive">
        <table class="table table-hover mb-0">
          <thead class="table-light">
            <tr>
              <th>
                <input type="checkbox" id="selectAllCurrent" onchange="toggleAllCurrent(this)">
              </th>
              <th>Vendor</th>
              <th>Invoice #</th>
              <th>Invoice Date</th>
              <th>Due Date</th>
              <th class="text-end">Amount</th>
              <th class="text-end">Balance</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            @foreach (var ap in Model.UnpaidAccountsPayable.Where(ap => !ap.IsOverdue).OrderBy(a => a.DueDate))
            {
              var daysUntilDue = (ap.DueDate - DateTime.Today).Days;
              var rowClass = daysUntilDue <= 7 ? "table-warning" : "";

              <tr class="@rowClass">
                <td>
                  <input type="checkbox" name="selectedInvoices" value="@ap.Id" class="current-invoice">
                </td>
                <td>
                  <strong>@ap.Vendor.CompanyName</strong>
                  @if (!string.IsNullOrEmpty(ap.Vendor.ContactEmail))
                  {
                    <br>
              
                    <small class="text-muted">@ap.Vendor.ContactEmail</small>
                  }
                </td>
                <td>
                  <strong>@ap.InvoiceNumber</strong>
                </td>
                <td>@ap.InvoiceDate.ToString("MM/dd/yyyy")</td>
                <td>
                  @ap.DueDate.ToString("MM/dd/yyyy")
                  @if (daysUntilDue <= 7 && daysUntilDue > 0)
                  {
                    <br>
              
                    <small class="text-warning">Due in @daysUntilDue days</small>
                  }
                  else if (daysUntilDue == 0)
                  {
                    <br>
              
                    <small class="text-danger">Due Today!</small>
                  }
                </td>
                <td class="text-end">@ap.GetFormattedInvoiceAmount()</td>
                <td class="text-end">
                  <strong>@ap.GetFormattedBalance()</strong>
                </td>
                <td>
                  @if (ap.AmountPaid > 0)
                  {
                    <span class="badge bg-warning">Partial</span>
                  }
                  else
                  {
                    <span class="badge bg-primary">Pending</span>
                  }
                </td>
                <td>
                  <div class="btn-group btn-group-sm">
                    <button class="btn btn-success" onclick="payInvoice(@ap.Id, '@ap.GetFormattedBalance()')">
                      <i class="fas fa-credit-card"></i> Pay
                    </button>
                    <button class="btn btn-outline-info" onclick="viewInvoiceDetails(@ap.Id)">
                      <i class="fas fa-eye"></i>
                    </button>
                  </div>
                </td>
              </tr>
            }
          </tbody>
        </table>
      </div>
    </div>
  </div>
}

@if (!Model.UnpaidAccountsPayable.Any())
{
  <div class="text-center py-5">
    <i class="fas fa-check-circle fa-3x text-success mb-3"></i>
    <h4 class="text-success">No Outstanding Invoices</h4>
    <p class="text-muted">All vendor invoices have been paid. Great job staying on top of your accounts payable!</p>
    <a href="@Url.Action("Index")" class="btn btn-primary">
      <i class="fas fa-arrow-left"></i> Back to Dashboard
    </a>
  </div>
}

<!-- Payment Modal -->
<div class="modal fade" id="paymentModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title"><i class="fas fa-credit-card"></i> Record Payment</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <form id="paymentForm">
        <div class="modal-body">
          <input type="hidden" id="paymentAccountsPayableId" name="accountsPayableId">

          <div class="mb-3">
            <label class="form-label">Payment Amount</label>
            <div class="input-group">
              <span class="input-group-text">$</span>
              <input type="number" step="0.01" class="form-control" id="paymentAmount" name="paymentAmount" required>
            </div>
            <div class="form-text">
              Balance Due: <span id="balanceDue" class="fw-bold"></span>
            </div>
          </div>

          <div class="mb-3">
            <label class="form-label">Payment Date</label>
            <input type="date" class="form-control" id="paymentDate" name="paymentDate" required>
          </div>

          <div class="mb-3">
            <label class="form-label">Payment Method</label>
            <select class="form-select" id="paymentMethod" name="paymentMethod" required>
              <option value="1">Check</option>
              <option value="2">ACH Transfer</option>
              <option value="3">Wire Transfer</option>
              <option value="4">Credit Card</option>
              <option value="5">Cash</option>
            </select>
          </div>

          <div class="mb-3" id="checkNumberDiv">
            <label class="form-label">Check Number</label>
            <input type="text" class="form-control" id="checkNumber" name="checkNumber">
          </div>

          <div class="mb-3">
            <label class="form-label">Notes</label>
            <textarea class="form-control" id="paymentNotes" name="notes" rows="2"></textarea>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-success">
            <i class="fas fa-save"></i> Record Payment
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  // Initialize payment date to today
  document.addEventListener('DOMContentLoaded', function() {
      document.getElementById('paymentDate').value = new Date().toISOString().split('T')[0];

      // Show/hide check number field based on payment method
      document.getElementById('paymentMethod').addEventListener('change', function() {
          const checkDiv = document.getElementById('checkNumberDiv');
          checkDiv.style.display = this.value === '1' ? 'block' : 'none';
      });
  });

  function toggleAllOverdue(checkbox) {
      const overdueCheckboxes = document.querySelectorAll('.overdue-invoice');
      overdueCheckboxes.forEach(cb => cb.checked = checkbox.checked);
  }

  function toggleAllCurrent(checkbox) {
      const currentCheckboxes = document.querySelectorAll('.current-invoice');
      currentCheckboxes.forEach(cb => cb.checked = checkbox.checked);
  }

  function payInvoice(accountsPayableId, balanceAmount) {
      document.getElementById('paymentAccountsPayableId').value = accountsPayableId;
      document.getElementById('paymentAmount').value = parseFloat(balanceAmount.replace(/[$,]/g, ''));
      document.getElementById('balanceDue').textContent = balanceAmount;

      const modal = new bootstrap.Modal(document.getElementById('paymentModal'));
      modal.show();
  }

  function paySelectedInvoices() {
      const selected = document.querySelectorAll('input[name="selectedInvoices"]:checked');
      if (selected.length === 0) {
          alert('Please select at least one invoice to pay.');
          return;
      }

      // For now, just show a message - you'd implement batch payment functionality
      alert(`Selected ${selected.length} invoice(s) for payment. Batch payment functionality would be implemented here.`);
  }

  function viewInvoiceDetails(accountsPayableId) {
      // Navigate to invoice details page
      window.location.href = `@Url.Action("InvoiceDetails")?id=${accountsPayableId}`;
  }

  function exportAP() {
      const form = document.createElement('form');
      form.method = 'GET';
      form.action = '@Url.Action("ExportAccountsPayable")';
      document.body.appendChild(form);
      form.submit();
      document.body.removeChild(form);
  }

  // Handle payment form submission
  document.getElementById('paymentForm').addEventListener('submit', function(e) {
      e.preventDefault();

      const formData = new FormData(this);

      fetch('@Url.Action("RecordPayment")', {
          method: 'POST',
          body: formData,
          headers: {
              'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
          }
      })
      .then(response => response.json())
      .then(data => {
          if (data.success) {
              location.reload(); // Refresh the page to show updated data
          } else {
              alert('Error recording payment: ' + data.message);
          }
      })
      .catch(error => {
          alert('Error recording payment: ' + error.message);
      });
  });
</script>

@Html.AntiForgeryToken()