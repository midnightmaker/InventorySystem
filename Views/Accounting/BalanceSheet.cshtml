@model InventorySystem.ViewModels.Accounting.BalanceSheetViewModel
@{
  ViewData["Title"] = "Balance Sheet";
}

<div class="d-flex justify-content-between align-items-center mb-4">
  <h1><i class="fas fa-building"></i> Balance Sheet</h1>
  <div class="btn-group">
    <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
      <i class="fas fa-arrow-left"></i> Back to Dashboard
    </a>
    <button class="btn btn-success" onclick="exportBalanceSheet()">
      <i class="fas fa-download"></i> Export PDF
    </button>
    <button class="btn btn-outline-success" onclick="exportBalanceSheetExcel()">
      <i class="fas fa-file-excel"></i> Export Excel
    </button>
  </div>
</div>

@if (TempData["ErrorMessage"] != null)
{
  <div class="alert alert-danger alert-dismissible fade show">
    <i class="fas fa-exclamation-circle"></i> @TempData["ErrorMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

<!-- Date Selection -->
<div class="card mb-4">
  <div class="card-header">
    <h5><i class="fas fa-calendar-alt"></i> Report Date</h5>
  </div>
  <div class="card-body">
    <form method="get">
      <div class="row">
        <div class="col-md-4">
          <div class="mb-3">
            <label class="form-label">As of Date</label>
            <input type="date" name="asOfDate" class="form-control"
                   value="@Model.AsOfDate.ToString("yyyy-MM-dd")" />
          </div>
        </div>
        <div class="col-md-4 d-flex align-items-end">
          <button type="submit" class="btn btn-primary mb-3">
            <i class="fas fa-refresh"></i> Update Report
          </button>
        </div>
      </div>
    </form>
  </div>
</div>

<!-- Balance Check Alert -->
@if (!Model.IsBalanced && (Model.CurrentAssets.Any() || Model.CurrentLiabilities.Any()))
{
  <div class="alert alert-danger">
    <i class="fas fa-exclamation-triangle"></i>
    <strong>Balance Sheet Error:</strong>
    Assets (@Model.TotalAssets.ToString("C")) do not equal Liabilities + Equity (@Model.TotalLiabilitiesAndEquity.ToString("C")).
    <br><strong>Difference: @(Model.TotalAssets - Model.TotalLiabilitiesAndEquity).ToString("C")</strong>
    <br><small>Please review your chart of accounts and journal entries.</small>
  </div>
}
else if (Model.IsBalanced && (Model.CurrentAssets.Any() || Model.CurrentLiabilities.Any()))
{
  <div class="alert alert-success">
    <i class="fas fa-check-circle"></i>
    <strong>Balance Sheet Verified:</strong>
    Assets equal Liabilities + Equity (@Model.TotalAssets.ToString("C")).
  </div>
}

<!-- Balance Sheet Report -->
<div class="card">
  <div class="card-header text-center">
    <h4>Balance Sheet</h4>
    <h6 class="text-muted">As of @Model.AsOfDate.ToString("MMMM dd, yyyy")</h6>
  </div>
  <div class="card-body">
    @if (Model.CurrentAssets.Any() || Model.CurrentLiabilities.Any() || Model.EquityAccounts.Any())
    {
      <div class="row">
        <!-- ASSETS COLUMN -->
        <div class="col-md-6">
          <div class="border-end pe-4">
            <h5 class="text-success border-bottom pb-2 mb-3">
              <i class="fas fa-building"></i> ASSETS
            </h5>

            <!-- Current Assets -->
            @if (Model.CurrentAssets.Any())
            {
              <div class="mb-4">
                <h6 class="text-primary">Current Assets</h6>
                <div class="ms-3">
                  @foreach (var asset in Model.CurrentAssets.OrderBy(a => a.AccountCode))
                  {
                    <div class="d-flex justify-content-between align-items-center mb-1">
                      <div>
                        <span class="me-2">@asset.AccountCode</span>
                        <span>@asset.AccountName</span>
                      </div>
                      <span class="text-end">@asset.FormattedBalance</span>
                    </div>
                  }
                  <div class="d-flex justify-content-between align-items-center border-top pt-2 mt-2 fw-bold">
                    <span>Total Current Assets</span>
                    <span class="text-success">@Model.TotalCurrentAssets.ToString("C")</span>
                  </div>
                </div>
              </div>
            }

            <!-- Fixed Assets -->
            @if (Model.FixedAssets.Any())
            {
              <div class="mb-4">
                <h6 class="text-primary">Fixed Assets</h6>
                <div class="ms-3">
                  @foreach (var asset in Model.FixedAssets.OrderBy(a => a.AccountCode))
                  {
                    <div class="d-flex justify-content-between align-items-center mb-1">
                      <div>
                        <span class="me-2">@asset.AccountCode</span>
                        <span>@asset.AccountName</span>
                      </div>
                      <span class="text-end">@asset.FormattedBalance</span>
                    </div>
                  }
                  <div class="d-flex justify-content-between align-items-center border-top pt-2 mt-2 fw-bold">
                    <span>Total Fixed Assets</span>
                    <span class="text-success">@Model.TotalFixedAssets.ToString("C")</span>
                  </div>
                </div>
              </div>
            }

            <!-- Other Assets -->
            @if (Model.OtherAssets.Any())
            {
              <div class="mb-4">
                <h6 class="text-primary">Other Assets</h6>
                <div class="ms-3">
                  @foreach (var asset in Model.OtherAssets.OrderBy(a => a.AccountCode))
                  {
                    <div class="d-flex justify-content-between align-items-center mb-1">
                      <div>
                        <span class="me-2">@asset.AccountCode</span>
                        <span>@asset.AccountName</span>
                      </div>
                      <span class="text-end">@asset.FormattedBalance</span>
                    </div>
                  }
                  <div class="d-flex justify-content-between align-items-center border-top pt-2 mt-2 fw-bold">
                    <span>Total Other Assets</span>
                    <span class="text-success">@Model.OtherAssets.Sum(a => a.Balance).ToString("C")</span>
                  </div>
                </div>
              </div>
            }

            <!-- Total Assets -->
            <div class="bg-success text-white p-3 rounded">
              <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">TOTAL ASSETS</h5>
                <h5 class="mb-0">@Model.TotalAssets.ToString("C")</h5>
              </div>
            </div>
          </div>
        </div>

        <!-- LIABILITIES & EQUITY COLUMN -->
        <div class="col-md-6">
          <div class="ps-4">
            <h5 class="text-danger border-bottom pb-2 mb-3">
              <i class="fas fa-credit-card"></i> LIABILITIES & EQUITY
            </h5>

            <!-- Current Liabilities -->
            @if (Model.CurrentLiabilities.Any())
            {
              <div class="mb-4">
                <h6 class="text-danger">Current Liabilities</h6>
                <div class="ms-3">
                  @foreach (var liability in Model.CurrentLiabilities.OrderBy(l => l.AccountCode))
                  {
                    <div class="d-flex justify-content-between align-items-center mb-1">
                      <div>
                        <span class="me-2">@liability.AccountCode</span>
                        <span>@liability.AccountName</span>
                      </div>
                      <span class="text-end">@liability.FormattedBalance</span>
                    </div>
                  }
                  <div class="d-flex justify-content-between align-items-center border-top pt-2 mt-2 fw-bold">
                    <span>Total Current Liabilities</span>
                    <span class="text-danger">@Model.TotalCurrentLiabilities.ToString("C")</span>
                  </div>
                </div>
              </div>
            }

            <!-- Long Term Liabilities -->
            @if (Model.LongTermLiabilities.Any())
            {
              <div class="mb-4">
                <h6 class="text-danger">Long-Term Liabilities</h6>
                <div class="ms-3">
                  @foreach (var liability in Model.LongTermLiabilities.OrderBy(l => l.AccountCode))
                  {
                    <div class="d-flex justify-content-between align-items-center mb-1">
                      <div>
                        <span class="me-2">@liability.AccountCode</span>
                        <span>@liability.AccountName</span>
                      </div>
                      <span class="text-end">@liability.FormattedBalance</span>
                    </div>
                  }
                  <div class="d-flex justify-content-between align-items-center border-top pt-2 mt-2 fw-bold">
                    <span>Total Long-Term Liabilities</span>
                    <span class="text-danger">@Model.TotalLongTermLiabilities.ToString("C")</span>
                  </div>
                </div>
              </div>
            }

            <!-- Total Liabilities -->
            @if (Model.CurrentLiabilities.Any() || Model.LongTermLiabilities.Any())
            {
              <div class="bg-danger text-white p-2 rounded mb-4">
                <div class="d-flex justify-content-between align-items-center">
                  <strong>TOTAL LIABILITIES</strong>
                  <strong>@Model.TotalLiabilities.ToString("C")</strong>
                </div>
              </div>
            }

            <!-- Equity -->
            @if (Model.EquityAccounts.Any())
            {
              <div class="mb-4">
                <h6 class="text-primary">Owner's Equity</h6>
                <div class="ms-3">
                  @foreach (var equity in Model.EquityAccounts.OrderBy(e => e.AccountCode))
                  {
                    <div class="d-flex justify-content-between align-items-center mb-1">
                      <div>
                        <span class="me-2">@equity.AccountCode</span>
                        <span>@equity.AccountName</span>
                      </div>
                      <span class="text-end">@equity.FormattedBalance</span>
                    </div>
                  }
                  <div class="d-flex justify-content-between align-items-center border-top pt-2 mt-2 fw-bold">
                    <span>Total Equity</span>
                    <span class="text-primary">@Model.TotalEquity.ToString("C")</span>
                  </div>
                </div>
              </div>
            }

            <!-- Total Liabilities & Equity -->
            <div class="bg-primary text-white p-3 rounded">
              <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">TOTAL LIABILITIES & EQUITY</h5>
                <h5 class="mb-0">@Model.TotalLiabilitiesAndEquity.ToString("C")</h5>
              </div>
            </div>
          </div>
        </div>
      </div>
    }
    else
    {
      <div class="text-center py-5">
        <i class="fas fa-building fa-3x text-muted mb-3"></i>
        <h4 class="text-muted">No Account Balances</h4>
        <p class="text-muted">There are no account balances to display for the selected date.</p>
        <div class="mt-3">
          <a href="@Url.Action("ChartOfAccounts")" class="btn btn-primary">
            <i class="fas fa-list"></i> Chart of Accounts
          </a>
          <a href="@Url.Action("GeneralLedger")" class="btn btn-outline-primary">
            <i class="fas fa-book"></i> General Ledger
          </a>
        </div>
      </div>
    }
  </div>
</div>

<!-- Balance Sheet Analysis -->
@if (Model.TotalAssets > 0)
{
  <div class="row mt-4">
    <div class="col-md-4">
      <div class="card text-center h-100">
        <div class="card-body">
          <h5 class="card-title text-success">Total Assets</h5>
          <h3 class="text-success">@Model.TotalAssets.ToString("C")</h3>
          <small class="text-muted">
            Current: @((Model.TotalCurrentAssets / Model.TotalAssets * 100).ToString("F1"))%
            <br>Fixed: @((Model.TotalFixedAssets / Model.TotalAssets * 100).ToString("F1"))%
          </small>
        </div>
      </div>
    </div>
    <div class="col-md-4">
      <div class="card text-center h-100">
        <div class="card-body">
          <h5 class="card-title text-danger">Total Liabilities</h5>
          <h3 class="text-danger">@Model.TotalLiabilities.ToString("C")</h3>
          @if (Model.TotalAssets > 0)
          {
            var debtRatio = (Model.TotalLiabilities / Model.TotalAssets * 100);
            <small class="text-muted">
              Debt Ratio: @debtRatio.ToString("F1")%
              <br>
              @if (debtRatio < 30)
              {
                <span class="text-success">Low Risk</span>
              }
              else if (debtRatio < 50)
              {
                <span class="text-warning">Moderate Risk</span>
              }
              else
              {
                <span class="text-danger">High Risk</span>
              }
            </small>
          }
        </div>
      </div>
    </div>
    <div class="col-md-4">
      <div class="card text-center h-100">
        <div class="card-body">
          <h5 class="card-title text-primary">Owner's Equity</h5>
          <h3 class="text-primary">@Model.TotalEquity.ToString("C")</h3>
          @if (Model.TotalAssets > 0)
          {
            var equityRatio = (Model.TotalEquity / Model.TotalAssets * 100);
            <small class="text-muted">
              Equity Ratio: @equityRatio.ToString("F1")%
              <br>
              @if (equityRatio > 50)
              {
                <span class="text-success">Strong Position</span>
              }
              else if (equityRatio > 30)
              {
                <span class="text-warning">Moderate Position</span>
              }
              else
              {
                <span class="text-danger">Weak Position</span>
              }
            </small>
          }
        </div>
      </div>
    </div>
  </div>

  <!-- Financial Ratios -->
  <div class="card mt-4">
    <div class="card-header">
      <h5><i class="fas fa-calculator"></i> Key Financial Ratios</h5>
    </div>
    <div class="card-body">
      <div class="row">
        <div class="col-md-3">
          <div class="text-center">
            @if (Model.TotalCurrentLiabilities > 0)
            {
              var currentRatio = Model.TotalCurrentAssets / Model.TotalCurrentLiabilities;
              <h4 class="@(currentRatio >= 2 ? "text-success" : currentRatio >= 1 ? "text-warning" : "text-danger")">
                @currentRatio.ToString("F2")
              </h4>
              <small class="text-muted">
                Current Ratio<br>
                (Current Assets ÷ Current Liabilities)
              </small>
            }
            else
            {
              <h4 class="text-success">∞</h4>
              <small class="text-muted">Current Ratio<br>(No Current Liabilities)</small>
            }
          </div>
        </div>
        <div class="col-md-3">
          <div class="text-center">
            @if (Model.TotalAssets > 0)
            {
              var debtToAsset = Model.TotalLiabilities / Model.TotalAssets;
              <h4 class="@(debtToAsset <= 0.3m ? "text-success" : debtToAsset <= 0.5m ? "text-warning" : "text-danger")">
                @(debtToAsset * 100).ToString("F1")%
              </h4>
              <small class="text-muted">
                Debt-to-Asset Ratio<br>
                (Total Debt ÷ Total Assets)
              </small>
            }
          </div>
        </div>
        <div class="col-md-3">
          <div class="text-center">
            @if (Model.TotalLiabilities > 0)
            {
              var debtToEquity = Model.TotalLiabilities / Model.TotalEquity;
              <h4 class="@(debtToEquity <= 1 ? "text-success" : debtToEquity <= 2 ? "text-warning" : "text-danger")">
                @debtToEquity.ToString("F2")
              </h4>
              <small class="text-muted">
                Debt-to-Equity Ratio<br>
                (Total Debt ÷ Total Equity)
              </small>
            }
            else
            {
              <h4 class="text-success">0.00</h4>
              <small class="text-muted">Debt-to-Equity Ratio<br>(No Debt)</small>
            }
          </div>
        </div>
        <div class="col-md-3">
          <div class="text-center">
            @if (Model.TotalAssets > 0 && Model.TotalEquity > 0)
            {
              var equityMultiplier = Model.TotalAssets / Model.TotalEquity;
              <h4 class="text-info">@equityMultiplier.ToString("F2")</h4>
              <small class="text-muted">
                Equity Multiplier<br>
                (Total Assets ÷ Total Equity)
              </small>
            }
          </div>
        </div>
      </div>
    </div>
  </div>
}

<script>
  function exportBalanceSheet() {
      const form = document.createElement('form');
      form.method = 'GET';
      form.action = '@Url.Action("ExportBalanceSheetPDF")';

      const asOfDateInput = document.createElement('input');
      asOfDateInput.type = 'hidden';
      asOfDateInput.name = 'asOfDate';
      asOfDateInput.value = '@Model.AsOfDate.ToString("yyyy-MM-dd")';
      form.appendChild(asOfDateInput);

      document.body.appendChild(form);
      form.submit();
      document.body.removeChild(form);
  }

  function exportBalanceSheetExcel() {
      const form = document.createElement('form');
      form.method = 'GET';
      form.action = '@Url.Action("ExportBalanceSheetExcel")';

      const asOfDateInput = document.createElement('input');
      asOfDateInput.type = 'hidden';
      asOfDateInput.name = 'asOfDate';
      asOfDateInput.value = '@Model.AsOfDate.ToString("yyyy-MM-dd")';
      form.appendChild(asOfDateInput);

      document.body.appendChild(form);
      form.submit();
      document.body.removeChild(form);
  }
</script>

<style>
  .border-end {
    border-right: 1px solid #dee2e6;
  }

  @@media (max-width: 768px) {
    .border-end {
      border-right: none;
      border-bottom: 1px solid #dee2e6;
      margin-bottom: 2rem;
      padding-bottom: 2rem;
    }

    .ps-4 {
      padding-left: 0 !important;
    }

    .pe-4 {
      padding-right: 0 !important;
    }
  }
</style>