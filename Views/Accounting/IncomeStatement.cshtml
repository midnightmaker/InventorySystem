@model InventorySystem.ViewModels.Accounting.IncomeStatementViewModel
@{
  ViewData["Title"] = "Income Statement";
}

<div class="d-flex justify-content-between align-items-center mb-4">
  <h1><i class="fas fa-chart-line"></i> Income Statement</h1>
  <div class="btn-group">
    <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
      <i class="fas fa-arrow-left"></i> Back to Dashboard
    </a>
    <button class="btn btn-success" onclick="exportIncomeStatement()">
      <i class="fas fa-download"></i> Export PDF
    </button>
    <button class="btn btn-outline-success" onclick="exportIncomeStatementExcel()">
      <i class="fas fa-file-excel"></i> Export Excel
    </button>
  </div>
</div>

@if (TempData["ErrorMessage"] != null)
{
  <div class="alert alert-danger alert-dismissible fade show">
    <i class="fas fa-exclamation-circle"></i> @TempData["ErrorMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

<!-- Date Range Selection -->
<div class="card mb-4">
  <div class="card-header">
    <h5><i class="fas fa-calendar-alt"></i> Reporting Period</h5>
  </div>
  <div class="card-body">
    <form method="get">
      <div class="row">
        <div class="col-md-3">
          <div class="mb-3">
            <label class="form-label">Start Date</label>
            <input type="date" name="startDate" class="form-control"
                   value="@Model.StartDate.ToString("yyyy-MM-dd")" />
          </div>
        </div>
        <div class="col-md-3">
          <div class="mb-3">
            <label class="form-label">End Date</label>
            <input type="date" name="endDate" class="form-control"
                   value="@Model.EndDate.ToString("yyyy-MM-dd")" />
          </div>
        </div>
        <div class="col-md-3 d-flex align-items-end">
          <button type="submit" class="btn btn-primary mb-3">
            <i class="fas fa-refresh"></i> Update Report
          </button>
        </div>
        <div class="col-md-3">
          <div class="mb-3">
            <label class="form-label">Quick Periods</label>
            <select class="form-select" onchange="setQuickPeriod(this.value)">
              <option value="">Select Period</option>
              <option value="mtd">Month to Date</option>
              <option value="qtd">Quarter to Date</option>
              <option value="ytd">Year to Date</option>
              <option value="lastmonth">Last Month</option>
              <option value="lastquarter">Last Quarter</option>
              <option value="lastyear">Last Year</option>
            </select>
          </div>
        </div>
      </div>
    </form>
  </div>
</div>

<!-- Income Statement Report -->
<div class="card">
  <div class="card-header text-center">
    <h4>Income Statement</h4>
    <h6 class="text-muted">@Model.PeriodDisplay</h6>
  </div>
  <div class="card-body">
    @if (Model.RevenueAccounts.Any() || Model.COGSAccounts.Any() || Model.OperatingExpenses.Any())
    {
      <div class="table-responsive">
        <table class="table table-borderless">
          <tbody>
            <!-- REVENUE SECTION -->
            <tr class="table-success">
              <td colspan="2">
                <h5 class="mb-0">
                  <i class="fas fa-arrow-up"></i> REVENUE
                </h5>
              </td>
            </tr>
            @if (Model.RevenueAccounts.Any())
            {
              @foreach (var revenue in Model.RevenueAccounts.OrderBy(r => r.AccountCode))
              {
                <tr>
                  <td class="ps-4">
                    <span class="me-2 text-muted">@revenue.AccountCode</span>
                    @revenue.AccountName
                  </td>
                  <td class="text-end">@revenue.FormattedAmount</td>
                </tr>
              }
            }
            else
            {
              <tr>
                <td class="ps-4 text-muted">No revenue recorded</td>
                <td class="text-end text-muted">$0.00</td>
              </tr>
            }
            <tr class="border-top fw-bold">
              <td class="ps-4">Total Revenue</td>
              <td class="text-end text-success">@Model.TotalRevenue.ToString("C")</td>
            </tr>

            <!-- COST OF GOODS SOLD SECTION -->
            <tr class="table-warning">
              <td colspan="2" class="pt-4">
                <h5 class="mb-0">
                  <i class="fas fa-industry"></i> COST OF GOODS SOLD
                </h5>
              </td>
            </tr>
            @if (Model.COGSAccounts.Any())
            {
              @foreach (var cogs in Model.COGSAccounts.OrderBy(c => c.AccountCode))
              {
                <tr>
                  <td class="ps-4">
                    <span class="me-2 text-muted">@cogs.AccountCode</span>
                    @cogs.AccountName
                  </td>
                  <td class="text-end">@cogs.FormattedAmount</td>
                </tr>
              }
            }
            else
            {
              <tr>
                <td class="ps-4 text-muted">No cost of goods sold recorded</td>
                <td class="text-end text-muted">$0.00</td>
              </tr>
            }
            <tr class="border-top fw-bold">
              <td class="ps-4">Total Cost of Goods Sold</td>
              <td class="text-end text-warning">@Model.TotalCOGS.ToString("C")</td>
            </tr>

            <!-- GROSS PROFIT -->
            <tr class="table-info">
              <td class="fw-bold">GROSS PROFIT</td>
              <td class="text-end fw-bold text-info">
                @Model.GrossProfit.ToString("C")
                <small class="d-block">(@Model.GrossProfitMargin.ToString("F1")% margin)</small>
              </td>
            </tr>

            <!-- OPERATING EXPENSES SECTION -->
            <tr class="table-danger">
              <td colspan="2" class="pt-4">
                <h5 class="mb-0">
                  <i class="fas fa-arrow-down"></i> OPERATING EXPENSES
                </h5>
              </td>
            </tr>
            @if (Model.OperatingExpenses.Any())
            {
              @foreach (var expense in Model.OperatingExpenses.OrderBy(e => e.AccountCode))
              {
                <tr>
                  <td class="ps-4">
                    <span class="me-2 text-muted">@expense.AccountCode</span>
                    @expense.AccountName
                  </td>
                  <td class="text-end">@expense.FormattedAmount</td>
                </tr>
              }
            }
            else
            {
              <tr>
                <td class="ps-4 text-muted">No operating expenses recorded</td>
                <td class="text-end text-muted">$0.00</td>
              </tr>
            }
            <tr class="border-top fw-bold">
              <td class="ps-4">Total Operating Expenses</td>
              <td class="text-end text-danger">@Model.TotalOperatingExpenses.ToString("C")</td>
            </tr>

            <!-- OTHER EXPENSES SECTION -->
            @if (Model.OtherExpenses.Any())
            {
              <tr class="table-secondary">
                <td colspan="2" class="pt-4">
                  <h5 class="mb-0">
                    <i class="fas fa-minus-circle"></i> OTHER EXPENSES
                  </h5>
                </td>
              </tr>
              @foreach (var otherExpense in Model.OtherExpenses.OrderBy(e => e.AccountCode))
              {
                <tr>
                  <td class="ps-4">
                    <span class="me-2 text-muted">@otherExpense.AccountCode</span>
                    @otherExpense.AccountName
                  </td>
                  <td class="text-end">@otherExpense.FormattedAmount</td>
                </tr>
              }
              <tr class="border-top fw-bold">
                <td class="ps-4">Total Other Expenses</td>
                <td class="text-end text-secondary">@Model.TotalOtherExpenses.ToString("C")</td>
              </tr>
            }

            <!-- NET INCOME -->
            <tr class="bg-primary text-white">
              <td class="fw-bold p-3">
                <h5 class="mb-0">NET INCOME</h5>
              </td>
              <td class="text-end fw-bold p-3">
                <h5 class="mb-0">
                  @Model.NetIncome.ToString("C")
                  <small class="d-block">(@Model.NetProfitMargin.ToString("F1")% margin)</small>
                </h5>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    }
    else
    {
      <div class="text-center py-5">
        <i class="fas fa-chart-line fa-3x text-muted mb-3"></i>
        <h4 class="text-muted">No Financial Data</h4>
        <p class="text-muted">There is no revenue or expense data for the selected period.</p>
        <div class="mt-3">
          <a href="@Url.Action("GeneralLedger")" class="btn btn-primary">
            <i class="fas fa-book"></i> View General Ledger
          </a>
          <a href="@Url.Action("ChartOfAccounts")" class="btn btn-outline-primary">
            <i class="fas fa-list"></i> Chart of Accounts
          </a>
        </div>
      </div>
    }
  </div>
</div>

<!-- Financial Analysis -->
@if (Model.TotalRevenue > 0 || Model.TotalOperatingExpenses > 0)
{
  <div class="row mt-4">
    <div class="col-lg-8">
      <div class="card h-100">
        <div class="card-header">
          <h5><i class="fas fa-analytics"></i> Financial Performance Analysis</h5>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-md-6">
              <h6 class="text-success">Revenue Breakdown</h6>
              @if (Model.RevenueAccounts.Any())
              {
                @foreach (var revenue in Model.RevenueAccounts.OrderByDescending(r => r.Amount))
                {
                  var percentage = Model.TotalRevenue > 0 ? (revenue.Amount / Model.TotalRevenue * 100) : 0;
                  <div class="d-flex justify-content-between align-items-center mb-2">
                    <small>@revenue.AccountName</small>
                    <div class="text-end">
                      <small class="fw-bold">@revenue.FormattedAmount</small>
                      <small class="text-muted d-block">@percentage.ToString("F1")%</small>
                    </div>
                  </div>
                  <div class="progress mb-2" style="height: 6px;">
                    <div class="progress-bar bg-success" style="width: @percentage%"></div>
                  </div>
                }
              }
              else
              {
                <small class="text-muted">No revenue data available</small>
              }
            </div>

            <div class="col-md-6">
              <h6 class="text-danger">Expense Breakdown</h6>
              @{
                var allExpenses = Model.OperatingExpenses.Concat(Model.OtherExpenses).OrderByDescending(e => e.Amount);
                var totalExpenses = Model.TotalOperatingExpenses + Model.TotalOtherExpenses;
              }
              @if (allExpenses.Any())
              {
                @foreach (var expense in allExpenses.Take(6))
                {
                  var percentage = totalExpenses > 0 ? (expense.Amount / totalExpenses * 100) : 0;
                  <div class="d-flex justify-content-between align-items-center mb-2">
                    <small>@expense.AccountName</small>
                    <div class="text-end">
                      <small class="fw-bold">@expense.FormattedAmount</small>
                      <small class="text-muted d-block">@percentage.ToString("F1")%</small>
                    </div>
                  </div>
                  <div class="progress mb-2" style="height: 6px;">
                    <div class="progress-bar bg-danger" style="width: @percentage%"></div>
                  </div>
                }
                @if (allExpenses.Count() > 6)
                {
                  <small class="text-muted">+ @(allExpenses.Count() - 6) more expense categories</small>
                }
              }
              else
              {
                <small class="text-muted">No expense data available</small>
              }
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="col-lg-4">
      <div class="card h-100">
        <div class="card-header">
          <h5><i class="fas fa-calculator"></i> Key Metrics</h5>
        </div>
        <div class="card-body">
          <div class="row g-3">
            <div class="col-6">
              <div class="text-center p-2 border rounded">
                <h4 class="text-success mb-1">@Model.TotalRevenue.ToString("C0")</h4>
                <small class="text-muted">Total Revenue</small>
              </div>
            </div>
            <div class="col-6">
              <div class="text-center p-2 border rounded">
                <h4 class="text-info mb-1">@Model.GrossProfit.ToString("C0")</h4>
                <small class="text-muted">Gross Profit</small>
              </div>
            </div>
            <div class="col-6">
              <div class="text-center p-2 border rounded">
                <h4 class="text-danger mb-1">@(Model.TotalOperatingExpenses + Model.TotalOtherExpenses).ToString("C0")</h4>
                <small class="text-muted">Total Expenses</small>
              </div>
            </div>
            <div class="col-6">
              <div class="text-center p-2 border rounded">
                <h4 class="@(Model.NetIncome >= 0 ? "text-primary" : "text-danger") mb-1">
                  @Model.NetIncome.ToString("C0")
                </h4>
                <small class="text-muted">Net Income</small>
              </div>
            </div>
          </div>

          <!-- Profitability Ratios -->
          <div class="mt-4">
            <h6 class="text-muted mb-3">Profitability Ratios</h6>
            <div class="d-flex justify-content-between mb-2">
              <small>Gross Margin:</small>
              <small class="fw-bold @(Model.GrossProfitMargin >= 50 ? "text-success" : Model.GrossProfitMargin >= 30 ? "text-warning" : "text-danger")">
                @Model.GrossProfitMargin.ToString("F1")%
              </small>
            </div>
            <div class="d-flex justify-content-between mb-2">
              <small>Net Margin:</small>
              <small class="fw-bold @(Model.NetProfitMargin >= 15 ? "text-success" : Model.NetProfitMargin >= 5 ? "text-warning" : "text-danger")">
                @Model.NetProfitMargin.ToString("F1")%
              </small>
            </div>
            @if (Model.TotalRevenue > 0)
            {
              var expenseRatio = ((Model.TotalOperatingExpenses + Model.TotalOtherExpenses) / Model.TotalRevenue * 100);
              <div class="d-flex justify-content-between mb-2">
                <small>Expense Ratio:</small>
                <small class="fw-bold @(expenseRatio <= 70 ? "text-success" : expenseRatio <= 85 ? "text-warning" : "text-danger")">
                  @expenseRatio.ToString("F1")%
                </small>
              </div>
            }
          </div>

          <!-- Performance Indicators -->
          <div class="mt-3">
            <h6 class="text-muted mb-2">Performance</h6>
            @if (Model.NetIncome > 0)
            {
              <span class="badge bg-success">Profitable</span>
            }
            else if (Model.NetIncome == 0)
            {
              <span class="badge bg-warning">Break Even</span>
            }
            else
            {
              <span class="badge bg-danger">Loss</span>
            }

            @if (Model.GrossProfitMargin >= 50)
            {
              <span class="badge bg-success">Excellent Margins</span>
            }
            else if (Model.GrossProfitMargin >= 30)
            {
              <span class="badge bg-info">Good Margins</span>
            }
            else if (Model.GrossProfitMargin >= 15)
            {
              <span class="badge bg-warning">Fair Margins</span>
            }
            else if (Model.GrossProfitMargin > 0)
            {
              <span class="badge bg-danger">Low Margins</span>
            }
          </div>
        </div>
      </div>
    </div>
  </div>
}

<script>
  function exportIncomeStatement() {
      const form = document.createElement('form');
      form.method = 'GET';
      form.action = '@Url.Action("ExportIncomeStatementPDF")';

      const startDateInput = document.createElement('input');
      startDateInput.type = 'hidden';
      startDateInput.name = 'startDate';
      startDateInput.value = '@Model.StartDate.ToString("yyyy-MM-dd")';
      form.appendChild(startDateInput);

      const endDateInput = document.createElement('input');
      endDateInput.type = 'hidden';
      endDateInput.name = 'endDate';
      endDateInput.value = '@Model.EndDate.ToString("yyyy-MM-dd")';
      form.appendChild(endDateInput);

      document.body.appendChild(form);
      form.submit();
      document.body.removeChild(form);
  }

  function exportIncomeStatementExcel() {
      const form = document.createElement('form');
      form.method = 'GET';
      form.action = '@Url.Action("ExportIncomeStatementExcel")';

      const startDateInput = document.createElement('input');
      startDateInput.type = 'hidden';
      startDateInput.name = 'startDate';
      startDateInput.value = '@Model.StartDate.ToString("yyyy-MM-dd")';
      form.appendChild(startDateInput);

      const endDateInput = document.createElement('input');
      endDateInput.type = 'hidden';
      endDateInput.name = 'endDate';
      endDateInput.value = '@Model.EndDate.ToString("yyyy-MM-dd")';
      form.appendChild(endDateInput);

      document.body.appendChild(form);
      form.submit();
      document.body.removeChild(form);
  }

  function setQuickPeriod(period) {
      if (!period) return;

      const today = new Date();
      let startDate, endDate = today;

      switch(period) {
          case 'mtd':
              startDate = new Date(today.getFullYear(), today.getMonth(), 1);
              break;
          case 'qtd':
              const quarter = Math.floor(today.getMonth() / 3);
              startDate = new Date(today.getFullYear(), quarter * 3, 1);
              break;
          case 'ytd':
              startDate = new Date(today.getFullYear(), 0, 1);
              break;
          case 'lastmonth':
              startDate = new Date(today.getFullYear(), today.getMonth() - 1, 1);
              endDate = new Date(today.getFullYear(), today.getMonth(), 0);
              break;
          case 'lastquarter':
              const lastQuarter = Math.floor(today.getMonth() / 3) - 1;
              startDate = new Date(today.getFullYear(), lastQuarter * 3, 1);
              endDate = new Date(today.getFullYear(), (lastQuarter + 1) * 3, 0);
              break;
          case 'lastyear':
              startDate = new Date(today.getFullYear() - 1, 0, 1);
              endDate = new Date(today.getFullYear() - 1, 11, 31);
              break;
      }

      document.querySelector('input[name="startDate"]').value = startDate.toISOString().split('T')[0];
      document.querySelector('input[name="endDate"]').value = endDate.toISOString().split('T')[0];
  }
</script>