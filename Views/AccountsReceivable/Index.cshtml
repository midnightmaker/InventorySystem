@model InventorySystem.ViewModels.AccountsReceivableDashboardViewModel
@{
    ViewData["Title"] = "Accounts Receivable Dashboard";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1><i class="fas fa-file-invoice-dollar"></i> Accounts Receivable</h1>
    <div class="btn-group">
        <a href="@Url.Action("AgingReport")" class="btn btn-primary">
            <i class="fas fa-chart-pie"></i> Aging Report
        </a>
        <a href="@Url.Action("Collections")" class="btn btn-warning">
            <i class="fas fa-phone"></i> Collections
        </a>
        <a href="@Url.Action("CustomerStatements")" class="btn btn-info">
            <i class="fas fa-file-invoice"></i> Statements
        </a>
        <a href="@Url.Action("Reports", "AccountsReceivable")" class="btn btn-outline-secondary">
            <i class="fas fa-chart-bar"></i> Reports
        </a>
    </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show">
        <i class="fas fa-check-circle"></i> @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show">
        <i class="fas fa-exclamation-circle"></i> @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Key Metrics Cards -->
<!-- Key Metrics Cards -->
<div class="row mb-4">
  <div class="col-xl-3 col-md-6 mb-3">
    <div class="card border-left-primary shadow h-100">
      <div class="card-body">
        <div class="row no-gutters align-items-center">
          <div class="col mr-2">
            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
              Total A/R
            </div>
            <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.TotalAccountsReceivable.ToString("C")</div>
            <div class="text-xs text-gray-600">@Model.UnpaidInvoiceCount unpaid invoices</div>
          </div>
          <div class="col-auto">
            <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="col-xl-3 col-md-6 mb-3">
    <div class="card border-left-danger shadow h-100">
      <div class="card-body">
        <div class="row no-gutters align-items-center">
          <div class="col mr-2">
            <div class="text-xs font-weight-bold text-danger text-uppercase mb-1">
              Overdue Amount
            </div>
            <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.TotalOverdue.ToString("C")</div>
            <div class="text-xs text-gray-600">@Model.OverdueInvoiceCount overdue invoices</div>
          </div>
          <div class="col-auto">
            <i class="fas fa-exclamation-triangle fa-2x text-gray-300"></i>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="col-xl-3 col-md-6 mb-3">
    <div class="card border-left-success shadow h-100">
      <div class="card-body">
        <div class="row no-gutters align-items-center">
          <div class="col mr-2">
            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
              Total Collected
            </div>
            <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.CurrentAmount.ToString("C")</div>
            <div class="text-xs text-gray-600">This period</div>
          </div>
          <div class="col-auto">
            <i class="fas fa-money-bill-wave fa-2x text-gray-300"></i>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="col-xl-3 col-md-6 mb-3">
    <div class="card border-left-info shadow h-100">
      <div class="card-body">
        <div class="row no-gutters align-items-center">
          <div class="col mr-2">
            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
              Unpaid Invoice Count
            </div>
            <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.UnpaidInvoiceCount</div>
            <div class="text-xs text-gray-600">30-day average</div>
          </div>
          <div class="col-auto">
            <i class="fas fa-chart-line fa-2x text-gray-300"></i>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Aging Analysis -->
<div class="row mb-4">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-chart-pie"></i> Accounts Receivable Aging</h5>
            </div>
            <div class="card-body">
                <canvas id="agingChart" height="120"></canvas>
                
                <div class="row mt-4">
                    <div class="col text-center">
                        <h6 class="text-success">Current</h6>
                        <h4>@Model.CurrentAmount.ToString("C")</h4>
                        <small class="text-muted">0-30 days</small>
                    </div>
                    <div class="col text-center">
                        <h6 class="text-warning">1-30 Days</h6>
                        <h4>@Model.Days1To30Amount.ToString("C")</h4>
                        <small class="text-muted">31-60 days</small>
                    </div>
                    <div class="col text-center">
                        <h6 class="text-orange">31-60 Days</h6>
                        <h4>@Model.Days31To60Amount.ToString("C")</h4>
                        <small class="text-muted">61-90 days</small>
                    </div>
                    <div class="col text-center">
                        <h6 class="text-danger">61-90 Days</h6>
                        <h4>@Model.Days61To90Amount.ToString("C")</h4>
                        <small class="text-muted">91+ days</small>
                    </div>
                    <div class="col text-center">
                        <h6 class="text-dark">90+ Days</h6>
                        <h4>@Model.Over90DaysAmount.ToString("C")</h4>
                        <small class="text-muted">Very overdue</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-tachometer-alt"></i> Collection Metrics</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <div class="d-flex justify-content-between">
                        <span>Average Collection Period</span>
                        <strong>@Model.AverageCollectionPeriod.ToString("F0") days</strong>
                    </div>
                    <div class="progress">
                        <div class="progress-bar bg-info" style="width: @(Math.Min(Model.AverageCollectionPeriod / 60 * 100, 100))%"></div>
                    </div>
                    <small class="text-muted">Target: 30 days</small>
                </div>
                
                <div class="mb-3">
                    <div class="d-flex justify-content-between">
                        <span>Overdue Rate</span>
                        <strong>@Model.OverduePercentage.ToString("F1")%</strong>
                    </div>
                    <div class="progress">
                        <div class="progress-bar @(Model.OverduePercentage > 20 ? "bg-danger" : Model.OverduePercentage > 10 ? "bg-warning" : "bg-success")" 
                             style="width: @(Math.Min(Model.OverduePercentage, 100))%"></div>
                    </div>
                    <small class="text-muted">Target: < 5%</small>
                </div>

                <hr>
                
                <div class="text-center">
                    <a href="@Url.Action("Collections")" class="btn btn-warning w-100">
                        <i class="fas fa-phone"></i> Manage Collections
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Recent Activity and Top Balances -->
<div class="row mb-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-exclamation-triangle"></i> Recent Overdue Invoices</h5>
            </div>
            <div class="card-body">
                @if (Model.RecentOverdueInvoices.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Invoice</th>
                                    <th>Customer</th>
                                    <th>Amount</th>
                                    <th>Days Overdue</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var invoice in Model.RecentOverdueInvoices)
                                {
                                    <tr>
                                        <td>
                                            <a href="/Sales/Details/@invoice.Id" class="text-decoration-none">
                                                @invoice.SaleNumber
                                            </a>
                                        </td>
                                        <td>
                                            @if (invoice.Customer != null)
                                            {
                                                <a href="/Customers/Details/@invoice.Customer.Id" class="text-decoration-none">
                                                    @invoice.Customer.CustomerName
                                                </a>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Unknown</span>
                                            }
                                        </td>
                                        <td>@invoice.TotalAmount.ToString("C")</td>
                                        <td>
                                            <span class="badge bg-@(invoice.DaysOverdue > 30 ? "danger" : "warning")">
                                                @invoice.DaysOverdue days
                                            </span>
                                        </td>
                                        <td>
                                            <div class="btn-group btn-group-sm">
                                                <a href="/Sales/InvoiceReport?saleId=@invoice.Id" class="btn btn-outline-primary" title="View Invoice">
                                                    <i class="fas fa-file-invoice"></i>
                                                </a>
                                                @if (invoice.Customer != null)
                                                {
                                                    <a href="mailto:@invoice.Customer.Email?subject=Payment Reminder - Invoice @invoice.SaleNumber" 
                                                       class="btn btn-outline-warning" title="Send Email">
                                                        <i class="fas fa-envelope"></i>
                                                    </a>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-3">
                        <i class="fas fa-check-circle fa-2x text-success mb-2"></i>
                        <p class="text-muted">No overdue invoices!</p>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-users"></i> Top Customer Balances</h5>
            </div>
            <div class="card-body">
                @if (Model.TopCustomerBalances.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Customer</th>
                                    <th>Outstanding</th>
                                    <th>Credit Limit</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var customer in Model.TopCustomerBalances)
                                {
                                    <tr class="@(customer.OutstandingBalance > customer.CreditLimit && customer.CreditLimit > 0 ? "table-danger" : "")">
                                        <td>
                                            <a href="/Customers/Details/@customer.Id" class="text-decoration-none">
                                                @customer.CustomerName
                                            </a>
                                            @if (customer.OutstandingBalance > customer.CreditLimit && customer.CreditLimit > 0)
                                            {
                                                <br><small class="text-danger">Over credit limit!</small>
                                            }
                                        </td>
                                        <td>
                                            <strong class="text-warning">@customer.OutstandingBalance.ToString("C")</strong>
                                        </td>
                                        <td>
                                            @if (customer.CreditLimit > 0)
                                            {
                                                @customer.CreditLimit.ToString("C")
                                            }
                                            else
                                            {
                                                <span class="text-muted">No limit</span>
                                            }
                                        </td>
                                        <td>
                                            <div class="btn-group btn-group-sm">
                                                <a href="@Url.Action("CustomerStatement", new { id = customer.Id })" 
                                                   class="btn btn-outline-info" title="View Statement">
                                                    <i class="fas fa-file-invoice"></i>
                                                </a>
                                                <a href="mailto:@customer.Email?subject=Account Statement" 
                                                   class="btn btn-outline-primary" title="Email Statement">
                                                    <i class="fas fa-envelope"></i>
                                                </a>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-3">
                        <i class="fas fa-info-circle fa-2x text-muted mb-2"></i>
                        <p class="text-muted">No customer balances to display</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Quick Actions -->
<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-bolt"></i> Quick Actions</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <a href="@Url.Action("AgingReport")" class="btn btn-outline-primary w-100 mb-2">
                            <i class="fas fa-chart-pie"></i><br>
                            View Aging Report
                        </a>
                    </div>
                    <div class="col-md-3">
                        <a href="@Url.Action("Collections")" class="btn btn-outline-warning w-100 mb-2">
                            <i class="fas fa-phone"></i><br>
                            Manage Collections
                        </a>
                    </div>
                    <div class="col-md-3">
                        <a href="@Url.Action("CustomerStatements")" class="btn btn-outline-info w-100 mb-2">
                            <i class="fas fa-file-invoice"></i><br>
                            Customer Statements
                        </a>
                    </div>
                    <div class="col-md-3">
                        <a href="/Sales/PastDueReport" class="btn btn-outline-danger w-100 mb-2">
                            <i class="fas fa-exclamation-triangle"></i><br>
                            Past Due Report
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    try {
        // Aging Chart - with enhanced no-data handling
        const ctx = document.getElementById('agingChart');
        
        if (!ctx) {
            console.warn('Aging chart canvas element not found');
            return;
        }

        const chartData = [
            @Model.CurrentAmount,
            @Model.Days1To30Amount,
            @Model.Days31To60Amount,
            @Model.Days61To90Amount,
            @Model.Over90DaysAmount
        ];

        console.log('Chart data:', chartData);

        // Enhanced validation to handle no-data scenarios
        const isValidData = chartData.every(value => 
            typeof value === 'number' && 
            isFinite(value) && 
            !isNaN(value) && 
            value >= 0
        );

        const hasData = chartData.some(value => value > 0);

        if (!isValidData || !hasData) {
            console.warn('No valid data or all values are zero - showing no data message');
            
            // Hide the canvas and show a meaningful message
            ctx.style.display = 'none';
            const noDataMsg = document.createElement('div');
            noDataMsg.className = 'alert alert-info text-center';
            noDataMsg.innerHTML = `
                <i class="fas fa-info-circle fa-2x mb-2"></i>
                <h6>No Accounts Receivable Data</h6>
                <p class="mb-0">There are currently no unpaid invoices to display in the aging chart.</p>
                <small class="text-muted">This is actually good news - all invoices are paid!</small>
            `;
            ctx.parentNode.replaceChild(noDataMsg, ctx);
            return;
        }

        // For very small amounts, add a minimum value to prevent rendering issues
        const processedData = chartData.map(value => Math.max(value, 0.01));
        const totalValue = processedData.reduce((a, b) => a + b, 0);

        // Ensure we have a reasonable total
        if (totalValue < 0.01) {
            console.warn('Total value too small for chart rendering');
            ctx.style.display = 'none';
            const minDataMsg = document.createElement('div');
            minDataMsg.className = 'alert alert-info text-center';
            minDataMsg.innerHTML = `
                <i class="fas fa-chart-pie fa-2x mb-2 text-muted"></i>
                <h6>Minimal A/R Data</h6>
                <p class="mb-0">Account receivable amounts are too small to display meaningfully in the chart.</p>
            `;
            ctx.parentNode.replaceChild(minDataMsg, ctx);
            return;
        }

        // Create chart with timeout protection
        const chartTimeout = setTimeout(() => {
            console.error('Chart rendering timed out - preventing infinite loop');
            ctx.style.display = 'none';
            const timeoutMsg = document.createElement('div');
            timeoutMsg.className = 'alert alert-warning text-center';
            timeoutMsg.innerHTML = '<i class="fas fa-exclamation-triangle"></i> Chart loading timed out. Please refresh the page.';
            ctx.parentNode.replaceChild(timeoutMsg, ctx);
        }, 5000);

        const chart = new Chart(ctx.getContext('2d'), {
            type: 'doughnut',
            data: {
                labels: ['Current (0-30)', '1-30 Days', '31-60 Days', '61-90 Days', '90+ Days'],
                datasets: [{
                    data: processedData,
                    backgroundColor: [
                        '#28a745', // green - current
                        '#ffc107', // yellow - 1-30
                        '#fd7e14', // orange - 31-60
                        '#dc3545', // red - 61-90
                        '#6c757d'  // gray - 90+
                    ],
                    borderWidth: 2,
                    borderColor: '#fff',
                    // Prevent animation issues with small values
                    circumference: 360,
                    rotation: 0
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                animation: {
                    duration: 1000,
                    easing: 'easeOutQuart',
                    onComplete: function() {
                        clearTimeout(chartTimeout);
                        console.log('Chart rendered successfully');
                    },
                    onProgress: function(animation) {
                        // Prevent infinite animation loops
                        if (animation.currentStep > animation.numSteps + 10) {
                            console.warn('Animation taking too long, stopping');
                            animation.stop();
                            clearTimeout(chartTimeout);
                        }
                    }
                },
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            padding: 20,
                            usePointStyle: true,
                            generateLabels: function(chart) {
                                const original = Chart.defaults.plugins.legend.labels.generateLabels;
                                const labels = original.call(this, chart);
                                
                                // Only show labels for non-zero values
                                return labels.filter((label, index) => {
                                    return chartData[index] > 0;
                                });
                            }
                        }
                    },
                    tooltip: {
                        enabled: true,
                        callbacks: {
                            label: function(context) {
                                try {
                                    const value = chartData[context.dataIndex]; // Use original data
                                    const percentage = totalValue > 0 ? ((value / totalValue) * 100).toFixed(1) : 0;
                                    return context.label + ': $' + value.toLocaleString() + ' (' + percentage + '%)';
                                } catch (err) {
                                    console.warn('Error in tooltip callback:', err);
                                    return context.label + ': $' + context.parsed.toLocaleString();
                                }
                            }
                        }
                    }
                },
                // Additional safeguards
                cutout: '50%',
                radius: '90%'
            }
        });

        // Clear timeout on successful creation
        clearTimeout(chartTimeout);
        console.log('Aging chart initialized successfully');

    } catch (error) {
        console.error('Error initializing aging chart:', error);
        
        // Replace chart with error message
        const ctx = document.getElementById('agingChart');
        if (ctx) {
            const errorMsg = document.createElement('div');
            errorMsg.className = 'alert alert-danger text-center';
            errorMsg.innerHTML = '<i class="fas fa-exclamation-triangle"></i> Unable to load chart. Please refresh the page.';
            ctx.parentNode.replaceChild(errorMsg, ctx);
        }
    }
});
</script>
}

<style>
.text-orange {
    color: #fd7e14 !important;
}

.card:hover {
    transform: translateY(-2px);
    transition: transform 0.2s ease;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.progress {
    height: 8px;
}

.btn-outline-primary:hover,
.btn-outline-warning:hover,
.btn-outline-info:hover,
.btn-outline-danger:hover {
    transform: translateY(-1px);
}
</style>