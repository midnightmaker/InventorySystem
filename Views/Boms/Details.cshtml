@model InventorySystem.Models.Bom
@using System.IO
@{
  ViewData["Title"] = "BOM Details";
  var totalCost = ViewBag.TotalCost as decimal? ?? 0;
}

<div class="d-flex justify-content-between align-items-center mb-4">
  <div class="d-flex align-items-center">
    <h1 class="me-3"><i class="fas fa-layer-group"></i> @Model.BomNumber</h1>
    <!-- Version Dropdown -->
    @if (ViewBag.BomVersions != null)
    {
      @await Html.PartialAsync("_VersionDropdown", ViewBag.BomVersions, new ViewDataDictionary(ViewData)
      {
      ["CurrentVersion"] = Model.Version,
        ["EntityType"] = "Boms",
        ["EntityId"] = Model.BaseBomId ?? Model.Id
        })
        }
  </div>
  <div class="btn-group">
    @if (Model.IsCurrentVersion)
    {
      <a href="/Boms/Edit/@Model.Id" class="btn btn-outline-primary">
        <i class="fas fa-edit"></i> Edit
      </a>
    }
    <a href="/Boms/CostReport/@Model.Id" class="btn btn-outline-info">
      <i class="fas fa-dollar-sign"></i> Cost Report
    </a>
    <!-- Create New Version Button -->
    <button type="button" class="btn btn-outline-warning" onclick="showCreateVersionModal('BOM', @(Model.BaseBomId ?? Model.Id))">
      <i class="fas fa-code-branch"></i> New Version
    </button>
  </div>
</div>

<!-- Include pending change orders alert if any exist -->
@if (ViewBag.PendingChangeOrders != null)
{
  @await Html.PartialAsync("_PendingChangeOrdersAlert", (IEnumerable<InventorySystem.Models.ChangeOrder>)ViewBag.PendingChangeOrders)
}

@if (TempData["SuccessMessage"] != null)
{
  <div class="alert alert-success alert-dismissible fade show">
    @TempData["SuccessMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

@if (TempData["ErrorMessage"] != null)
{
  <div class="alert alert-danger alert-dismissible fade show">
    @TempData["ErrorMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

<div class="row">
  <div class="col-md-8">
    <div class="card">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h5><i class="fas fa-info-circle"></i> BOM Details</h5>
        <!-- Version Status Badge -->
        @if (Model.IsCurrentVersion)
        {
          <span class="badge bg-success">Current Version</span>
        }
        else
        {
          <span class="badge bg-secondary">Historical Version</span>
        }
      </div>
      <div class="card-body">
        <dl class="row">
          <dt class="col-sm-3">Description:</dt>
          <dd class="col-sm-9">@Model.Description</dd>

          <!-- Version Information -->
          <dt class="col-sm-3">Version:</dt>
          <dd class="col-sm-9">
            <strong>@Model.Version</strong>
            @if (!Model.IsCurrentVersion)
            {
              <small class="text-muted">(Historical)</small>
            }
          </dd>

          @if (Model.CreatedFromChangeOrder != null)
          {
            <dt class="col-sm-3">Change Order:</dt>
            <dd class="col-sm-9">
              <a href="/ChangeOrders/Details/@Model.CreatedFromChangeOrderId" class="text-decoration-none">
                @Model.CreatedFromChangeOrder.ChangeOrderNumber
              </a>
            </dd>
          }

          @if (!string.IsNullOrEmpty(Model.AssemblyPartNumber))
          {
            <dt class="col-sm-3">Assembly P/N:</dt>
            <dd class="col-sm-9">@Model.AssemblyPartNumber</dd>
          }

          <dt class="col-sm-3">Components:</dt>
          <dd class="col-sm-9">
            <span class="badge bg-info">@(Model.BomItems?.Count ?? 0)</span>
          </dd>

          <dt class="col-sm-3">Sub-Assemblies:</dt>
          <dd class="col-sm-9">
            <span class="badge bg-secondary">@(Model.SubAssemblies?.Count ?? 0)</span>
          </dd>

          <dt class="col-sm-3">Total Cost:</dt>
          <dd class="col-sm-9">
            <strong class="text-success">@totalCost.ToString("C")</strong>
          </dd>

          <dt class="col-sm-3">Created:</dt>
          <dd class="col-sm-9">@Model.CreatedDate.ToString("MM/dd/yyyy")</dd>

          <dt class="col-sm-3">Last Modified:</dt>
          <dd class="col-sm-9">@Model.ModifiedDate.ToString("MM/dd/yyyy hh:mm tt")</dd>

          @if (Model.ParentBom != null)
          {
            <dt class="col-sm-3">Parent BOM:</dt>
            <dd class="col-sm-9">
              <a href="/Boms/Details/@Model.ParentBomId" class="text-decoration-none">
                @Model.ParentBom.BomNumber
              </a>
            </dd>
          }
        </dl>
      </div>
    </div>

    <!-- BOM Documents Section -->
    @if (Model.HasDocuments && Model.Documents?.Any() == true)
    {
      <div class="card mt-4">
        <div class="card-header">
          <h5><i class="fas fa-file-alt"></i> BOM Documents (@Model.Documents.Count)</h5>
        </div>
        <div class="card-body">
          <div class="table-responsive">
            <table class="table table-sm">
              <thead>
                <tr>
                  <th>Document Name</th>
                  <th>Type</th>
                  <th>Size</th>
                  <th>Uploaded</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                @foreach (var doc in Model.Documents.OrderBy(d => d.DocumentType).ThenBy(d => d.DocumentName))
                {
                  <tr>
                    <td>
                      <div class="d-flex align-items-center">
                        <i class="@doc.FileTypeIcon me-2"></i>
                        <div>
                          <strong>@doc.DocumentName</strong>
                          @if (!string.IsNullOrEmpty(doc.Description))
                          {
                            <br>
                      
                            <small class="text-muted">@doc.Description</small>
                          }
                        </div>
                      </div>
                    </td>
                    <td>
                      <span class="badge bg-secondary">@doc.DocumentType</span>
                    </td>
                    <td>@doc.FileSizeFormatted</td>
                    <td>
                      <small>@doc.UploadedDate.ToString("MM/dd/yyyy")</small>
                    </td>
                    <td>
                      <div class="btn-group btn-group-sm">
                        @{
                          var canPreview = new[] { ".pdf", ".png", ".jpg", ".jpeg", ".gif", ".bmp", ".tiff" }
                          .Contains(System.IO.Path.GetExtension(doc.FileName).ToLowerInvariant());
                        }

                        @if (canPreview)
                        {
                          <button class="btn btn-outline-info" onclick="previewDocument(@doc.Id, '@doc.DocumentName')" title="Preview">
                            <i class="fas fa-eye"></i>
                          </button>
                        }

                        <a href="/Documents/Download/@doc.Id" class="btn btn-outline-primary" title="Download">
                          <i class="fas fa-download"></i>
                        </a>

                        @* Note: Delete button is removed from Details view - only available in Edit view *@
                      </div>
                    </td>
                  </tr>
                }
              </tbody>
            </table>
          </div>
        </div>
      </div>
    }
    else
    {
      <div class="card mt-4">
        <div class="card-header">
          <h6><i class="fas fa-file-alt"></i> BOM Documents</h6>
        </div>
        <div class="card-body text-center">
          <i class="fas fa-file-alt fa-3x text-muted mb-3"></i>
          <h6 class="text-muted">No Documents Uploaded</h6>
          <p class="text-muted">
            @if (Model.IsCurrentVersion)
            {
              <span>No documents have been uploaded for this BOM.</span>
            }
            else
            {
              <span>No documents were uploaded for Version @Model.Version</span>
            }
          </p>
        </div>
      </div>
    }

    <!-- Components Section with Version Context - Made Collapsible -->
    @if (Model.BomItems?.Any() == true)
    {
      <div class="card mt-4">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h5><i class="fas fa-cogs"></i> Components (@Model.BomItems.Count)</h5>
          <div>
            <small class="text-muted me-2">For Version @Model.Version</small>
            <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#componentsTable" aria-expanded="true" aria-controls="componentsTable">
              <i class="fas fa-chevron-down"></i> Toggle
            </button>
          </div>
        </div>
        <div class="collapse show" id="componentsTable">
          <div class="card-body">
            <div class="table-responsive">
              <table class="table table-sm">
                <thead>
                  <tr>
                    <th>Part Number</th>
                    <th>Description</th>
                    <th>Quantity</th>
                    <th>Unit Cost</th>
                    <th>Extended Cost</th>
                    <th>Reference</th>
                  </tr>
                </thead>
                <tbody>
                  @foreach (var bomItem in Model.BomItems)
                  {
                    <tr>
                      <td>
                        <a href="/Items/Details/@bomItem.Item.Id" class="text-decoration-none">
                          @bomItem.Item.PartNumber
                        </a>
                      </td>
                      <td>@bomItem.Item.Description</td>
                      <td>@bomItem.Quantity</td>
                      <td>@bomItem.UnitCost.ToString("C")</td>
                      <td>@bomItem.ExtendedCost.ToString("C")</td>
                      <td>@bomItem.ReferenceDesignator</td>
                    </tr>
                  }
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    }
    else
    {
      <div class="card mt-4">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h6><i class="fas fa-cogs"></i> Components</h6>
          <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#componentsEmpty" aria-expanded="true" aria-controls="componentsEmpty">
            <i class="fas fa-chevron-down"></i> Toggle
          </button>
        </div>
        <div class="collapse show" id="componentsEmpty">
          <div class="card-body text-center">
            <p class="text-muted mb-3">
              @if (Model.IsCurrentVersion)
              {
                <span>No components have been added to this BOM.</span>
              }
              else
              {
                <span>No components were added to Version @Model.Version</span>
              }
            </p>
          </div>
        </div>
      </div>
    }

    <!-- Sub-Assemblies Section - Made Collapsible -->
    @if (Model.SubAssemblies?.Any() == true)
    {
      <div class="card mt-4">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h5><i class="fas fa-layer-group"></i> Sub-Assemblies (@Model.SubAssemblies.Count)</h5>
          <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#subAssembliesTable" aria-expanded="true" aria-controls="subAssembliesTable">
            <i class="fas fa-chevron-down"></i> Toggle
          </button>
        </div>
        <div class="collapse show" id="subAssembliesTable">
          <div class="card-body">
            <div class="list-group list-group-flush">
              @foreach (var subAssembly in Model.SubAssemblies)
              {
                <div class="list-group-item d-flex justify-content-between align-items-center">
                  <div>
                    <h6 class="mb-1">
                      <a href="/Boms/Details/@subAssembly.Id" class="text-decoration-none">
                        @subAssembly.BomNumber
                      </a>
                    </h6>
                    <p class="mb-1">@subAssembly.Description</p>
                    <small class="text-muted">Version @subAssembly.Version | @subAssembly.BomItems.Count components</small>
                  </div>
                  <div class="btn-group btn-group-sm">
                    <a href="/Boms/Details/@subAssembly.Id" class="btn btn-outline-primary">
                      <i class="fas fa-eye"></i> View
                    </a>
                  </div>
                </div>
              }
            </div>
          </div>
        </div>
      </div>
    }
    else
    {
      <div class="card mt-4">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h6><i class="fas fa-layer-group"></i> Sub-Assemblies</h6>
          <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#subAssembliesEmpty" aria-expanded="true" aria-controls="subAssembliesEmpty">
            <i class="fas fa-chevron-down"></i> Toggle
          </button>
        </div>
        <div class="collapse show" id="subAssembliesEmpty">
          <div class="card-body text-center">
            <p class="text-muted mb-3">No sub-assemblies have been added to this BOM.</p>
          </div>
        </div>
      </div>
    }
  </div>

  <div class="col-md-4">
    <!-- Quick Material Check Section -->
    <div class="card">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h6><i class="fas fa-exclamation-triangle text-warning"></i> Material Check</h6>
        <button class="btn btn-sm btn-outline-info" type="button" data-bs-toggle="collapse" data-bs-target="#materialCheck" aria-expanded="false">
          <i class="fas fa-eye"></i> Check
        </button>
      </div>
      <div class="collapse" id="materialCheck">
        <div class="card-body">
          <p class="text-muted small">Check if sufficient materials are available for this BOM:</p>
          @if (Model.BomItems?.Any() == true)
          {
            <div class="list-group list-group-flush">
              @foreach (var bomItem in Model.BomItems.Take(5))
              {
                <div class="list-group-item d-flex justify-content-between align-items-center py-2">
                  <small>
                    <strong>@bomItem.Item.PartNumber</strong><br>
                    Need: @bomItem.Quantity
                  </small>
                  <span class="badge bg-@(bomItem.Item.CurrentStock >= bomItem.Quantity ? "success" : "danger")">
                    @bomItem.Item.CurrentStock
                  </span>
                </div>
              }
              @if (Model.BomItems.Count > 5)
              {
                <div class="list-group-item text-center">
                  <small class="text-muted">... and @(Model.BomItems.Count - 5) more items</small>
                </div>
              }
            </div>
          }
          else
          {
            <p class="text-muted text-center">No components to check</p>
          }
        </div>
      </div>
    </div>

    <!-- BOM Statistics -->
    <div class="card mt-3">
      <div class="card-header">
        <h6><i class="fas fa-chart-bar"></i> BOM Statistics</h6>
      </div>
      <div class="card-body">
        <div class="row text-center">
          <div class="col-6">
            <div class="border-end">
              <h5 class="text-primary">@(Model.BomItems?.Count ?? 0)</h5>
              <small class="text-muted">Components</small>
            </div>
          </div>
          <div class="col-6">
            <h5 class="text-info">@(Model.SubAssemblies?.Count ?? 0)</h5>
            <small class="text-muted">Sub-Assemblies</small>
          </div>
        </div>
        <hr>
        <div class="row text-center">
          <div class="col-12">
            <h6 class="text-success">@totalCost.ToString("C")</h6>
            <small class="text-muted">Total Material Cost</small>
          </div>
        </div>
        @if (Model.BomItems?.Any() == true)
        {
          <hr>
          <div class="row text-center">
            <div class="col-12">
              <small class="text-muted">
                Avg Cost per Component:
                <strong>@((totalCost / Model.BomItems.Count).ToString("C"))</strong>
              </small>
            </div>
          </div>
        }
      </div>
    </div>

    <!-- Version History Card -->
    @if (ViewBag.BomVersions != null && ((IEnumerable<dynamic>)ViewBag.BomVersions).Count() > 1)
    {
      <div class="card mt-3">
        <div class="card-header">
          <h6><i class="fas fa-history"></i> Version History</h6>
        </div>
        <div class="card-body">
          <div class="list-group list-group-flush">
            @foreach (var version in (IEnumerable<dynamic>)ViewBag.BomVersions)
            {
              <div class="list-group-item d-flex justify-content-between align-items-center @(version.Version == Model.Version ? "active" : "")">
                <div>
                  <strong>@version.Version</strong>
                  @if (version.IsCurrentVersion)
                  {
                    <span class="badge bg-success ms-2">Current</span>
                  }
                  <br>
                  <small class="text-muted">@version.CreatedDate.ToString("MM/dd/yyyy")</small>
                </div>
                @if (version.Version != Model.Version)
                {
                  <a href="/Boms/Details/@version.Id" class="btn btn-sm btn-outline-primary">View</a>
                }
              </div>
            }
          </div>
        </div>
      </div>
    }
  </div>
</div>

<div class="mt-3">
  <a href="/Boms" class="btn btn-secondary">Back to BOMs</a>
</div>

@* Document Preview Modal *@
<div class="modal fade" id="documentPreviewModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-xl">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="previewModalTitle">Document Preview</h5>
        <div class="btn-group btn-group-sm">
          <button type="button" class="btn btn-outline-secondary" onclick="zoomOut()">
            <i class="fas fa-search-minus"></i>
          </button>
          <button type="button" class="btn btn-outline-secondary" onclick="resetZoom()">
            <i class="fas fa-compress-arrows-alt"></i>
          </button>
          <button type="button" class="btn btn-outline-secondary" onclick="zoomIn()">
            <i class="fas fa-search-plus"></i>
          </button>
        </div>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body p-0">
        <div id="previewLoading" class="text-center p-4">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
          <p class="mt-2">Loading document...</p>
        </div>
        <iframe id="previewIframe" style="width: 100%; height: 70vh; border: none; display: none;"></iframe>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <a id="downloadLink" href="#" class="btn btn-primary">
          <i class="fas fa-download"></i> Download
        </a>
      </div>
    </div>
  </div>
</div>

<!-- Pending Change Orders Modal -->
<div class="modal fade" id="pendingChangeOrdersModal" tabindex="-1" aria-labelledby="pendingChangeOrdersModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header bg-warning text-dark">
        <h5 class="modal-title" id="pendingChangeOrdersModalLabel">
          <i class="fas fa-exclamation-triangle"></i> Cannot Create Change Order
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="alert alert-warning" role="alert">
          <p class="mb-3" id="pendingModalMessage">
            <!-- Message will be populated by JavaScript -->
          </p>
        </div>

        <h6><i class="fas fa-list"></i> Pending Change Orders:</h6>
        <div id="pendingChangeOrdersList">
          <!-- Content will be populated by JavaScript -->
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          <i class="fas fa-times"></i> Close
        </button>
        <button type="button" class="btn btn-primary" onclick="refreshPage()">
          <i class="fas fa-refresh"></i> Refresh Page
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  let currentZoom = 1;
  let currentDocumentId = null;

  function previewDocument(documentId, documentName) {
      currentDocumentId = documentId;
      const modal = new bootstrap.Modal(document.getElementById('documentPreviewModal'));
      const iframe = document.getElementById('previewIframe');
      const modalTitle = document.getElementById('previewModalTitle');
      const downloadLink = document.getElementById('downloadLink');
      const loading = document.getElementById('previewLoading');

      modalTitle.textContent = `Preview: ${documentName}`;
      downloadLink.href = `/Documents/Download/${documentId}`;

      // Show loading, hide iframe
      loading.style.display = 'block';
      iframe.style.display = 'none';

      // Set iframe source to view the document
      iframe.src = `/Documents/View/${documentId}`;

      // Show modal
      modal.show();

      // Handle iframe load
      iframe.onload = function() {
          loading.style.display = 'none';
          iframe.style.display = 'block';
      };

      // Handle iframe error
      iframe.onerror = function() {
          loading.innerHTML = `
              <div class="text-center p-4">
                  <i class="fas fa-exclamation-triangle fa-3x text-warning mb-3"></i>
                  <h5>Preview Not Available</h5>
                  <p class="text-muted">This document cannot be previewed in your browser.</p>
                  <a href="/Documents/Download/${documentId}" class="btn btn-primary">
                      <i class="fas fa-download"></i> Download Document
                  </a>
              </div>
          `;
      };
  }

  function zoomIn() {
      currentZoom += 0.25;
      applyZoom();
  }

  function zoomOut() {
      if (currentZoom > 0.5) {
          currentZoom -= 0.25;
          applyZoom();
      }
  }

  function resetZoom() {
      currentZoom = 1;
      applyZoom();
  }

  function applyZoom() {
      const iframe = document.getElementById('previewIframe');
      iframe.style.transform = `scale(${currentZoom})`;
      iframe.style.transformOrigin = 'top left';
  }

  // Reset zoom when modal is closed
  document.getElementById('documentPreviewModal').addEventListener('hidden.bs.modal', function () {
      currentZoom = 1;
      applyZoom();
      document.getElementById('previewIframe').src = '';
  });

  // Define the showCreateVersionModal function for this page
  function showCreateVersionModal(entityType, entityId) {
    console.log(`Attempting to load modal for ${entityType} ID: ${entityId}`);

    // Add visual feedback to the button
    const button = event?.target;
    if (button) {
      button.disabled = true;
      button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Loading...';
    }

    // Load the change order modal using the new route
    fetch(`/ChangeOrders/CreateModal/${entityType}/${entityId}`, {
      method: 'GET',
      headers: {
        'X-Requested-With': 'XMLHttpRequest',
        'Accept': 'text/html,application/json'
      }
    })
    .then(response => {
      console.log(`Response status: ${response.status}`);
      console.log(`Response content-type: ${response.headers.get('content-type')}`);

      if (!response.ok) {
        return response.text().then(text => {
          console.error('Server error response:', text);
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        });
      }

      const contentType = response.headers.get('content-type');
      if (contentType && contentType.includes('application/json')) {
        return response.json();
      }

      return response.text();
    })
    .then(result => {
      if (typeof result === 'string') {
        // HTML response - show modal
        console.log('Modal HTML loaded successfully');

        // Remove any existing modal first
        const existingModal = document.getElementById('changeOrderModal');
        if (existingModal) {
          existingModal.remove();
        }

        document.body.insertAdjacentHTML('beforeend', result);
        const modal = new bootstrap.Modal(document.getElementById('changeOrderModal'));
        modal.show();
      } else if (result.success === false) {
        // JSON error response - show pending change orders modal
        if (result.pendingChangeOrders) {
          showPendingChangeOrdersModal(result);
        } else {
          alert(`Error: ${result.message || result.error || 'Unknown error occurred'}`);
        }
      }
    })
    .catch(error => {
      console.error('Error loading modal:', error);
      alert(`Error loading change order form: ${error.message}\n\nPlease check the browser console for more details.`);
    })
    .finally(() => {
      // Re-enable button
      if (button) {
        button.disabled = false;
        button.innerHTML = '<i class="fas fa-code-branch"></i> New Version';
      }
    });
  }

  // Helper functions specific to this page
  function showPendingChangeOrdersModal(errorData) {
    console.log('Showing pending change orders modal:', errorData);

    // Update the modal content
    const messageElement = document.getElementById('pendingModalMessage');
    if (messageElement) {
      messageElement.textContent = errorData.message;
    }

    // Build the pending change orders list
    const listContainer = document.getElementById('pendingChangeOrdersList');
    if (listContainer && errorData.pendingChangeOrders && errorData.pendingChangeOrders.length > 0) {
      const listHtml = errorData.pendingChangeOrders.map(co => `
        <div class="card mb-2">
          <div class="card-body py-2">
            <div class="d-flex justify-content-between align-items-center">
              <div>
                <strong>${co.changeOrderNumber}</strong>
                <span class="badge bg-warning ms-2">Version ${co.newVersion}</span>
              </div>
              <div class="text-end">
                <small class="text-muted">Created: ${co.createdDate}</small><br>
                <small class="text-muted">By: ${co.createdBy}</small>
              </div>
            </div>
            <div class="mt-2">
              <a href="/ChangeOrders/Details/${co.id}" class="btn btn-sm btn-outline-primary">
                <i class="fas fa-eye"></i> View Details
              </a>
            </div>
          </div>
        </div>
      `).join('');
      listContainer.innerHTML = listHtml;
    } else if (listContainer) {
      listContainer.innerHTML = '<p class="text-muted">No pending change orders found.</p>';
    }

    // Show the modal
    const pendingModal = document.getElementById('pendingChangeOrdersModal');
    if (pendingModal) {
      const modal = new bootstrap.Modal(pendingModal);
      modal.show();
    } else {
      console.error('Pending change orders modal not found in DOM');
      alert(errorData.message);
    }
  }

  function refreshPage() {
    location.reload();
  }

  // Page-specific initialization
  document.addEventListener('DOMContentLoaded', function() {
    console.log('BOM Details page loaded');

    // Check if the New Version button exists
    const newVersionBtn = document.querySelector('button[onclick*="showCreateVersionModal"]');
    if (newVersionBtn) {
      console.log('Found New Version button:', newVersionBtn);
    } else {
      console.log('New Version button not found!');
    }

    // Check if the pending change orders modal exists
    const pendingModal = document.getElementById('pendingChangeOrdersModal');
    if (!pendingModal) {
      console.warn('pendingChangeOrdersModal not found - make sure it exists in the page');
    }

    // Update chevron icons for collapsible sections
    const collapseElements = document.querySelectorAll('.collapse');
    collapseElements.forEach(element => {
      const toggleButton = document.querySelector(`[data-bs-target="#${element.id}"]`);
      if (toggleButton) {
        const chevronIcon = toggleButton.querySelector('.fas');
        
        element.addEventListener('shown.bs.collapse', function () {
          if (chevronIcon) {
            chevronIcon.classList.remove('fa-chevron-down');
            chevronIcon.classList.add('fa-chevron-up');
          }
        });
        
        element.addEventListener('hidden.bs.collapse', function () {
          if (chevronIcon) {
            chevronIcon.classList.remove('fa-chevron-up');
            chevronIcon.classList.add('fa-chevron-down');
          }
        });
      }
    });
  });

  // Clean up modal when closed
  document.addEventListener('hidden.bs.modal', function (event) {
    if (event.target.id === 'changeOrderModal') {
      event.target.remove();
    }
  });
</script>

@section Scripts {
  <style>
    .btn-group-sm .btn {
      padding: 0.25rem 0.5rem;
      font-size: 0.875rem;
    }

    .table th {
      border-top: none;
      font-weight: 600;
      font-size: 0.875rem;
    }

    .badge {
      font-size: 0.75rem;
    }

    /* Smooth transitions for collapsible sections */
    .collapse {
      transition: height 0.35s ease;
    }

    /* Style for chevron animation */
    .fas.fa-chevron-down,
    .fas.fa-chevron-up {
      transition: transform 0.3s ease;
    }
  </style>
}