@model IEnumerable<InventorySystem.Models.Bom>
@{
  ViewData["Title"] = "Bills of Materials";
  var searchTerm = ViewBag.SearchTerm as string;
  var bomTypeFilter = ViewBag.BomTypeFilter as string;
  var versionFilter = ViewBag.VersionFilter as string;
  var assemblyFilter = ViewBag.AssemblyFilter as string;
  var sortOrder = ViewBag.SortOrder as string ?? "bomNumber_asc";
  var isFiltered = ViewBag.IsFiltered as bool? ?? false;
}

<div class="container-fluid">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h2><i class="fas fa-list"></i> @ViewData["Title"]</h2>
    <div class="btn-group">
      <a href="/Boms/Create" class="btn btn-primary">
        <i class="fas fa-plus"></i> Create BOM
      </a>
      <div class="btn-group" role="group">
        <button type="button" class="btn btn-outline-primary dropdown-toggle" data-bs-toggle="dropdown">
          <i class="fas fa-cog"></i> More Actions
        </button>
        <ul class="dropdown-menu">
          <li>
            <a class="dropdown-item" href="/Boms/Import">
              <i class="fas fa-file-import"></i> Import from CSV
            </a>
          </li>
          <li>
            <a class="dropdown-item" href="/Boms/DownloadSample">
              <i class="fas fa-download"></i> Download Sample CSV
            </a>
          </li>
          <li><hr class="dropdown-divider"></li>
          <li>
            <a class="dropdown-item" href="#" onclick="exportBoms()">
              <i class="fas fa-file-export"></i> Export to CSV
            </a>
          </li>
        </ul>
      </div>
    </div>
  </div>

  @if (ViewBag.ErrorMessage != null)
  {
    <div class="alert alert-danger">
      <i class="fas fa-exclamation-circle"></i> @ViewBag.ErrorMessage
    </div>
  }

  @if (TempData["SuccessMessage"] != null)
  {
    <div class="alert alert-success alert-dismissible fade show">
      <i class="fas fa-check-circle"></i> @TempData["SuccessMessage"]
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
  }

  @if (TempData["ErrorMessage"] != null)
  {
    <div class="alert alert-danger alert-dismissible fade show">
      <i class="fas fa-exclamation-circle"></i> @TempData["ErrorMessage"]
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
  }

  @if (TempData["WarningMessage"] != null)
  {
    <div class="alert alert-warning alert-dismissible fade show">
      <i class="fas fa-exclamation-triangle"></i> @TempData["WarningMessage"]
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
  }

  <!-- Enhanced Search Form -->
  <div class="card mb-4">
    <div class="card-header">
      <h6 class="mb-0">
        <button class="btn btn-link text-decoration-none p-0 text-start w-100"
                type="button"
                data-bs-toggle="collapse"
                data-bs-target="#searchCollapse"
                aria-expanded="@(isFiltered ? "true" : "false")"
                aria-controls="searchCollapse">
          <i class="fas fa-search"></i> Search & Filter BOMs
          <i class="fas fa-chevron-@(isFiltered ? "up" : "down") float-end"></i>
        </button>
      </h6>
    </div>
    <div class="collapse @(isFiltered ? "show" : "")" id="searchCollapse">
      <div class="card-body">
        <!-- Search Examples -->
        <div class="row mb-4 p-3 bg-light border rounded">
          <div class="col-12">
            <h6><i class="fas fa-lightbulb text-info"></i> Search Examples</h6>
          </div>
          <div class="col-md-4">
            <h6 class="small">Wildcard Search:</h6>
            <ul class="list-unstyled small">
              <li>BOM-* - BOMs starting with "BOM-"</li>
              <li>*assembly* - Contains "assembly"</li>
              <li>V?1 - V + any char + 1 (V11, V21, etc.)</li>
              <li>MAIN-*-REV? - Complex patterns</li>
            </ul>
          </div>
          <div class="col-md-4">
            <h6 class="small">Search Fields:</h6>
            <ul class="list-unstyled small">
              <li><i class="fas fa-hashtag"></i> BOM number</li>
              <li><i class="fas fa-align-left"></i> Description</li>
              <li><i class="fas fa-microchip"></i> Assembly part number</li>
              <li><i class="fas fa-code-branch"></i> Version</li>
            </ul>
          </div>
          <div class="col-md-4">
            <h6 class="small">Quick Filters:</h6>
            <ul class="list-unstyled small">
              <li><button class="btn btn-link btn-sm p-0" onclick="quickFilter('main')">Main assemblies</button></li>
              <li><button class="btn btn-link btn-sm p-0" onclick="quickFilter('withitems')">With components</button></li>
              <li><button class="btn btn-link btn-sm p-0" onclick="quickFilter('current')">Current versions</button></li>
              <li><button class="btn btn-link btn-sm p-0" onclick="clearAllFilters()">Clear all filters</button></li>
            </ul>
          </div>
        </div>

        <!-- Search Form -->
        <form method="get" class="row g-3">
          <div class="col-md-3">
            <label for="search" class="form-label">
              <i class="fas fa-search"></i> Search Term
            </label>
            <input type="text"
                   class="form-control"
                   id="search"
                   name="search"
                   value="@searchTerm"
                   placeholder="BOM number, description, assembly... (use * and ? for wildcards)">
            <div class="form-text">Use * for multiple chars, ? for single char</div>
          </div>

          <div class="col-md-2">
            <label for="bomTypeFilter" class="form-label">
              <i class="fas fa-layer-group"></i> BOM Type
            </label>
            <select class="form-select" id="bomTypeFilter" name="bomTypeFilter" asp-items="ViewBag.BomTypeOptions">
              <option value="">All Types</option>
            </select>
          </div>

          <div class="col-md-2">
            <label for="versionFilter" class="form-label">
              <i class="fas fa-code-branch"></i> Version
            </label>
            <select class="form-select" id="versionFilter" name="versionFilter" asp-items="ViewBag.VersionOptions">
              <option value="">All Versions</option>
            </select>
          </div>

          <div class="col-md-3">
            <label for="assemblyFilter" class="form-label">
              <i class="fas fa-microchip"></i> Assembly Part #
            </label>
            <input type="text"
                   class="form-control"
                   id="assemblyFilter"
                   name="assemblyFilter"
                   value="@assemblyFilter"
                   placeholder="Assembly part number...">
          </div>

          <div class="col-md-2">
            <label class="form-label">&nbsp;</label>
            <div class="btn-group w-100">
              <button type="submit" class="btn btn-primary">
                <i class="fas fa-search"></i> Search
              </button>
            </div>
          </div>

          <div class="col-md-12">
            <div class="btn-group">
              <button type="button" class="btn btn-outline-secondary" onclick="clearAllFilters()">
                <i class="fas fa-times"></i> Clear
              </button>
              <button type="button" class="btn btn-outline-info" onclick="saveSearch()">
                <i class="fas fa-bookmark"></i> Save Search
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Search Results Summary -->
  @if (isFiltered)
  {
    <div class="alert alert-info">
      <i class="fas fa-info-circle"></i>
      Found <strong>@ViewBag.TotalCount</strong> BOM(s)
      @if (ViewBag.SearchResultsCount != null && ViewBag.TotalBomsCount != null)
      {
        <span>out of @ViewBag.TotalBomsCount total BOMs</span>
      }

      @if (!string.IsNullOrEmpty(searchTerm))
      {
        <span>matching "<strong>@searchTerm</strong>"</span>
      }

      <a href="@Url.Action("Index")" class="btn btn-sm btn-outline-secondary ms-2">
        <i class="fas fa-times"></i> Clear All Filters
      </a>
    </div>
  }

  @if (!Model.Any())
  {
    <div class="card">
      <div class="card-header">
        <h5><i class="fas fa-info-circle"></i> @(isFiltered ? "No BOMs Found" : "No BOMs Found")</h5>
      </div>
      <div class="card-body text-center">
        <div class="py-4">
          <i class="fas fa-list fa-4x text-muted mb-3"></i>
          @if (isFiltered)
          {
            <h4>No BOMs match your search criteria</h4>
            <p class="text-muted mb-4">Try adjusting your search terms or clearing filters.</p>
            <button class="btn btn-outline-secondary" onclick="clearAllFilters()">
              <i class="fas fa-times"></i> Clear All Filters
            </button>
          }
          else
          {
            <h4>No Bills of Materials created yet</h4>
            <p class="text-muted mb-4">Create your first BOM to start building assemblies.</p>
            <div class="d-grid gap-2 d-md-block">
              <a href="/Boms/Create" class="btn btn-primary">
                <i class="fas fa-plus"></i> Create First BOM
              </a>
              <a href="/Boms/Import" class="btn btn-outline-secondary">
                <i class="fas fa-upload"></i> Import BOMs
              </a>
            </div>
            <div class="mt-4">
              <small class="text-muted">
                Use our <a asp-action="Import" class="text-decoration-none">CSV import feature</a> to import BOMs in bulk.
              </small>
            </div>
          }
        </div>
      </div>
    </div>
  }
  else
  {
    <div class="card">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
          <i class="fas fa-list"></i> BOMs List
          <span class="badge bg-primary ms-2">@ViewBag.TotalCount records</span>
        </h5>

        <!-- Sort Options, Page Size, and Pagination Controls -->
        <div class="d-flex align-items-center gap-3">
          <!-- Page Size Controls -->
          <div class="btn-group">
            <label class="btn btn-outline-secondary btn-sm">
              Page Size:
              <select class="form-select form-select-sm d-inline-block w-auto ms-1" 
                      onchange="changePageSize(this.value)">
                @foreach (var size in ViewBag.AllowedPageSizes)
                {
                  <option value="@size" selected="@(size == ViewBag.PageSize)">@size</option>
                }
              </select>
            </label>
          </div>

          <!-- Sort Options -->
          <div class="dropdown">
            <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">
              <i class="fas fa-sort"></i> Sort
            </button>
            <ul class="dropdown-menu">
              <li>
                <a class="dropdown-item @(sortOrder == "bomNumber_asc" ? "active" : "")" href="@GetSortUrl("bomNumber_asc")">
                  <i class="fas fa-hashtag"></i> BOM Number (A-Z)
                </a>
              </li>
              <li>
                <a class="dropdown-item @(sortOrder == "bomNumber_desc" ? "active" : "")" href="@GetSortUrl("bomNumber_desc")">
                  <i class="fas fa-hashtag"></i> BOM Number (Z-A)
                </a>
              </li>
              <li><hr class="dropdown-divider"></li>
              <li>
                <a class="dropdown-item @(sortOrder == "description_asc" ? "active" : "")" href="@GetSortUrl("description_asc")">
                  <i class="fas fa-align-left"></i> Description (A-Z)
                </a>
              </li>
              <li>
                <a class="dropdown-item @(sortOrder == "assembly_asc" ? "active" : "")" href="@GetSortUrl("assembly_asc")">
                  <i class="fas fa-microchip"></i> Assembly Part #
                </a>
              </li>
              <li><hr class="dropdown-divider"></li>
              <li>
                <a class="dropdown-item @(sortOrder == "version_asc" ? "active" : "")" href="@GetSortUrl("version_asc")">
                  <i class="fas fa-code-branch"></i> Version (A-Z)
                </a>
              </li>
              <li>
                <a class="dropdown-item @(sortOrder == "itemcount_desc" ? "active" : "")" href="@GetSortUrl("itemcount_desc")">
                  <i class="fas fa-cubes"></i> Component Count (High-Low)
                </a>
              </li>
              <li><hr class="dropdown-divider"></li>
              <li>
                <a class="dropdown-item @(sortOrder == "created_desc" ? "active" : "")" href="@GetSortUrl("created_desc")">
                  <i class="fas fa-calendar"></i> Recently Created
                </a>
              </li>
              <li>
                <a class="dropdown-item @(sortOrder == "modified_desc" ? "active" : "")" href="@GetSortUrl("modified_desc")">
                  <i class="fas fa-edit"></i> Recently Modified
                </a>
              </li>
            </ul>
          </div>

          <!-- Pagination Navigation -->
          <nav aria-label="BOMs pagination">
            <ul class="pagination pagination-sm mb-0">
              <li class="page-item @(ViewBag.HasPreviousPage ? "" : "disabled")">
                <a class="page-link" href="@GetPageUrl(ViewBag.CurrentPage - 1)">Previous</a>
              </li>
              
              @for (int i = Math.Max(1, ViewBag.CurrentPage - 2); 
                    i <= Math.Min(ViewBag.TotalPages, ViewBag.CurrentPage + 2); 
                    i++)
              {
                <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                  <a class="page-link" href="@GetPageUrl(i)">@i</a>
                </li>
              }
              
              <li class="page-item @(ViewBag.HasNextPage ? "" : "disabled")">
                <a class="page-link" href="@GetPageUrl(ViewBag.CurrentPage + 1)">Next</a>
              </li>
            </ul>
          </nav>
        </div>
      </div>
      <div class="card-body">
        <div class="table-responsive">
          <table class="table table-hover" id="bomsTable">
            <thead class="table-dark">
              <tr>
                <th>
                  <a href="@GetSortUrl("bomNumber_asc")" class="text-white text-decoration-none">
                    <i class="fas fa-hashtag"></i> BOM Number
                    @if (sortOrder?.StartsWith("bomNumber") == true)
                    {
                      <i class="fas fa-sort-@(sortOrder.EndsWith("_asc") ? "up" : "down")"></i>
                    }
                  </a>
                </th>
                <th>
                  <a href="@GetSortUrl("description_asc")" class="text-white text-decoration-none">
                    <i class="fas fa-align-left"></i> Description
                    @if (sortOrder?.StartsWith("description") == true)
                    {
                      <i class="fas fa-sort-@(sortOrder.EndsWith("_asc") ? "up" : "down")"></i>
                    }
                  </a>
                </th>
                <th>
                  <a href="@GetSortUrl("assembly_asc")" class="text-white text-decoration-none">
                    <i class="fas fa-microchip"></i> Assembly Part #
                    @if (sortOrder?.StartsWith("assembly") == true)
                    {
                      <i class="fas fa-sort-@(sortOrder.EndsWith("_asc") ? "up" : "down")"></i>
                    }
                  </a>
                </th>
                <th>
                  <a href="@GetSortUrl("version_asc")" class="text-white text-decoration-none">
                    <i class="fas fa-code-branch"></i> Version
                    @if (sortOrder?.StartsWith("version") == true)
                    {
                      <i class="fas fa-sort-@(sortOrder.EndsWith("_asc") ? "up" : "down")"></i>
                    }
                  </a>
                </th>
                <th>
                  <a href="@GetSortUrl("itemcount_desc")" class="text-white text-decoration-none">
                    <i class="fas fa-cubes"></i> Components
                    @if (sortOrder?.StartsWith("itemcount") == true)
                    {
                      <i class="fas fa-sort-@(sortOrder.EndsWith("_asc") ? "up" : "down")"></i>
                    }
                  </a>
                </th>
                <th>
                  <i class="fas fa-layer-group"></i> Sub-Assemblies
                </th>
                <th>
                  <a href="@GetSortUrl("created_desc")" class="text-white text-decoration-none">
                    <i class="fas fa-calendar"></i> Created
                    @if (sortOrder?.StartsWith("created") == true)
                    {
                      <i class="fas fa-sort-@(sortOrder.EndsWith("_asc") ? "up" : "down")"></i>
                    }
                  </a>
                </th>
                <th>
                  <i class="fas fa-flag"></i> Status
                </th>
                <th style="width: 150px;">
                  <i class="fas fa-cogs"></i> Actions
                </th>
              </tr>
            </thead>
            <tbody>
              @foreach (var bom in Model)
              {
                <tr class="clickable-row" data-bom-id="@bom.Id">
                  <td>
                    <strong>@bom.BomNumber</strong>
                  </td>
                  <td>
                    @bom.Description
                    @if (bom.HasDocuments)
                    {
                      <br>
                      <small class="text-success">
                        <i class="fas fa-paperclip"></i> @bom.DocumentCount docs
                      </small>
                    }
                  </td>
                  <td>
                    @if (!string.IsNullOrEmpty(bom.AssemblyPartNumber))
                    {
                      <span>@bom.AssemblyPartNumber</span>
                    }
                    else
                    {
                      <span class="text-muted">-</span>
                    }
                  </td>
                  <td>
                    <span class="badge @(bom.IsCurrentVersion ? "bg-success" : "bg-secondary")">
                      @bom.Version
                      @if (bom.IsCurrentVersion)
                      {
                        <i class="fas fa-check"></i>
                      }
                    </span>
                  </td>
                  <td>
                    @if (bom.BomItems.Count > 0)
                    {
                      <span class="badge bg-info">@bom.BomItems.Count</span>
                    }
                    else
                    {
                      <span class="text-muted">None</span>
                    }
                  </td>
                  <td>
                    @if (bom.SubAssemblies.Count > 0)
                    {
                      <span class="badge bg-secondary">@bom.SubAssemblies.Count</span>
                    }
                    else
                    {
                      <span class="text-muted">None</span>
                    }
                  </td>
                  <td>
                    <span>@bom.CreatedDate.ToString("MM/dd/yyyy")</span>
                    @if (bom.ModifiedDate != bom.CreatedDate)
                    {
                      <br>
                      <small class="text-muted">
                        <i class="fas fa-edit"></i> @bom.ModifiedDate.ToString("MM/dd/yyyy")
                      </small>
                    }
                  </td>
                  <td>
                    <div class="d-flex flex-column gap-1">
                      @if (bom.ParentBomId == null)
                      {
                        <span class="badge bg-primary">Main Assembly</span>
                      }
                      else
                      {
                        <span class="badge bg-warning text-dark">Sub-Assembly</span>
                      }
                    </div>
                  </td>
                  <td>
                    <div class="btn-group btn-group-sm" onclick="event.stopPropagation();">
                      <a href="/Boms/Details/@bom.Id" class="btn btn-outline-primary" title="View Details">
                        <i class="fas fa-eye"></i>
                      </a>
                      <a href="/Boms/Edit/@bom.Id" class="btn btn-outline-warning" title="Edit">
                        <i class="fas fa-edit"></i>
                      </a>
                      <a href="/Boms/AddItem?bomId=@bom.Id" class="btn btn-outline-success" title="Add Component">
                        <i class="fas fa-plus"></i>
                      </a>
                      <a href="/Boms/Visualize/@bom.Id" class="btn btn-outline-info" title="Visualize">
                        <i class="fas fa-project-diagram"></i>
                      </a>
                    </div>
                  </td>
                </tr>
              }
            </tbody>
          </table>
        </div>

        <!-- Pagination Summary -->
        <div class="row mt-3">
          <div class="col-md-6">
            <p class="text-muted mb-0">
              Showing @ViewBag.ShowingFrom to @ViewBag.ShowingTo of @ViewBag.TotalCount BOMs
            </p>
          </div>
          <div class="col-md-6 text-end">
            @if (ViewBag.TotalPages > 1)
            {
              <small class="text-muted">Page @ViewBag.CurrentPage of @ViewBag.TotalPages</small>
            }
          </div>
        </div>

        <!-- Enhanced Summary Statistics -->
        <div class="mt-4">
          <div class="row">
            <div class="col-md-2">
              <div class="card bg-light">
                <div class="card-body text-center p-2">
                  <h6 class="card-title text-primary mb-1">
                    <i class="fas fa-list"></i>
                    Total BOMs
                  </h6>
                  <h4 class="text-primary mb-0">@ViewBag.TotalCount</h4>
                </div>
              </div>
            </div>
            <div class="col-md-2">
              <div class="card bg-light">
                <div class="card-body text-center p-2">
                  <h6 class="card-title text-success mb-1">
                    <i class="fas fa-layer-group"></i>
                    Main Assemblies
                  </h6>
                  <h4 class="text-success mb-0">@Model.Count(b => b.ParentBomId == null)</h4>
                </div>
              </div>
            </div>
            <div class="col-md-2">
              <div class="card bg-light">
                <div class="card-body text-center p-2">
                  <h6 class="card-title text-warning mb-1">
                    <i class="fas fa-sitemap"></i>
                    Sub-Assemblies
                  </h6>
                  <h4 class="text-warning mb-0">@Model.Count(b => b.ParentBomId != null)</h4>
                </div>
              </div>
            </div>
            <div class="col-md-2">
              <div class="card bg-light">
                <div class="card-body text-center p-2">
                  <h6 class="card-title text-info mb-1">
                    <i class="fas fa-cubes"></i>
                    Total Components
                  </h6>
                  <h4 class="text-info mb-0">@Model.Sum(b => b.BomItems.Count)</h4>
                </div>
              </div>
            </div>
            <div class="col-md-2">
              <div class="card bg-light">
                <div class="card-body text-center p-2">
                  <h6 class="card-title text-secondary mb-1">
                    <i class="fas fa-paperclip"></i>
                    With Documents
                  </h6>
                  <h4 class="text-secondary mb-0">@Model.Count(b => b.HasDocuments)</h4>
                </div>
              </div>
            </div>
            <div class="col-md-2">
              <div class="card bg-light">
                <div class="card-body text-center p-2">
                  <h6 class="card-title text-primary mb-1">
                    <i class="fas fa-check-circle"></i>
                    Current Versions
                  </h6>
                  <h4 class="text-primary mb-0">@Model.Count(b => b.IsCurrentVersion)</h4>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  }
</div>

<!-- Enhanced JavaScript for Search Functionality -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
      // Auto-expand search if filtered
      @if (isFiltered)
      {
            <text>
            const searchCollapse = document.getElementById('searchCollapse');
            if (searchCollapse && !searchCollapse.classList.contains('show')) {
                new bootstrap.Collapse(searchCollapse, { show: true });
            }
            </text>
      }

      // Update chevron icon
      const collapseElement = document.getElementById('searchCollapse');
      const chevronIcon = document.querySelector('[data-bs-target="#searchCollapse"] .fa-chevron-down, [data-bs-target="#searchCollapse"] .fa-chevron-up');

      if (collapseElement && chevronIcon) {
          collapseElement.addEventListener('show.bs.collapse', function () {
              chevronIcon.classList.remove('fa-chevron-down');
              chevronIcon.classList.add('fa-chevron-up');
          });

          collapseElement.addEventListener('hide.bs.collapse', function () {
              chevronIcon.classList.remove('fa-chevron-up');
              chevronIcon.classList.add('fa-chevron-down');
          });
      }

      // Make table rows clickable
      const clickableRows = document.querySelectorAll('.clickable-row');

      clickableRows.forEach(function(row) {
          row.addEventListener('click', function(e) {
              // Only proceed if the click wasn't on an action button or link
              if (e.target.closest('.btn-group') || e.target.closest('a') || e.target.closest('button')) {
                  return;
              }

              const bomId = this.getAttribute('data-bom-id');
              if (bomId) {
                  // Show loading indicator for navigation
                  if (window.LoadingIndicator) {
                      window.LoadingIndicator.showForOperation('loading-bom');
                  }
                  window.location.href = '/Boms/Details/' + bomId;
              }
          });

          // Add hover effect
          row.addEventListener('mouseenter', function() {
              if (!this.classList.contains('table-active')) {
                  this.style.backgroundColor = '#f8f9fa';
              }
          });

          row.addEventListener('mouseleave', function() {
              if (!this.classList.contains('table-active')) {
                  this.style.backgroundColor = '';
              }
          });
      });

      // Prevent action buttons from triggering row click
      const actionButtons = document.querySelectorAll('.btn-group a, .btn-group button');
      actionButtons.forEach(function(button) {
          button.addEventListener('click', function(e) {
              e.stopPropagation();
              
              // Add loading indicators for specific actions
              const href = this.getAttribute('href');
              if (href && window.LoadingIndicator) {
                  if (href.includes('/Details/')) {
                      window.LoadingIndicator.showForOperation('loading-bom');
                  } else if (href.includes('/Edit/')) {
                      window.LoadingIndicator.show('Loading BOM Editor...', 'Preparing BOM for editing');
                  } else if (href.includes('/AddItem')) {
                      window.LoadingIndicator.show('Loading Component Manager...', 'Adding components to BOM');
                  } else if (href.includes('/Visualize/')) {
                      window.LoadingIndicator.show('Loading BOM Visualizer...', 'Generating interactive BOM diagram');
                  }
              }
          });
      });

      // Add loading to main action buttons
      document.querySelectorAll('a[href*="/Boms/"], button[onclick]').forEach(btn => {
          btn.addEventListener('click', function(e) {
              if (window.LoadingIndicator) {
                  if (this.href && this.href.includes('/Create')) {
                      window.LoadingIndicator.show('Loading BOM Creator...', 'Preparing new BOM form');
                  } else if (this.href && this.href.includes('/Import')) {
                      window.LoadingIndicator.show('Loading BOM Importer...', 'Preparing CSV import interface');
                  } else if (this.onclick && this.onclick.toString().includes('exportBoms')) {
                      window.LoadingIndicator.showForOperation('generating-report');
                  }
              }
          });
      });

      // Add loading to pagination links
      document.querySelectorAll('.pagination .page-link').forEach(link => {
          link.addEventListener('click', function(e) {
              if (!this.closest('.page-item').classList.contains('disabled')) {
                  if (window.LoadingIndicator) {
                      window.LoadingIndicator.show('Loading Page...', 'Fetching BOMs for page ' + this.textContent);
                  }
              }
          });
      });

      // Add loading to sort links
      document.querySelectorAll('.dropdown-menu .dropdown-item').forEach(link => {
          link.addEventListener('click', function(e) {
              if (window.LoadingIndicator) {
                  window.LoadingIndicator.show('Sorting BOMs...', 'Applying sort: ' + this.textContent.trim());
              }
          });
      });

      // Add loading to search form submission
      document.querySelector('form').addEventListener('submit', function(e) {
          if (window.LoadingIndicator) {
              const searchTerm = document.getElementById('search').value;
              if (searchTerm) {
                  window.LoadingIndicator.show('Searching BOMs...', `Looking for "${searchTerm}"`);
              } else {
                  window.LoadingIndicator.show('Filtering BOMs...', 'Applying filters to BOM list');
              }
          }
      });

      // Add loading to quick filter buttons
      document.querySelectorAll('button[onclick*="quickFilter"]').forEach(btn => {
          btn.addEventListener('click', function(e) {
              if (window.LoadingIndicator) {
                  const filterType = this.onclick.toString().match(/quickFilter\('(.+?)'\)/)[1];
                  const filterName = {
                      'main': 'Main Assembly BOMs',
                      'withitems': 'BOMs with Components', 
                      'current': 'Current Version BOMs'
                  }[filterType] || 'BOMs';
                  window.LoadingIndicator.show('Filtering BOMs...', `Loading ${filterName}`);
              }
          });
      });

      // Add loading to More Actions dropdown items
      document.querySelectorAll('.dropdown-menu .dropdown-item').forEach(link => {
          link.addEventListener('click', function(e) {
              if (window.LoadingIndicator) {
                  if (this.href && this.href.includes('/Import')) {
                      window.LoadingIndicator.show('Loading BOM Importer...', 'Preparing CSV import');
                  } else if (this.href && this.href.includes('/DownloadSample')) {
                      window.LoadingIndicator.show('Generating Sample...', 'Creating sample CSV file');
                  }
              }
          });
      });
  });

  // Quick filter functions
  function quickFilter(type) {
      switch(type) {
          case 'main':
              document.getElementById('bomTypeFilter').value = 'main';
              break;
          case 'withitems':
              document.getElementById('bomTypeFilter').value = 'withitems';
              break;
          case 'current':
              document.getElementById('versionFilter').value = 'current';
              break;
      }

      // Submit the form
      document.querySelector('form').submit();
  }

  function clearAllFilters() {
      // Clear all form fields
      document.getElementById('search').value = '';
      document.getElementById('bomTypeFilter').value = '';
      document.getElementById('versionFilter').value = '';
      document.getElementById('assemblyFilter').value = '';

      // Navigate to clean URL
      window.location.href = '@Url.Action("Index")';
  }

  // ? ENHANCED: Beautiful confirmation for saving search
  async function saveSearch() {
      const searchData = {
          searchTerm: document.getElementById('searchTerm').value,
          bomTypeFilter: document.getElementById('bomTypeFilter').value,
          versionFilter: document.getElementById('versionFilter').value,
          assemblyFilter: document.getElementById('assemblyFilter').value
      };

      const hasFilters = Object.values(searchData).some(value => value && value.trim());
      
      if (!hasFilters) {
          await confirmDialog.confirm({
              title: 'No Search Criteria',
              message: 'There are no search criteria to save.',
              details: 'Please apply some filters before saving your search.',
              confirmText: 'OK',
              icon: 'fas fa-info-circle text-info',
              confirmClass: 'btn-primary'
          });
          return;
      }

      localStorage.setItem('savedBomSearch', JSON.stringify(searchData));
      
      await confirmDialog.confirm({
          title: 'Search Saved',
          message: 'Your search criteria have been saved successfully!',
          details: 'Use a browser bookmark to return to this search later.',
          confirmText: 'OK',
          icon: 'fas fa-check-circle text-success',
          confirmClass: 'btn-success'
      });
  }

  // ? ENHANCED: Beautiful confirmation for export
  async function exportBoms() {
      const confirmed = await confirmAction('export the filtered BOM results',
        `<div class="alert alert-info mt-2 mb-0">
          <i class="fas fa-info-circle me-1"></i>
          This will generate a CSV/Excel file with the current BOM list and applied filters.
         </div>`
      );

      if (confirmed) {
          // Build export URL with current filters
          const params = new URLSearchParams(window.location.search);
          params.set('export', 'true');

          // Show loading for export operation
          if (window.LoadingIndicator) {
              window.LoadingIndicator.showForOperation('generating-report');
          }

          // In a real application, this would trigger a CSV/Excel download
          setTimeout(async () => {
              if (window.LoadingIndicator) {
                  window.LoadingIndicator.hide();
              }
              
              await confirmDialog.confirm({
                  title: 'Export Complete',
                  message: 'Export functionality would download filtered results as CSV/Excel file.',
                  details: 'This is a placeholder for the actual export implementation.',
                  confirmText: 'OK',
                  icon: 'fas fa-download text-success',
                  confirmClass: 'btn-success'
              });
          }, 2000);
      }
  }

  @functions {
      public string GetPageUrl(int page)
      {
          var query = new System.Collections.Specialized.NameValueCollection();
          var request = Context.Request;
          foreach (var key in request.Query.Keys)
          {
              var k = key.ToString();
              if (!string.IsNullOrEmpty(k) && k != "page")
                  query[k] = request.Query[k];
          }
          query["page"] = page.ToString();

          var queryString = string.Join("&", query.AllKeys.Select(k => $"{k}={query[k]}"));
          return $"{request.Path}?{queryString}";
      }

      public string GetSortUrl(string newSortOrder)
      {
          var query = new System.Collections.Specialized.NameValueCollection();
          var request = Context.Request;
          foreach (var key in request.Query.Keys)
          {
              var k = key.ToString();
              if (!string.IsNullOrEmpty(k) && k != "sortOrder" && k != "page")
                  query[k] = request.Query[k];
          }
          query["sortOrder"] = newSortOrder;
          query["page"] = "1"; // Reset to first page when sorting

          var queryString = string.Join("&", query.AllKeys.Select(k => $"{k}={query[k]}"));
          return $"{request.Path}?{queryString}";
      }
  }
</script>

<!-- Keep the existing CSS styles -->
<style>
  /* Clickable row styles */
  .clickable-row {
    cursor: pointer;
    transition: background-color 0.2s ease;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
  }

    .clickable-row:hover {
      background-color: #f8f9fa !important;
    }

    .clickable-row:active {
      background-color: #e9ecef !important;
    }

    /* Ensure action buttons don't inherit pointer cursor */
    .clickable-row .btn-group {
      cursor: default;
    }

    /* Allow text selection in specific columns */
    .clickable-row td:nth-child(1),
    .clickable-row td:nth-child(2) {
      -webkit-user-select: text;
      -moz-user-select: text;
      -ms-user-select: text;
      user-select: text;
    }

  /* Badge styling */
  .badge {
    font-size: 0.75em;
  }

  /* Table responsive adjustments */
  .table-responsive {
    max-height: 70vh;
    overflow-y: auto;
  }

  #bomsTable tbody tr:hover {
    background-color: rgba(0,123,255,0.1);
  }

  .card-body.p-2 {
    padding: 0.5rem !important;
  }

  .btn-group-sm .btn {
    padding: 0.25rem 0.4rem;
    font-size: 0.75rem;
  }

  /* Sortable column headers */
  .table th a {
    text-decoration: none !important;
    color: inherit;
  }

  .table th a:hover {
    color: #ffc107 !important;
  }

  /* Responsive adjustments */
  @@media (max-width: 768px) {
    .btn-group-sm .btn {
      padding: 0.125rem 0.25rem;
      font-size: 0.65rem;
    }

    .clickable-row td {
      padding: 0.5rem 0.25rem;
    }

    /* Hide less important columns on mobile */
    .table th:nth-child(6), /* Sub-Assemblies */
    .table td:nth-child(6) {
      display: none;
    }
  }

  /* Card hover effects for stats */
  .card:hover {
    transform: translateY(-2px);
    transition: transform 0.2s ease;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  }
</style>