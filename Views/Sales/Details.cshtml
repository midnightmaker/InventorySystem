@using InventorySystem.Services
@model InventorySystem.Models.Sale
@{
  ViewData["Title"] = "Sale Details";
}

@{
  // Get adjustments for this sale using the new navigation property
  var saleAdjustments = Model.RelatedAdjustments?.ToList() ?? new List<CustomerBalanceAdjustment>();
  var totalAdjustments = saleAdjustments.Sum(a => a.AdjustmentAmount);
  var effectiveAmount = Model.TotalAmount - totalAdjustments;
}

<div class="d-flex justify-content-between align-items-center mb-4">
  <h1><i class="fas fa-shopping-cart"></i> Sale @Model.SaleNumber</h1>
  <div class="btn-group">
    <a href="/Sales" class="btn btn-outline-secondary">
      <i class="fas fa-arrow-left"></i> Back to Sales
    </a>
    <a href="/Sales/Edit/@Model.Id" class="btn btn-outline-primary">
      <i class="fas fa-edit"></i> Edit
    </a>
    @* Only show Add Item button for modifiable sales *@
    @if (Model.SaleStatus == SaleStatus.Processing || Model.SaleStatus == SaleStatus.Backordered)
    {
      <a href="/Sales/AddItem?saleId=@Model.Id" class="btn btn-success">
        <i class="fas fa-plus"></i> Add Item
      </a>
    }
    <a href="@Url.Action("InvoiceReport", new { saleId = Model.Id })"
       class="btn btn-primary">
      <i class="fas fa-file-invoice-dollar"></i> View Invoice
    </a>
    @if (Model.PaymentStatus != PaymentStatus.Paid)
    {
      <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#recordPaymentModal">
        <i class="fas fa-dollar-sign"></i> Record Payment
      </button>
    }
    
  </div>
  @if (Model.SaleStatus == SaleStatus.Shipped && Model.SaleStatus != SaleStatus.Cancelled)
  {
    <div class="card mt-3">
      <div class="card-header">
        <h6><i class="fas fa-tools"></i> Invoice Adjustments</h6>
      </div>
      <div class="card-body">
        <p class="text-muted small mb-3">
          Create adjustments for this specific invoice (allowances, discounts, write-offs)
        </p>

        <div class="d-grid gap-2 d-md-flex">
          <a href="/Accounting/CreateCustomerAdjustment?customerId=@Model.CustomerId&saleId=@Model.Id&type=allowance"
             class="btn btn-outline-primary btn-sm">
            <i class="fas fa-hand-holding-usd"></i> Sales Allowance
          </a>

          <a href="/Accounting/CreateCustomerAdjustment?customerId=@Model.CustomerId&saleId=@Model.Id&type=discount"
             class="btn btn-outline-success btn-sm">
            <i class="fas fa-percentage"></i> Sales Discount
          </a>

          <a href="/Accounting/CreateCustomerAdjustment?customerId=@Model.CustomerId&saleId=@Model.Id&type=writeoff"
             class="btn btn-outline-danger btn-sm">
            <i class="fas fa-exclamation-triangle"></i> Bad Debt Write-off
          </a>
        </div>
      </div>
    </div>
  }
</div>

@if (TempData["SuccessMessage"] != null)
{
  <div class="alert alert-success alert-dismissible fade show">
    <i class="fas fa-check-circle"></i> @TempData["SuccessMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

@if (TempData["ErrorMessage"] != null)
{
  <div class="alert alert-danger alert-dismissible fade show">
    <i class="fas fa-exclamation-triangle"></i> @TempData["ErrorMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

<!-- Sale Information Header -->
<div class="row mb-4">
  <div class="col-12">
    <div class="card">
      <div class="card-body">
        <div class="row">
          <div class="col-md-3">
            <dl class="row">
              <dt class="col-sm-6">Sale Date:</dt>
              <dd class="col-sm-6">@Model.SaleDate.ToString("MM/dd/yyyy")</dd>
              <dt class="col-sm-6">Due Date:</dt>
              <dd class="col-sm-6">@Model.PaymentDueDate.ToString("MM/dd/yyyy")</dd>
              <dt class="col-sm-6">Terms:</dt>
              <dd class="col-sm-6">@Model.Terms</dd>
            </dl>
          </div>
          <div class="col-md-3">
            <dl class="row">
              <dt class="col-sm-6">Sale Status:</dt>
              <dd class="col-sm-6">
                <span class="badge bg-@(Model.SaleStatus switch {
                  SaleStatus.Processing => "primary",
                  SaleStatus.Shipped => "success",
                  SaleStatus.Delivered => "info",
                  SaleStatus.Cancelled => "danger",
                  SaleStatus.Backordered => "warning",
                  _ => "secondary"
                })">@Model.SaleStatus</span>
              </dd>
              <dt class="col-sm-6">Payment:</dt>
              <dd class="col-sm-6">
                <span class="badge bg-@(Model.PaymentStatus switch {
                  PaymentStatus.Paid => "success",
                  PaymentStatus.Pending => "warning",
                  PaymentStatus.Overdue => "danger",
                  PaymentStatus.PartiallyPaid => "info",
                  _ => "secondary"
                })">@Model.PaymentStatus</span>
              </dd>
              @if (Model.IsOverdue)
              {
                <dt class="col-sm-6">Days Overdue:</dt>
                <dd class="col-sm-6"><span class="badge bg-danger">@Model.DaysOverdue</span></dd>
              }
            </dl>
          </div>
          <div class="col-md-3">
            @if (!string.IsNullOrEmpty(Model.OrderNumber))
            {
              <dl class="row">
                <dt class="col-sm-6">Order Number:</dt>
                <dd class="col-sm-6">@Model.OrderNumber</dd>
              </dl>
            }
            @if (!string.IsNullOrEmpty(Model.PaymentMethod))
            {
              <dl class="row">
                <dt class="col-sm-6">Payment Method:</dt>
                <dd class="col-sm-6">@Model.PaymentMethod</dd>
              </dl>
            }
          </div>
          <div class="col-md-3">
            @if (!string.IsNullOrEmpty(Model.Notes))
            {
              <dl class="row">
                <dt class="col-sm-12">Notes:</dt>
                <dd class="col-sm-12"><small class="text-muted">@Model.Notes</small></dd>
              </dl>
            }
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

@if (saleAdjustments.Any())
{
  <div class="row mb-4">
    <div class="col-12">
      <div class="card border-warning">
        <div class="card-header bg-warning text-dark">
          <h5 class="mb-0">
            <i class="fas fa-adjust"></i> Invoice Adjustments
            <span class="badge bg-dark ms-2">@saleAdjustments.Count Applied</span>
          </h5>
        </div>
        <div class="card-body">
          <!-- Adjustment Summary -->
          <div class="row mb-3">
            <div class="col-md-6">
              <h6>Financial Impact:</h6>
              <table class="table table-sm">
                <tr>
                  <td><strong>Original Invoice Amount:</strong></td>
                  <td class="text-end">@Model.TotalAmount.ToString("C")</td>
                </tr>
                <tr>
                  <td><strong>Total Adjustments:</strong></td>
                  <td class="text-end text-success">-@totalAdjustments.ToString("C")</td>
                </tr>
                <tr class="table-light">
                  <td><strong>Effective Amount:</strong></td>
                  <td class="text-end"><strong>@effectiveAmount.ToString("C")</strong></td>
                </tr>
              </table>
            </div>
            <div class="col-md-6">
              <h6>Quick Actions:</h6>
              <div class="btn-group-vertical d-grid gap-2">
                <a href="/Sales/GenerateRevisedInvoice/@Model.Id" class="btn btn-outline-primary btn-sm">
                  <i class="fas fa-file-invoice"></i> Generate Revised Invoice
                </a>
                <a href="/Accounting/CreateCustomerAdjustment?customerId=@Model.CustomerId&saleId=@Model.Id" class="btn btn-outline-success btn-sm">
                  <i class="fas fa-plus"></i> Add New Adjustment
                </a>
              </div>
            </div>
          </div>

          <!-- Adjustments List -->
          <h6>Applied Adjustments:</h6>
          <div class="table-responsive">
            <table class="table table-hover table-sm">
              <thead>
                <tr>
                  <th>Date</th>
                  <th>Type</th>
                  <th>Amount</th>
                  <th>Reason</th>
                  <th>Applied By</th>
                  <th class="text-center">Actions</th>
                </tr>
              </thead>
              <tbody>
                @foreach (var adjustment in saleAdjustments.OrderByDescending(a => a.AdjustmentDate))
                {
                  <tr>
                    <td>@adjustment.AdjustmentDate.ToString("MM/dd/yyyy")</td>
                    <td>
                      <span class="badge bg-@(adjustment.AdjustmentType == "Bad Debt Write-off" ? "danger" : "warning")">
                        @adjustment.AdjustmentType
                      </span>
                    </td>
                    <td class="text-end">
                      <strong class="text-success">@adjustment.AdjustmentAmount.ToString("C")</strong>
                    </td>
                    <td>
                      @if (adjustment.Reason.Length > 40)
                      {
                        <span title="@adjustment.Reason">
                          @adjustment.Reason.Substring(0, 40)...
                        </span>
                      }
                      else
                      {
                        @adjustment.Reason
                      }
                    </td>
                    <td>@adjustment.CreatedBy</td>
                    <td class="text-center">
                      <div class="btn-group btn-group-sm">
                        <a href="/Sales/GenerateRevisedInvoice/@Model.Id?adjustmentId=@adjustment.Id"
                           class="btn btn-outline-primary btn-sm" title="Revised Invoice for this adjustment">
                          <i class="fas fa-file-invoice"></i>
                        </a>
                        <a href="/Sales/GenerateCreditMemo?adjustmentId=@adjustment.Id"
                           class="btn btn-outline-success btn-sm" title="Generate Credit Memo">
                          <i class="fas fa-receipt"></i>
                        </a>
                      </div>
                    </td>
                  </tr>
                }
              </tbody>
            </table>
          </div>

          <!-- Impact Notice (FIXED STRING FORMATTING) -->
          <div class="alert alert-info mt-3">
            <h6><i class="fas fa-info-circle"></i> Payment Status Impact</h6>
            <p class="mb-0">
              Due to applied adjustments, the customer now owes
              <strong>@effectiveAmount.ToString("C")</strong>
              for this invoice instead of the original @Model.TotalAmount.ToString("C").
              @if (Model.PaymentStatus == PaymentStatus.Paid && effectiveAmount < Model.TotalAmount)
              {
                <span class="text-success">
                  <br><strong>Note:</strong> This invoice may be eligible for refund due to adjustments exceeding payments received.
                </span>
              }
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>
}
else
{
  <!-- No Adjustments - Show Option to Create -->
  <div class="row mb-4">
    <div class="col-12">
      <div class="card border-light">
        <div class="card-body text-center py-3">
          <div class="text-muted mb-2">
            <i class="fas fa-info-circle"></i>
            No adjustments have been applied to this invoice.
          </div>
          <a href="/Accounting/CreateCustomerAdjustment?customerId=@Model.CustomerId&saleId=@Model.Id"
             class="btn btn-outline-primary btn-sm">
            <i class="fas fa-plus"></i> Apply Customer Adjustment
          </a>
        </div>
      </div>
    </div>
  </div>
}

<div class="row">
  <div class="col-md-8">
    <!-- Sale Items -->
    <div class="card">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
          <i class="fas fa-list"></i> Sale Items
          @if (Model.SaleItems?.Any() == true)
          {
            <span class="badge bg-primary ms-2">@Model.SaleItems.Count items</span>
          }
        </h5>
        @* Only show Add Item button for modifiable sales *@
        @if (Model.SaleStatus == SaleStatus.Processing || Model.SaleStatus == SaleStatus.Backordered)
        {
          <a href="/Sales/AddItem?saleId=@Model.Id" class="btn btn-success btn-sm">
            <i class="fas fa-plus"></i> Add Item
          </a>
        }
      </div>
      <div class="card-body">
        @if (Model.SaleItems?.Any() == true)
        {
          <div class="table-responsive">
            <table class="table table-hover">
              <thead>
                <tr>
                  <th>Part Number</th>
                  <th>Description</th>
                  <th>Type</th>
                  <th class="text-center">Qty</th>
                  <th class="text-end">Unit Price</th>
                  <th class="text-end">Total</th>
                  @if (Model.SaleStatus == SaleStatus.Processing || Model.SaleStatus == SaleStatus.Backordered)
                  {
                    <th class="text-center">Actions</th>
                  }
                </tr>
              </thead>
              <tbody>
                @foreach (var item in Model.SaleItems)
                {
                  <tr>
                    <td>
                      <code>@item.ProductPartNumber</code>
                      @if (item.QuantityBackordered > 0)
                      {
                        <span class="badge bg-warning text-dark ms-1">Backordered</span>
                      }
                    </td>
                    <td>
                      <strong>@item.ProductName</strong>
                      @if (!string.IsNullOrEmpty(item.Notes))
                      {
                        <br><small class="text-muted">@item.Notes</small>
                      }
                    </td>
                    <td>
                      <span class="badge bg-secondary">
                        @(item.ItemId.HasValue ? "Item" : "Finished Good")
                      </span>
                    </td>
                    <td class="text-center">
                      <span class="badge bg-primary">@item.QuantitySold</span>
                      @if (item.QuantityBackordered > 0)
                      {
                        <br><small class="text-warning">(@item.QuantityBackordered backord.)</small>
                      }
                    </td>
                    <td class="text-end">@item.UnitPrice.ToString("C")</td>
                    <td class="text-end"><strong>@item.TotalPrice.ToString("C")</strong></td>
                    @if (Model.SaleStatus == SaleStatus.Processing || Model.SaleStatus == SaleStatus.Backordered)
                    {
                      <td class="text-center">
                        <form method="post" action="/Sales/RemoveItem" style="display: inline;"
                              onsubmit="return confirm('Remove this item from the sale?')">
                          @Html.AntiForgeryToken()
                          <input type="hidden" name="saleItemId" value="@item.Id" />
                          <input type="hidden" name="saleId" value="@Model.Id" />
                          <button type="submit" class="btn btn-sm btn-outline-danger"
                                  title="Remove Item">
                            <i class="fas fa-trash"></i>
                          </button>
                        </form>
                      </td>
                    }
                  </tr>
                }
              </tbody>
            </table>
          </div>
        }
        else
        {
          <div class="text-center py-3">
            <i class="fas fa-box-open fa-2x text-muted mb-2"></i>
            <p class="text-muted">No items added to this sale yet.</p>
            @* Only show Add First Item button for modifiable sales *@
            @if (Model.SaleStatus == SaleStatus.Processing || Model.SaleStatus == SaleStatus.Backordered)
            {
              <a href="/Sales/AddItem?saleId=@Model.Id" class="btn btn-success">
                <i class="fas fa-plus"></i> Add First Item
              </a>
            }
          </div>
        }
      </div>
    </div>
  </div>

  <div class="col-md-4">
    <!-- Sale Summary Card (UPDATED with adjustments) -->
    <div class="card">
      <div class="card-header">
        <h5><i class="fas fa-calculator"></i> Sale Summary</h5>
      </div>
      <div class="card-body">
        <table class="table table-sm">
          <tr>
            <td>Subtotal:</td>
            <td class="text-end">@Model.SubtotalAmount.ToString("C")</td>
          </tr>
          <tr>
            <td>Tax Amount:</td>
            <td class="text-end">@Model.TaxAmount.ToString("C")</td>
          </tr>
          <tr>
            <td>Shipping:</td>
            <td class="text-end">@Model.ShippingCost.ToString("C")</td>
          </tr>
          
          @if (totalAdjustments > 0)
          {
            <tr class="table-light">
              <td><strong>Original Total:</strong></td>
              <td class="text-end"><strong>@Model.TotalAmount.ToString("C")</strong></td>
            </tr>
            <tr class="table-warning">
              <td><strong>Adjustments:</strong></td>
              <td class="text-end text-success"><strong>-@totalAdjustments.ToString("C")</strong></td>
            </tr>
            <tr class="table-dark">
              <td><strong>Effective Total:</strong></td>
              <td class="text-end"><strong>@effectiveAmount.ToString("C")</strong></td>
            </tr>
          }
          else
          {
            <tr class="table-dark">
              <td><strong>Total:</strong></td>
              <td class="text-end"><strong>@Model.TotalAmount.ToString("C")</strong></td>
            </tr>
          }
        </table>

        @if (Model.SaleItems?.Any() == true)
        {
          <hr>
          <table class="table table-sm">
            <tr>
              <td>Total Cost:</td>
              <td class="text-end">@Model.SaleItems.Sum(si => si.TotalCost).ToString("C")</td>
            </tr>
            <tr class="@(Model.SaleItems.Sum(si => si.Profit) >= 0 ? "table-success" : "table-danger")">
              <td><strong>Gross Profit:</strong></td>
              <td class="text-end"><strong>@Model.SaleItems.Sum(si => si.Profit).ToString("C")</strong></td>
            </tr>
            
            @if (totalAdjustments > 0)
            {
              var adjustedProfit = Model.SaleItems.Sum(si => si.Profit) - totalAdjustments;
              <tr class="@(adjustedProfit >= 0 ? "table-info" : "table-danger")">
                <td><strong>Adjusted Profit:</strong></td>
                <td class="text-end"><strong>@adjustedProfit.ToString("C")</strong></td>
              </tr>
            }
          </table>
        }
      </div>
    </div>

    <!-- Customer Information -->
    @if (Model.Customer != null)
    {
      <div class="card mt-4">
        <div class="card-header">
          <h5><i class="fas fa-user"></i> Customer Information</h5>
        </div>
        <div class="card-body">
          <dl class="row">
            <dt class="col-sm-5">Name:</dt>
            <dd class="col-sm-7">
              <a href="/Customers/Details/@Model.Customer.Id" class="text-decoration-none">
                @Model.Customer.CustomerName
              </a>
            </dd>
            
            @if (!string.IsNullOrEmpty(Model.Customer.CompanyName))
            {
              <dt class="col-sm-5">Company:</dt>
              <dd class="col-sm-7">@Model.Customer.CompanyName</dd>
            }
            
            @if (!string.IsNullOrEmpty(Model.Customer.Email))
            {
              <dt class="col-sm-5">Email:</dt>
              <dd class="col-sm-7">
                <a href="mailto:@Model.Customer.Email">@Model.Customer.Email</a>
              </dd>
            }
            
            @if (!string.IsNullOrEmpty(Model.Customer.Phone))
            {
              <dt class="col-sm-5">Phone:</dt>
              <dd class="col-sm-7">@Model.Customer.Phone</dd>
            }
          </dl>
          
          <hr>
          <table class="table table-sm">
            <tr class="@(Model.Customer.OutstandingBalance > 0 ? "table-warning" : "table-success")">
              <td><strong>Outstanding Balance:</strong></td>
              <td class="text-end"><strong>@Model.Customer.OutstandingBalance.ToString("C")</strong></td>
            </tr>
            <tr>
              <td><strong>Credit Limit:</strong></td>
              <td class="text-end">@Model.Customer.CreditLimit.ToString("C")</td>
            </tr>
            <tr class="@(Model.Customer.CreditAvailable > 0 ? "table-success" : "table-danger")">
              <td><strong>Available Credit:</strong></td>
              <td class="text-end"><strong>@Model.Customer.CreditAvailable.ToString("C")</strong></td>
            </tr>
          </table>
          
          @if (Model.Customer.OutstandingBalance > Model.Customer.CreditLimit)
          {
            <div class="alert alert-danger alert-sm mt-2">
              <i class="fas fa-exclamation-triangle"></i>
              Customer is over credit limit by @((Model.Customer.OutstandingBalance - Model.Customer.CreditLimit).ToString("C"))
            </div>
          }
        </div>
      </div>
    }
  </div>
</div>

<!-- Payment Recording Modal -->
@if (Model.PaymentStatus != PaymentStatus.Paid)
{
  <div class="modal fade" id="recordPaymentModal" tabindex="-1" aria-labelledby="recordPaymentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <form asp-action="RecordPayment" method="post">
          <input type="hidden" name="saleId" value="@Model.Id" />
          <div class="modal-header">
            <h5 class="modal-title" id="recordPaymentModalLabel">
              <i class="fas fa-dollar-sign"></i> Record Payment - Sale @Model.SaleNumber
              @if (totalAdjustments > 0)
              {
                <span class="badge bg-warning text-dark">Adjusted</span>
              }
            </h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="mb-3">
              <label class="form-label">Sale Total</label>
              @if (totalAdjustments > 0)
              {
                <input type="text" class="form-control" 
                       value="@effectiveAmount.ToString("C") (Adjusted from @Model.TotalAmount.ToString("C"))" readonly />
                <div class="form-text text-warning">
                  <i class="fas fa-info-circle"></i>
                  This sale has adjustments totaling @totalAdjustments.ToString("C")
                </div>
              }
              else
              {
                <input type="text" class="form-control" value="@Model.TotalAmount.ToString("C")" readonly />
              }
            </div>
            <div class="mb-3">
              <label for="paymentAmount" class="form-label">Payment Amount *</label>
              <input type="number" step="0.01" class="form-control" id="paymentAmount" name="paymentAmount" 
                     value="@effectiveAmount" max="@effectiveAmount" min="0.01" required />
              <div class="form-text">Enter the amount received from the customer</div>
            </div>
            <div class="mb-3">
              <label for="paymentMethod" class="form-label">Payment Method *</label>
              <select class="form-select" id="paymentMethod" name="paymentMethod" required>
                <option value="">Select payment method...</option>
                <option value="Cash">Cash</option>
                <option value="Check">Check</option>
                <option value="Credit Card">Credit Card</option>
                <option value="Bank Transfer">Bank Transfer</option>
                <option value="PayPal">PayPal</option>
                <option value="Other">Other</option>
              </select>
            </div>
            <div class="mb-3">
              <label for="paymentDate" class="form-label">Payment Date *</label>
              <input type="date" class="form-control" id="paymentDate" name="paymentDate" 
                     value="@DateTime.Today.ToString("yyyy-MM-dd")" required />
            </div>
            <div class="mb-3">
              <label for="paymentNotes" class="form-label">Payment Notes</label>
              <textarea class="form-control" id="paymentNotes" name="paymentNotes" rows="2" 
                        placeholder="Check number, transaction ID, reference number, etc."></textarea>
              <div class="form-text">Optional notes about this payment</div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-success">
              <i class="fas fa-save"></i> Record Payment
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
}

<!-- Process Sale Confirmation Modal -->
<div class="modal fade" id="processSaleModal" tabindex="-1" aria-labelledby="processSaleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="processSaleModalLabel">
          <i class="fas fa-shipping-fast"></i> Process & Ship Sale
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="alert alert-warning" id="inventoryWarning" style="display: none;">
          <i class="fas fa-exclamation-triangle"></i>
          <strong>Inventory Impact:</strong>
          <p class="mb-2">This sale contains <span id="inventoryItemCount"></span> that will reduce inventory levels:</p>
          <ul id="inventoryItemsList" class="mb-0"></ul>
        </div>
        
        <div class="alert alert-info" id="noInventoryInfo" style="display: none;">
          <i class="fas fa-info-circle"></i>
          <strong>No Inventory Impact:</strong>
          <p class="mb-0">This sale contains only services and virtual items. No inventory will be reduced.</p>
        </div>

        <p>Are you sure you want to process and ship this sale? This action will:</p>
        <ul>
          <li>Mark the sale as <strong>Shipped</strong></li>
          <li>Reduce inventory levels for physical items</li>
          <li>Cannot be undone</li>
        </ul>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <form method="post" action="/Sales/ProcessSale/@Model.Id" style="display: inline;">
          @Html.AntiForgeryToken()
          <button type="submit" class="btn btn-primary">
            <i class="fas fa-shipping-fast"></i> Process & Ship Sale
          </button>
        </form>
      </div>
    </div>
  </div>
}