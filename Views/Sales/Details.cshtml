@model InventorySystem.Models.Sale
@{
  ViewData["Title"] = "Sale Details";
}

<div class="d-flex justify-content-between align-items-center mb-4">
  <h1><i class="fas fa-shopping-cart"></i> Sale @Model.SaleNumber</h1>
  <div class="btn-group">
    <a href="/Sales" class="btn btn-outline-secondary">
      <i class="fas fa-arrow-left"></i> Back to Sales
    </a>
    <a href="/Sales/Edit/@Model.Id" class="btn btn-outline-primary">
      <i class="fas fa-edit"></i> Edit
    </a>
    @* Only show Add Item button for modifiable sales *@
    @if (Model.SaleStatus == SaleStatus.Processing || Model.SaleStatus == SaleStatus.Backordered)
    {
      <a href="/Sales/AddItem?saleId=@Model.Id" class="btn btn-success">
        <i class="fas fa-plus"></i> Add Item
      </a>
    }
    <a href="@Url.Action("InvoiceReport", new { saleId = Model.Id })"
       class="btn btn-primary">
      <i class="fas fa-file-invoice-dollar"></i> View Invoice
    </a>
    @if (Model.PaymentStatus != PaymentStatus.Paid)
    {
      <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#recordPaymentModal">
        <i class="fas fa-dollar-sign"></i> Record Payment
      </button>
    }
  </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
  <div class="alert alert-success alert-dismissible fade show">
    @TempData["SuccessMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

@if (TempData["ErrorMessage"] != null)
{
  <div class="alert alert-danger alert-dismissible fade show">
    @TempData["ErrorMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

<div class="row">
  <div class="col-md-8">
    <div class="card">
      <div class="card-header">
        <h5><i class="fas fa-info-circle"></i> Sale Information</h5>
      </div>
      <div class="card-body">
        <dl class="row">
          <dt class="col-sm-3">Sale Number:</dt>
          <dd class="col-sm-9">@Model.SaleNumber</dd>

          <dt class="col-sm-3">Sale Date:</dt>
          <dd class="col-sm-9">@Model.SaleDate.ToString("MMMM dd, yyyy")</dd>

          <dt class="col-sm-3">Customer:</dt>
          <dd class="col-sm-9">
            @* FIXED: Use Customer relationship instead of legacy properties *@
            @if (Model.Customer != null)
            {
              <div>
                <strong>
                  <a href="/Customers/Details/@Model.Customer.Id" class="text-decoration-none">
                    @Model.Customer.CustomerName
                  </a>
                </strong>
                @if (!string.IsNullOrEmpty(Model.Customer.CompanyName))
                {
                  <br><small class="text-muted"><i class="fas fa-building"></i> @Model.Customer.CompanyName</small>
                }
                @if (!string.IsNullOrEmpty(Model.Customer.Email))
                {
                  <br><small class="text-muted"><i class="fas fa-envelope"></i> <a href="mailto:@Model.Customer.Email">@Model.Customer.Email</a></small>
                }
                @if (!string.IsNullOrEmpty(Model.Customer.Phone))
                {
                  <br><small class="text-muted"><i class="fas fa-phone"></i> @Model.Customer.Phone</small>
                }
              </div>
            }
            else
            {
              <span class="text-muted">Unknown Customer</span>
            }
          </dd>

          @if (!string.IsNullOrEmpty(Model.OrderNumber))
          {
            <dt class="col-sm-3">Order Number:</dt>
            <dd class="col-sm-9">@Model.OrderNumber</dd>
          }

          @if (!string.IsNullOrEmpty(Model.ShippingAddress))
          {
            <dt class="col-sm-3">Shipping Address:</dt>
            <dd class="col-sm-9">@Model.ShippingAddress</dd>
          }
          else if (Model.Customer?.FullShippingAddress != null)
          {
            <dt class="col-sm-3">Shipping Address:</dt>
            <dd class="col-sm-9">
              <small class="text-muted">Using customer default:</small><br>
              @Model.Customer.FullShippingAddress
            </dd>
          }

          <dt class="col-sm-3">Payment Status:</dt>
          <dd class="col-sm-9">
            @if (Model.PaymentStatus == PaymentStatus.Paid)
            {
              <span class="badge bg-success">Paid</span>
            }
            else if (Model.PaymentStatus == PaymentStatus.Pending)
            {
              <span class="badge bg-warning">Pending</span>
            }
            else
            {
              <span class="badge bg-danger">@Model.PaymentStatus</span>
            }
          </dd>

          <dt class="col-sm-3">Sale Status:</dt>
          <dd class="col-sm-9">
            @if (Model.SaleStatus == SaleStatus.Processing)
            {
              <span class="badge bg-primary">Processing</span>
            }
            else if (Model.SaleStatus == SaleStatus.Shipped)
            {
              <span class="badge bg-success">Shipped</span>
            }
            else if (Model.SaleStatus == SaleStatus.Delivered)
            {
              <span class="badge bg-info">Delivered</span>
            }
            else if (Model.SaleStatus == SaleStatus.Backordered)
            {
              <span class="badge bg-warning">Backordered</span>
            }
            else
            {
              <span class="badge bg-secondary">@Model.SaleStatus</span>
            }
          </dd>

          @if (!string.IsNullOrEmpty(Model.PaymentMethod))
          {
            <dt class="col-sm-3">Payment Method:</dt>
            <dd class="col-sm-9">@Model.PaymentMethod</dd>
          }

          <dt class="col-sm-3">Created Date:</dt>
          <dd class="col-sm-9">@Model.CreatedDate.ToString("MMMM dd, yyyy hh:mm tt")</dd>

          @if (!string.IsNullOrEmpty(Model.Notes))
          {
            <dt class="col-sm-3">Notes:</dt>
            <dd class="col-sm-9">@Model.Notes</dd>
          }

          <dt class="col-sm-3">Payment Terms:</dt>
          <dd class="col-sm-9">
            <span class="badge bg-info">@Model.Terms.ToString().Replace("Net", "Net ")</span>
          </dd>

          <dt class="col-sm-3">Payment Due Date:</dt>
          <dd class="col-sm-9">
            @Model.PaymentDueDate.ToString("MMMM dd, yyyy")
            @if (Model.IsOverdue)
            {
              <br>
              <span class="badge bg-danger">
                <i class="fas fa-exclamation-triangle"></i>
                OVERDUE by @Model.DaysOverdue days
              </span>
            }
            else if (Model.PaymentDueDate.Date == DateTime.Today)
            {
              <br>
              <span class="badge bg-warning text-dark">
                <i class="fas fa-clock"></i>
                Due Today
              </span>
            }
            else if (Model.PaymentDueDate.Date <= DateTime.Today.AddDays(7))
            {
              <br>
              <span class="badge bg-warning text-dark">
                <i class="fas fa-clock"></i>
                Due in @((Model.PaymentDueDate.Date - DateTime.Today).Days) days
              </span>
            }
          </dd>
        </dl>
      </div>
    </div>

    <div class="card mt-4">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h5><i class="fas fa-list"></i> Sale Items</h5>
        @* Only show Add Item button for modifiable sales *@
        @if (Model.SaleStatus == SaleStatus.Processing || Model.SaleStatus == SaleStatus.Backordered)
        {
          <a href="/Sales/AddItem?saleId=@Model.Id" class="btn btn-sm btn-success">
            <i class="fas fa-plus"></i> Add Item
          </a>
        }
        else
        {
          <span class="text-muted small">
            @if (Model.SaleStatus == SaleStatus.Shipped)
            {
              <text><i class="fas fa-info-circle"></i> Items cannot be modified - sale has been shipped</text>
            }
            else if (Model.SaleStatus == SaleStatus.Delivered)
            {
              <text><i class="fas fa-info-circle"></i> Items cannot be modified - sale has been delivered</text>
            }
            else if (Model.SaleStatus == SaleStatus.Cancelled)
            {
              <text><i class="fas fa-info-circle"></i> Items cannot be modified - sale has been cancelled</text>
            }
            else if (Model.SaleStatus == SaleStatus.Returned)
            {
              <text><i class="fas fa-info-circle"></i> Items cannot be modified - sale has been returned</text>
            }
          </span>
        }
      </div>
      <div class="card-body">
        @if (Model.SaleItems?.Any() == true)
        {
          <div class="table-responsive">
            <table class="table table-sm">
              <thead>
                <tr>
                  <th>Product</th>
                  <th>Quantity</th>
                  <th>Unit Price</th>
                  <th>Unit Cost</th>
                  <th>Total Price</th>
                  <th>Profit</th>
                  @* Only show Actions column for modifiable sales *@
                  @if (Model.SaleStatus == SaleStatus.Processing || Model.SaleStatus == SaleStatus.Backordered)
                  {
                    <th>Actions</th>
                  }
                </tr>
              </thead>
              <tbody>
                @foreach (var item in Model.SaleItems)
                {
                  <tr class="@(item.QuantityBackordered > 0 ? "table-warning" : "")">
                    <td>
                      <strong>@item.ProductPartNumber</strong><br>
                      <small class="text-muted">@item.ProductName</small>
                      @if (item.QuantityBackordered > 0)
                      {
                        <br><span class="badge bg-warning text-dark">
                          <i class="fas fa-hourglass-half"></i> @item.QuantityBackordered backordered
                        </span>
                      }
                    </td>
                    <td>@item.QuantitySold</td>
                    <td>@item.UnitPrice.ToString("C")</td>
                    <td>@item.UnitCost.ToString("C")</td>
                    <td>@item.TotalPrice.ToString("C")</td>
                    <td>
                      <span class="text-@(item.Profit >= 0 ? "success" : "danger")">
                        @item.Profit.ToString("C")
                      </span>
                      @if (item.TotalPrice > 0)
                      {
                        <br>
                        <small class="text-muted">(@item.ProfitMargin.ToString("F1")%)</small>
                      }
                    </td>
                    @* Only show remove button for modifiable sales *@
                    @if (Model.SaleStatus == SaleStatus.Processing || Model.SaleStatus == SaleStatus.Backordered)
                    {
                      <td>
                        <form asp-action="RemoveItem" method="post" style="display: inline;">
                          <input type="hidden" name="saleItemId" value="@item.Id" />
                          <input type="hidden" name="saleId" value="@Model.Id" />
                          <button type="submit" class="btn btn-sm btn-outline-danger"
                                  onclick="return confirm('Are you sure you want to remove this item?')">
                            <i class="fas fa-trash"></i>
                          </button>
                        </form>
                      </td>
                    }
                  </tr>
                }
              </tbody>
            </table>
          </div>
        }
        else
        {
          <div class="text-center py-3">
            <i class="fas fa-box-open fa-2x text-muted mb-2"></i>
            <p class="text-muted">No items added to this sale yet.</p>
            @* Only show Add First Item button for modifiable sales *@
            @if (Model.SaleStatus == SaleStatus.Processing || Model.SaleStatus == SaleStatus.Backordered)
            {
              <a href="/Sales/AddItem?saleId=@Model.Id" class="btn btn-success">
                <i class="fas fa-plus"></i> Add First Item
              </a>
            }
          </div>
        }
      </div>
    </div>
  </div>

  <div class="col-md-4">
    <div class="card">
      <div class="card-header">
        <h5><i class="fas fa-calculator"></i> Sale Summary</h5>
      </div>
      <div class="card-body">
        <table class="table table-sm">
          <tr>
            <td>Subtotal:</td>
            <td class="text-end">@Model.SubtotalAmount.ToString("C")</td>
          </tr>
          <tr>
            <td>Tax Amount:</td>
            <td class="text-end">@Model.TaxAmount.ToString("C")</td>
          </tr>
          <tr>
            <td>Shipping:</td>
            <td class="text-end">@Model.ShippingCost.ToString("C")</td>
          </tr>
          <tr class="table-dark">
            <td><strong>Total:</strong></td>
            <td class="text-end"><strong>@Model.TotalAmount.ToString("C")</strong></td>
          </tr>
        </table>

        @if (Model.SaleItems?.Any() == true)
        {
          <hr>
          <table class="table table-sm">
            <tr>
              <td>Total Cost:</td>
              <td class="text-end">@Model.SaleItems.Sum(si => si.TotalCost).ToString("C")</td>
            </tr>
            <tr class="@(Model.SaleItems.Sum(si => si.Profit) >= 0 ? "table-success" : "table-danger")">
              <td><strong>Total Profit:</strong></td>
              <td class="text-end"><strong>@Model.SaleItems.Sum(si => si.Profit).ToString("C")</strong></td>
            </tr>
          </table>
        }

        @if (Model.SaleStatus == SaleStatus.Processing && Model.SaleItems?.Any() == true)
        {
          <hr>
          <button type="button" class="btn btn-warning w-100" onclick="checkInventoryAndProcess(@Model.Id)">
            <i class="fas fa-shipping-fast"></i> Process & Ship Sale
          </button>
        }
      </div>
    </div>

    @* Backorder Information Card *@
    @if (Model.SaleItems?.Any(si => si.QuantityBackordered > 0) == true)
    {
      <div class="card mt-3">
        <div class="card-header bg-warning text-dark">
          <h5><i class="fas fa-hourglass-half"></i> Backorder Information</h5>
        </div>
        <div class="card-body">
          <div class="alert alert-warning">
            <i class="fas fa-info-circle"></i>
            <strong>This sale has backordered items.</strong> Production may be needed to fulfill the complete order.
          </div>

          <div class="table-responsive">
            <table class="table table-sm">
              <thead>
                <tr>
                  <th>Product</th>
                  <th>Total Ordered</th>
                  <th>Available</th>
                  <th>Backordered</th>
                  <th>Backorder Value</th>
                </tr>
              </thead>
              <tbody>
                @foreach (var item in Model.SaleItems.Where(si => si.QuantityBackordered > 0))
                {
                  <tr>
                    <td>
                      <strong>@item.ProductPartNumber</strong>
                      <br>
                      <small class="text-muted">@item.ProductName</small>
                    </td>
                    <td>@item.QuantitySold</td>
                    <td>@item.QuantityAvailable</td>
                    <td>
                      <span class="badge bg-danger">@item.QuantityBackordered</span>
                    </td>
                    <td>@((item.QuantityBackordered * item.UnitPrice).ToString("C"))</td>
                  </tr>
                }
              </tbody>
            </table>
          </div>

          <div class="mt-3">
            <strong>Total Backorder Value: </strong>
            <span class="text-danger">
              @Model.SaleItems.Where(si => si.QuantityBackordered > 0).Sum(si => si.QuantityBackordered * si.UnitPrice).ToString("C")
            </span>
          </div>
        </div>
      </div>
    }

    @* Customer Credit Status Card *@
    @if (Model.Customer != null && Model.Customer.CreditLimit > 0)
    {
      <div class="card mt-3">
        <div class="card-header">
          <h5><i class="fas fa-credit-card"></i> Customer Credit Status</h5>
        </div>
        <div class="card-body">
          <table class="table table-sm">
            <tr>
              <td>Credit Limit:</td>
              <td class="text-end">@Model.Customer.CreditLimit.ToString("C")</td>
            </tr>
            <tr>
              <td>Outstanding Balance:</td>
              <td class="text-end">@Model.Customer.OutstandingBalance.ToString("C")</td>
            </tr>
            <tr class="@(Model.Customer.CreditAvailable > 0 ? "table-success" : "table-danger")">
              <td><strong>Available Credit:</strong></td>
              <td class="text-end"><strong>@Model.Customer.CreditAvailable.ToString("C")</strong></td>
            </tr>
          </table>
          
          @if (Model.Customer.OutstandingBalance > Model.Customer.CreditLimit)
          {
            <div class="alert alert-danger alert-sm mt-2">
              <i class="fas fa-exclamation-triangle"></i>
              Customer is over credit limit by @((Model.Customer.OutstandingBalance - Model.Customer.CreditLimit).ToString("C"))
            </div>
          }
        </div>
      </div>
    }
  </div>
</div>

<!-- Payment Recording Modal -->
@if (Model.PaymentStatus != PaymentStatus.Paid)
{
  <div class="modal fade" id="recordPaymentModal" tabindex="-1" aria-labelledby="recordPaymentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <form asp-action="RecordPayment" method="post">
          <input type="hidden" name="saleId" value="@Model.Id" />
          <div class="modal-header">
            <h5 class="modal-title" id="recordPaymentModalLabel">
              <i class="fas fa-dollar-sign"></i> Record Payment - Sale @Model.SaleNumber
            </h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="mb-3">
              <label class="form-label">Sale Total</label>
              <input type="text" class="form-control" value="$@Model.TotalAmount.ToString("N2")" readonly />
            </div>
            <div class="mb-3">
              <label for="paymentAmount" class="form-label">Payment Amount *</label>
              <input type="number" step="0.01" class="form-control" id="paymentAmount" name="paymentAmount" 
                     value="@Model.TotalAmount" max="@Model.TotalAmount" min="0.01" required />
              <div class="form-text">Enter the amount received from the customer</div>
            </div>
            <div class="mb-3">
              <label for="paymentMethod" class="form-label">Payment Method *</label>
              <select class="form-select" id="paymentMethod" name="paymentMethod" required>
                <option value="">Select payment method...</option>
                <option value="Cash">Cash</option>
                <option value="Check">Check</option>
                <option value="Credit Card">Credit Card</option>
                <option value="Bank Transfer">Bank Transfer</option>
                <option value="PayPal">PayPal</option>
                <option value="Other">Other</option>
              </select>
            </div>
            <div class="mb-3">
              <label for="paymentDate" class="form-label">Payment Date *</label>
              <input type="date" class="form-control" id="paymentDate" name="paymentDate" 
                     value="@DateTime.Today.ToString("yyyy-MM-dd")" required />
            </div>
            <div class="mb-3">
              <label for="paymentNotes" class="form-label">Payment Notes</label>
              <textarea class="form-control" id="paymentNotes" name="paymentNotes" rows="2" 
                        placeholder="Check number, transaction ID, reference number, etc."></textarea>
              <div class="form-text">Optional notes about this payment</div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-success">
              <i class="fas fa-save"></i> Record Payment
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
}

<!-- Process Sale Confirmation Modal -->
<div class="modal fade" id="processSaleModal" tabindex="-1" aria-labelledby="processSaleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="processSaleModalLabel">
          <i class="fas fa-shipping-fast"></i> Process & Ship Sale
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="alert alert-warning" id="inventoryWarning" style="display: none;">
          <i class="fas fa-exclamation-triangle"></i>
          <strong>Inventory Impact:</strong>
          <p class="mb-2">This sale contains <span id="inventoryItemCount"></span> that will reduce inventory levels:</p>
          <ul id="inventoryItemsList" class="mb-0"></ul>
        </div>
        
        <div class="alert alert-info" id="noInventoryInfo" style="display: none;">
          <i class="fas fa-info-circle"></i>
          <strong>No Inventory Impact:</strong>
          <p class="mb-0">This sale contains only services and virtual items. No inventory will be reduced.</p>
        </div>
        
        <div class="alert alert-primary" id="mixedItemsInfo" style="display: none;">
          <i class="fas fa-info-circle"></i>
          <strong>Mixed Items:</strong>
          <p class="mb-2">This sale contains both inventory and non-inventory items:</p>
          <ul class="mb-0">
            <li><span id="inventoryItemCountMixed"></span> will reduce inventory</li>
            <li><span id="nonInventoryItemCount"></span> (services/virtual) will not affect inventory</li>
          </ul>
        </div>

        <p class="mt-3">
          <strong>Are you sure you want to process this sale and mark it as shipped?</strong>
        </p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <form asp-action="ProcessSale" method="post" style="display: inline;">
          <input type="hidden" name="id" value="@Model.Id" />
          <button type="submit" class="btn btn-warning">
            <i class="fas fa-shipping-fast"></i> Yes, Process Sale
          </button>
        </form>
      </div>
    </div>
  </div>
</div>

<script>
// Payment amount validation for Sales Details modal
document.addEventListener('DOMContentLoaded', function() {
    const paymentAmountInput = document.getElementById('paymentAmount');
    
    if (paymentAmountInput) {
        paymentAmountInput.addEventListener('change', function() {
            const paymentAmount = parseFloat(this.value);
            const maxAmount = parseFloat(this.max);
            
            if (paymentAmount > maxAmount) {
                alert('Payment amount cannot exceed sale total of $' + maxAmount.toFixed(2));
                this.value = maxAmount.toFixed(2);
            }
            
            if (paymentAmount <= 0) {
                alert('Payment amount must be greater than zero');
                this.value = maxAmount.toFixed(2);
            }
        });
    }
});

// Check inventory impact and show appropriate modal for processing sale
async function checkInventoryAndProcess(saleId) {
    try {
        // Get information about which items track inventory
        const response = await fetch(`/Sales/GetSaleInventoryInfo?saleId=${saleId}`);
        const data = await response.json();
        
        if (!data.success) {
            alert('Error checking sale items: ' + data.message);
            return;
        }
        
        const inventoryItems = data.inventoryItems || [];
        const nonInventoryItems = data.nonInventoryItems || [];
        
        // Get modal elements
        const modal = new bootstrap.Modal(document.getElementById('processSaleModal'));
        const inventoryWarning = document.getElementById('inventoryWarning');
        const noInventoryInfo = document.getElementById('noInventoryInfo');
        const mixedItemsInfo = document.getElementById('mixedItemsInfo');
        const inventoryItemCount = document.getElementById('inventoryItemCount');
        const inventoryItemsList = document.getElementById('inventoryItemsList');
        const inventoryItemCountMixed = document.getElementById('inventoryItemCountMixed');
        const nonInventoryItemCount = document.getElementById('nonInventoryItemCount');
        
        // Hide all alert types first
        inventoryWarning.style.display = 'none';
        noInventoryInfo.style.display = 'none';
        mixedItemsInfo.style.display = 'none';
        
        if (inventoryItems.length === 0) {
            // No inventory items - safe to process without warning
            noInventoryInfo.style.display = 'block';
        } else if (nonInventoryItems.length === 0) {
            // Only inventory items - show inventory warning
            inventoryWarning.style.display = 'block';
            inventoryItemCount.textContent = `${inventoryItems.length} item${inventoryItems.length > 1 ? 's' : ''}`;
            
            // Build list of inventory items
            inventoryItemsList.innerHTML = '';
            inventoryItems.forEach(item => {
                const li = document.createElement('li');
                li.innerHTML = `<strong>${item.partNumber}</strong> - ${item.description} (Qty: ${item.quantity})`;
                inventoryItemsList.appendChild(li);
            });
        } else {
            // Mixed items - show both types
            mixedItemsInfo.style.display = 'block';
            inventoryItemCountMixed.textContent = `${inventoryItems.length} item${inventoryItems.length > 1 ? 's' : ''}`;
            nonInventoryItemCount.textContent = `${nonInventoryItems.length} item${nonInventoryItems.length > 1 ? 's' : ''}`;
        }
        
        // Show the modal
        modal.show();
        
    } catch (error) {
        console.error('Error checking inventory info:', error);
        // Fallback to simple confirmation if AJAX fails
        if (confirm('Process this sale and mark it as shipped?')) {
            // Create and submit the form programmatically since the form doesn't have an ID
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '/Sales/ProcessSale';
            
            // Add CSRF token
            const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]');
            if (csrfToken) {
                const csrfInput = document.createElement('input');
                csrfInput.type = 'hidden';
                csrfInput.name = '__RequestVerificationToken';
                csrfInput.value = csrfToken.value;
                form.appendChild(csrfInput);
            }
            
            // Add sale ID
            const idInput = document.createElement('input');
            idInput.type = 'hidden';
            idInput.name = 'id';
            idInput.value = saleId;
            form.appendChild(idInput);
            
            // Append to body and submit
            document.body.appendChild(form);
            form.submit();
        }
    }
}
</script>