@model InventorySystem.ViewModels.AddSaleItemViewModel
@{
  ViewData["Title"] = "Add Item to Sale";
}

<div class="d-flex justify-content-between align-items-center mb-4">
  <h1><i class="fas fa-plus"></i> Add Item to Sale</h1>
  <a href="/Sales/Details/@Model.SaleId" class="btn btn-outline-secondary">
    <i class="fas fa-arrow-left"></i> Back to Sale
  </a>
</div>

<div class="alert alert-info">
  <h6><i class="fas fa-info-circle"></i> Sale Information</h6>
  <p class="mb-0">Adding item to <strong>@ViewBag.SaleNumber</strong> for customer <strong>@ViewBag.CustomerName</strong></p>
</div>

@if (TempData["ErrorMessage"] != null)
{
  <div class="alert alert-danger alert-dismissible fade show">
    @TempData["ErrorMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

<form asp-action="AddItem" method="post">
  <input asp-for="SaleId" type="hidden" />

  <div class="row">
    <div class="col-md-8">
      <div class="card">
        <div class="card-header">
          <h5><i class="fas fa-box"></i> Product Selection</h5>
        </div>
        <div class="card-body">
          <div class="mb-3">
            <label asp-for="ProductType" class="form-label">Product Type *</label>
            <select asp-for="ProductType" class="form-select" id="productTypeSelect" onchange="toggleProductSelection()">
              <option value="Item">Items</option>
              <option value="FinishedGood">Finished Goods</option>
              <option value="ServiceType">Services</option>
            </select>
            <span asp-validation-for="ProductType" class="text-danger"></span>
          </div>

          <!-- Item Selection -->
          <div class="mb-3" id="itemSelection" style="display: block;">
            <label asp-for="ItemId" class="form-label">Select Item</label>
            <select asp-for="ItemId" class="form-select" asp-items="ViewBag.Items" id="itemSelect" onchange="loadProductDetails('Item', this.value)">
              <option value="">-- Select an Item --</option>
            </select>
            <span asp-validation-for="ItemId" class="text-danger"></span>
          </div>

          <!-- Finished Good Selection -->
          <div class="mb-3" id="finishedGoodSelection" style="display: none;">
            <label asp-for="FinishedGoodId" class="form-label">Select Finished Good</label>
            <select asp-for="FinishedGoodId" class="form-select" asp-items="ViewBag.FinishedGoods" id="finishedGoodSelect" onchange="loadProductDetails('FinishedGood', this.value)">
              <option value="">-- Select a Finished Good --</option>
            </select>
            <span asp-validation-for="FinishedGoodId" class="text-danger"></span>
          </div>

          <!-- ✅ Service Type Selection -->
          <div class="mb-3" id="serviceTypeSelection" style="display: none;">
            <label asp-for="ServiceTypeId" class="form-label">Select Service</label>
            <select asp-for="ServiceTypeId" class="form-select" asp-items="ViewBag.ServiceTypes" id="serviceTypeSelect" onchange="loadProductDetails('ServiceType', this.value)">
              <option value="">-- Select a Service --</option>
            </select>
            <span asp-validation-for="ServiceTypeId" class="text-danger"></span>
          </div>

          <!-- Product Information Display -->
          <div class="mb-3" id="productInfo" style="display: none;">
            <div class="alert alert-info">
              <h6><i class="fas fa-info-circle"></i> Product Information</h6>
              <div id="productDetails"></div>
            </div>
          </div>

          <!-- ✅ NEW: Backorder Warning -->
          <div class="mb-3" id="backorderWarning" style="display: none;">
            <div class="alert alert-warning">
              <h6><i class="fas fa-exclamation-triangle"></i> Insufficient Stock - Backorder Required</h6>
              <div id="backorderDetails"></div>
              <div class="mt-2">
                <strong>Note:</strong> This item will be added to the sale and marked as backordered. 
                The sale status will be updated to "Backordered" until sufficient stock becomes available.
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label asp-for="Quantity" class="form-label">Quantity *</label>
                <input asp-for="Quantity" class="form-control" type="number" min="1" onchange="calculateTotal(); checkBackorder();" />
                <span asp-validation-for="Quantity" class="text-danger"></span>
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label asp-for="UnitPrice" class="form-label">Unit Price *</label>
                <div class="input-group">
                  <span class="input-group-text">$</span>
                  <input asp-for="UnitPrice" class="form-control" type="number" step="0.01" min="0.01" onchange="calculateTotal()" />
                  <button type="button" class="btn btn-outline-secondary" id="suggestedPriceBtn" onclick="useSuggestedPrice()" style="display:none;">
                    <i class="fas fa-magic"></i> Use Suggested
                  </button>
                </div>
                <span asp-validation-for="UnitPrice" class="text-danger"></span>
              </div>
            </div>
          </div>

          <!-- Serial Number and Model Number (show conditionally) -->
          <div class="row" id="serialModelSection" style="display: none;">
            <div class="col-md-6">
              <div class="mb-3">
                <label asp-for="SerialNumber" class="form-label">Serial Number</label>
                <input asp-for="SerialNumber" class="form-control" />
                <span asp-validation-for="SerialNumber" class="text-danger"></span>
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label asp-for="ModelNumber" class="form-label">Model Number</label>
                <input asp-for="ModelNumber" class="form-control" />
                <span asp-validation-for="ModelNumber" class="text-danger"></span>
              </div>
            </div>
          </div>

          <div class="mb-3">
            <label asp-for="Notes" class="form-label">Notes</label>
            <textarea asp-for="Notes" class="form-control" rows="3" placeholder="Optional notes for this line item"></textarea>
            <span asp-validation-for="Notes" class="text-danger"></span>
          </div>
        </div>
      </div>
    </div>

    <div class="col-md-4">
      <div class="card">
        <div class="card-header">
          <h5><i class="fas fa-calculator"></i> Line Total</h5>
        </div>
        <div class="card-body">
          <div class="mb-3">
            <h4 id="lineTotal">$0.00</h4>
            <small class="text-muted">Quantity × Unit Price</small>
          </div>
          
          <div class="d-grid gap-2">
            <button type="submit" class="btn btn-primary" id="addToSaleBtn">
              <i class="fas fa-plus"></i> Add to Sale
            </button>
            <a href="/Sales/Details/@Model.SaleId" class="btn btn-outline-secondary">
              <i class="fas fa-times"></i> Cancel
            </a>
          </div>
        </div>
      </div>

      <!-- Stock Information (for Items and Finished Goods) -->
      <div class="card mt-3" id="stockInfo" style="display: none;">
        <div class="card-header">
          <h6><i class="fas fa-warehouse"></i> Stock Information</h6>
        </div>
        <div class="card-body">
          <div id="stockDetails"></div>
        </div>
      </div>

      <!-- Service Information (for Services) -->
      <div class="card mt-3" id="serviceInfo" style="display: none;">
        <div class="card-header">
          <h6><i class="fas fa-cogs"></i> Service Information</h6>
        </div>
        <div class="card-body">
          <div id="serviceDetails"></div>
        </div>
      </div>
    </div>
  </div>
</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        let currentProduct = null;
        let suggestedPrice = 0;

        console.log('AddItem page loaded - JavaScript initialized');

        function toggleProductSelection() {
            console.log('toggleProductSelection called');
            const productType = document.getElementById('productTypeSelect').value;
            console.log('Selected product type:', productType);
            
            // Hide all selections
            document.getElementById('itemSelection').style.display = 'none';
            document.getElementById('finishedGoodSelection').style.display = 'none';
            document.getElementById('serviceTypeSelection').style.display = 'none';
            
            // Clear selections
            document.getElementById('itemSelect').value = '';
            document.getElementById('finishedGoodSelect').value = '';
            document.getElementById('serviceTypeSelect').value = '';
            
            // Show appropriate selection
            if (productType === 'Item') {
                document.getElementById('itemSelection').style.display = 'block';
                console.log('Showing item selection');
            } else if (productType === 'FinishedGood') {
                document.getElementById('finishedGoodSelection').style.display = 'block';
                console.log('Showing finished good selection');
            } else if (productType === 'ServiceType') {
                document.getElementById('serviceTypeSelection').style.display = 'block';
                console.log('Showing service type selection');
            }
            
            // Clear product info
            clearProductInfo();
        }

        function loadProductDetails(productType, productId) {
            console.log('loadProductDetails called:', productType, productId);
            
            if (!productId) {
                clearProductInfo();
                return;
            }

            // Show loading state
            const productDetails = document.getElementById('productDetails');
            if (productDetails) {
                productDetails.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Loading product information...';
                document.getElementById('productInfo').style.display = 'block';
            }

            const url = `/Sales/GetProductInfoForLineItem?productType=${productType}&productId=${productId}`;
            console.log('Making AJAX call to:', url);

            fetch(url)
                .then(response => {
                    console.log('Response status:', response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Response data:', data);
                    if (data.success) {
                        displayProductInfo(data.productInfo);
                        
                        // Auto-fill suggested price
                        if (data.productInfo.suggestedPrice) {
                            suggestedPrice = data.productInfo.suggestedPrice;
                            document.getElementById('UnitPrice').value = suggestedPrice.toFixed(2);
                            
                            // Show suggested price button if available
                            const suggestedBtn = document.getElementById('suggestedPriceBtn');
                            if (data.productInfo.hasSalePrice) {
                                suggestedBtn.style.display = 'block';
                                suggestedBtn.className = 'btn btn-success';
                                suggestedBtn.innerHTML = '<i class="fas fa-check"></i> Set Price';
                            } else {
                                suggestedBtn.style.display = 'block';
                                suggestedBtn.className = 'btn btn-outline-info';
                                suggestedBtn.innerHTML = '<i class="fas fa-magic"></i> Calculated';
                            }
                        }
                        
                        calculateTotal();
                        checkBackorder(); // ✅ NEW: Check for backorder after loading product
                        
                        // Show/hide serial/model section based on product type
                        const serialModelSection = document.getElementById('serialModelSection');
                        if (productType === 'Item' || productType === 'FinishedGood') {
                            serialModelSection.style.display = 'block';
                        } else {
                            serialModelSection.style.display = 'none';
                        }
                    } else {
                        clearProductInfo();
                        alert('Error loading product information: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error in loadProductDetails:', error);
                    clearProductInfo();
                    alert('Error loading product information. Please check the browser console for details.');
                });
        }

        function displayProductInfo(productInfo) {
            console.log('displayProductInfo called with:', productInfo);
            
            const productDetails = document.getElementById('productDetails');
            const productInfoDiv = document.getElementById('productInfo');
            const stockInfo = document.getElementById('stockInfo');
            const serviceInfo = document.getElementById('serviceInfo');
            
            let html = `<strong>${productInfo.partNumber || productInfo.serviceCode || 'N/A'}</strong><br>`;
            html += `${productInfo.description || productInfo.serviceName || 'No description'}<br>`;
            
            if (productInfo.tracksInventory !== undefined && productInfo.tracksInventory !== false) {
                // Item or Finished Good
                html += `<small class="text-muted">Type: ${productInfo.itemType || 'Physical Product'}</small>`;
                
                // Show stock info
                const stockDetails = document.getElementById('stockDetails');
                let stockHtml = `<strong>Current Stock:</strong> ${productInfo.currentStock || 0}<br>`;
                stockHtml += `<strong>Tracks Inventory:</strong> ${productInfo.tracksInventory ? 'Yes' : 'No'}<br>`;
                if (productInfo.unitOfMeasure) {
                    stockHtml += `<strong>Unit:</strong> ${productInfo.unitOfMeasure}`;
                }
                stockDetails.innerHTML = stockHtml;
                stockInfo.style.display = 'block';
                serviceInfo.style.display = 'none';
            } else {
                // Service
                html += `<small class="text-muted">Type: Service</small>`;
                
                // Show service info
                const serviceDetails = document.getElementById('serviceDetails');
                let serviceHtml = `<strong>Standard Hours:</strong> ${productInfo.standardHours || 0}<br>`;
                serviceHtml += `<strong>Standard Rate:</strong> $${(productInfo.standardRate || 0).toFixed(2)}/hr<br>`;
                serviceHtml += `<strong>Standard Price:</strong> $${(productInfo.suggestedPrice || 0).toFixed(2)}`;
                if (productInfo.requiresEquipment) {
                    serviceHtml += `<br><small class="text-warning"><i class="fas fa-tools"></i> Requires Equipment</small>`;
                }
                serviceDetails.innerHTML = serviceHtml;
                serviceInfo.style.display = 'block';
                stockInfo.style.display = 'none';
            }
            
            productDetails.innerHTML = html;
            productInfoDiv.style.display = 'block';
            currentProduct = productInfo;
        }

        // ✅ NEW: Check if backorder is needed
        function checkBackorder() {
            console.log('checkBackorder called');
            
            if (!currentProduct || !currentProduct.tracksInventory) {
                // No backorder for services or non-inventory items
                document.getElementById('backorderWarning').style.display = 'none';
                updateAddButton(false);
                return;
            }

            const quantity = parseInt(document.getElementById('Quantity').value) || 0;
            const currentStock = currentProduct.currentStock || 0;
            
            if (quantity > currentStock) {
                // Backorder needed
                const availableQty = Math.max(0, currentStock);
                const backorderedQty = quantity - availableQty;
                
                const backorderDetails = document.getElementById('backorderDetails');
                backorderDetails.innerHTML = `
                    <strong>Requested Quantity:</strong> ${quantity}<br>
                    <strong>Available Stock:</strong> ${availableQty}<br>
                    <strong>Will be Backordered:</strong> <span class="text-warning">${backorderedQty}</span>
                `;
                
                document.getElementById('backorderWarning').style.display = 'block';
                updateAddButton(true);
            } else {
                // Sufficient stock
                document.getElementById('backorderWarning').style.display = 'none';
                updateAddButton(false);
            }
        }

        // ✅ NEW: Update the add button based on backorder status
        function updateAddButton(isBackorder) {
            const addBtn = document.getElementById('addToSaleBtn');
            if (isBackorder) {
                addBtn.innerHTML = '<i class="fas fa-exclamation-triangle"></i> Add with Backorder';
                addBtn.className = 'btn btn-warning';
            } else {
                addBtn.innerHTML = '<i class="fas fa-plus"></i> Add to Sale';
                addBtn.className = 'btn btn-primary';
            }
        }

        function clearProductInfo() {
            console.log('clearProductInfo called');
            document.getElementById('productInfo').style.display = 'none';
            document.getElementById('stockInfo').style.display = 'none';
            document.getElementById('serviceInfo').style.display = 'none';
            document.getElementById('backorderWarning').style.display = 'none'; // ✅ NEW
            document.getElementById('suggestedPriceBtn').style.display = 'none';
            document.getElementById('UnitPrice').value = '';
            currentProduct = null;
            suggestedPrice = 0;
            calculateTotal();
            updateAddButton(false); // ✅ NEW
        }

        function useSuggestedPrice() {
            if (suggestedPrice > 0) {
                document.getElementById('UnitPrice').value = suggestedPrice.toFixed(2);
                calculateTotal();
            }
        }

        function calculateTotal() {
            const quantity = parseFloat(document.getElementById('Quantity').value) || 0;
            const unitPrice = parseFloat(document.getElementById('UnitPrice').value) || 0;
            const total = quantity * unitPrice;
            
            document.getElementById('lineTotal').textContent = '$' + total.toFixed(2);
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOMContentLoaded - initializing page');
            toggleProductSelection();
            calculateTotal();
        });
    </script>
}