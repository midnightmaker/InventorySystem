@using InventorySystem.Models.Enums
@model InventorySystem.Models.Sale
@{
    ViewData["Title"] = "Create New Sale";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1><i class="fas fa-plus-circle"></i> Create New Sale</h1>
    <a href="/Sales" class="btn btn-outline-secondary">
        <i class="fas fa-arrow-left"></i> Back to Sales
    </a>
</div>

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-warning alert-dismissible fade show">
        <h6><i class="fas fa-exclamation-triangle"></i> Please correct the following errors:</h6>
        <ul class="mb-0">
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <li>@error.ErrorMessage</li>
            }
        </ul>
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<form asp-action="Create" method="post">
    @Html.AntiForgeryToken()
    
    <!-- Hidden fields to ensure proper model binding -->
    <input asp-for="Id" type="hidden" />
    <input asp-for="CreatedDate" type="hidden" />
    
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-user"></i> Customer Information</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="mb-3">
                                <label asp-for="CustomerId" class="form-label">Customer *</label>
                                <div class="position-relative">
                                    <!-- Enhanced Customer Search Input (similar to item search) -->
                                    <div class="input-group">
                                        <input type="text" 
                                               id="customerSearch" 
                                               class="form-control" 
                                               placeholder="Search customers by name, company, or email..." 
                                               autocomplete="off" />
                                        <span class="input-group-text">
                                            <i class="fas fa-search text-muted" id="customerSearchIcon"></i>
                                            <div class="spinner-border spinner-border-sm text-primary d-none" id="customerSearchSpinner"></div>
                                        </span>
                                        <a href="@Url.Action("Create", "Customers")" class="btn btn-outline-primary" target="_blank">
                                            <i class="fas fa-user-plus"></i> New Customer
                                        </a>
                                    </div>
                                    
                                    <!-- Customer Search Results Dropdown -->
                                    <div class="dropdown-menu w-100" id="customerSearchResults" style="max-height: 300px; overflow-y: auto; z-index: 1050;">
                                        <!-- Results will be populated here via JavaScript -->
                                    </div>
                                </div>
                                
                                <!-- THE MAIN CUSTOMER ID FIELD - This is the one that gets submitted -->
                                <input asp-for="CustomerId" type="hidden" />
                                <span asp-validation-for="CustomerId" class="text-danger"></span>
                                
                                <!-- Selected Customer Display -->
                                <div id="selectedCustomerDisplay" class="mt-2 d-none">
                                    <div class="alert alert-success py-2">
                                        <i class="fas fa-check-circle"></i>
                                        <strong>Selected:</strong> <span id="selectedCustomerInfo"></span>
                                        <button type="button" class="btn btn-sm btn-outline-secondary ms-2" id="clearCustomerSelection">
                                            <i class="fas fa-times"></i> Change
                                        </button>
                                    </div>
                                </div>
                                
                                <!-- Search Instructions -->
                                <div class="form-text">
                                    <i class="fas fa-info-circle"></i>
                                    Type to search for customers. Can't find the customer? <a href="@Url.Action("Create", "Customers")" target="_blank">Create a new customer</a> first.
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Customer Preview Card (Hidden by default) -->
                    <div id="customerPreview" class="card bg-light mt-3" style="display: none;">
                        <div class="card-body">
                            <h6><i class="fas fa-info-circle"></i> Customer Information</h6>
                            <div class="row">
                                <div class="col-md-6">
                                    <div id="customerDetails"></div>
                                </div>
                                <div class="col-md-6">
                                    <div id="customerStats"></div>
                                </div>
                            </div>
                            <div id="creditWarning" class="alert alert-warning mt-2" style="display: none;">
                                <i class="fas fa-exclamation-triangle"></i> <strong>Credit Warning:</strong> <span id="creditMessage"></span>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="OrderNumber" class="form-label">Order Number</label>
                                <input asp-for="OrderNumber" class="form-control" placeholder="Optional customer order reference" />
                                <span asp-validation-for="OrderNumber" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="PaymentMethod" class="form-label">Payment Method</label>
                                <select asp-for="PaymentMethod" class="form-select">
                                    <option value="">Select payment method...</option>
                                    <option value="Cash">Cash</option>
                                    <option value="Check">Check</option>
                                    <option value="Credit Card">Credit Card</option>
                                    <option value="Bank Transfer">Bank Transfer</option>
                                    <option value="Net Terms">Net Terms</option>
                                </select>
                                <span asp-validation-for="PaymentMethod" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label asp-for="ShippingAddress" class="form-label">Shipping Address</label>
                        <textarea asp-for="ShippingAddress" class="form-control" rows="3" placeholder="Enter shipping address or leave blank to use customer default"></textarea>
                        <span asp-validation-for="ShippingAddress" class="text-danger"></span>
                        <div class="form-text">
                            <button type="button" class="btn btn-link p-0" onclick="useCustomerShippingAddress()">
                                <i class="fas fa-copy"></i> Use customer's default shipping address
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card mt-4">
                <div class="card-header">
                    <h5><i class="fas fa-receipt"></i> Sale Details</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label asp-for="SaleDate" class="form-label">Sale Date *</label>
                                <input asp-for="SaleDate" class="form-control" type="date" onchange="updatePaymentDueDate()" />
                                <span asp-validation-for="SaleDate" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label asp-for="Terms" class="form-label">
                                    <i class="fas fa-calendar-check text-primary"></i>
                                    Payment Terms *
                                </label>
                                <select asp-for="Terms" class="form-select" onchange="updatePaymentDueDate()" id="paymentTerms">
                                    <option value="@((int)PaymentTerms.Immediate)">Immediate</option>
                                    <option value="@((int)PaymentTerms.Net10)">Net 10</option>
                                    <option value="@((int)PaymentTerms.Net30)" selected>Net 30</option>
                                    <option value="@((int)PaymentTerms.Net45)">Net 45</option>
                                    <option value="@((int)PaymentTerms.Net60)">Net 60</option>
                                </select>
                                <span asp-validation-for="Terms" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label asp-for="PaymentDueDate" class="form-label">Payment Due Date</label>
                                <input asp-for="PaymentDueDate" class="form-control" type="date" readonly />
                                <input asp-for="PaymentDueDate" type="hidden" />
                                <span asp-validation-for="PaymentDueDate" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="ShippingCost" class="form-label">Shipping Cost</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input asp-for="ShippingCost" type="number" class="form-control" placeholder="0.00" step="0.01" />
                                </div>
                                <span asp-validation-for="ShippingCost" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="TaxAmount" class="form-label">Tax Amount</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input asp-for="TaxAmount" type="number" class="form-control" placeholder="0.00" step="0.01" />
                                    <button type="button" class="btn btn-outline-secondary" onclick="calculateTax()" title="Auto-calculate tax">
                                        <i class="fas fa-calculator"></i>
                                    </button>
                                </div>
                                <span asp-validation-for="TaxAmount" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label asp-for="Notes" class="form-label">Notes</label>
                        <textarea asp-for="Notes" class="form-control" rows="3" placeholder="Add any additional notes for this sale..."></textarea>
                        <span asp-validation-for="Notes" class="text-danger"></span>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-info-circle"></i> Sale Information</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label asp-for="SaleNumber" class="form-label">Sale Number</label>
                        <input asp-for="SaleNumber" class="form-control" readonly />
                        <div class="form-text">Auto-generated upon creation</div>
                    </div>

                    <div class="row">
                        <div class="col-6">
                            <div class="mb-3">
                                <label asp-for="PaymentStatus" class="form-label">Payment Status</label>
                                <select asp-for="PaymentStatus" class="form-select">
                                    <option value="@((int)PaymentStatus.Pending)">Pending</option>
                                    <option value="@((int)PaymentStatus.Paid)">Paid</option>
                                    <option value="@((int)PaymentStatus.PartiallyPaid)">Partially Paid</option>
                                    <option value="@((int)PaymentStatus.Overdue)">Overdue</option>
                                </select>
                                <span asp-validation-for="PaymentStatus" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="mb-3">
                                <label asp-for="SaleStatus" class="form-label">Sale Status</label>
                                <select asp-for="SaleStatus" class="form-select">
                                    <option value="@((int)SaleStatus.Processing)">Processing</option>
                                    <option value="@((int)SaleStatus.Backordered)">Backordered</option>
                                    <option value="@((int)SaleStatus.Shipped)">Shipped</option>
                                    <option value="@((int)SaleStatus.Delivered)">Delivered</option>
                                    <option value="@((int)SaleStatus.Returned)">Returned</option>
                                </select>
                                <span asp-validation-for="SaleStatus" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <hr>
                    <div class="text-center">
                        <p class="text-muted mb-2">After creating the sale, you can:</p>
                        <ul class="list-unstyled text-start">
                            <li><i class="fas fa-plus text-primary"></i> Add sale items</li>
                            <li><i class="fas fa-file-invoice text-info"></i> Generate invoice</li>
                            <li><i class="fas fa-truck text-success"></i> Process shipment</li>
                        </ul>
                    </div>
                </div>
            </div>

            <!-- Credit Check Card -->
            <div class="card mt-3" id="creditCheckCard" style="display: none;">
                <div class="card-header">
                    <h5><i class="fas fa-credit-card"></i> Credit Check</h5>
                </div>
                <div class="card-body">
                    <div id="creditCheckContent">
                        <!-- Will be populated by JavaScript -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card mt-4">
        <div class="card-body">
            <div class="d-flex justify-content-between">
                <a href="/Sales" class="btn btn-outline-secondary">
                    <i class="fas fa-times"></i> Cancel
                </a>
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save"></i> Create Sale
                </button>
            </div>
        </div>
    </div>
</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
<script>
    let selectedCustomer = null;
    let customerSearchTimeout;

    // Helper function to escape HTML
    function escapeHtml(text) {
        if (!text) return '';
        return text.toString()
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    // Initialize
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Page loaded, initializing...');
        
        // Check if there are validation errors and hide loading indicator if so
        const hasValidationErrors = document.querySelectorAll('.text-danger, .alert-warning, .alert-danger').length > 0;
        if (hasValidationErrors) {
            console.log('Validation errors detected on page load, ensuring loading indicator is hidden');
            if (window.LoadingIndicator && window.LoadingIndicator.isShowing) {
                window.LoadingIndicator.hide(true); // Force hide
            }
            
            // Focus on the first error field
            const firstErrorField = document.querySelector('.is-invalid, .text-danger');
            if (firstErrorField) {
                const relatedInput = firstErrorField.previousElementSibling || 
                                   firstErrorField.parentElement.querySelector('input, select, textarea');
                if (relatedInput) {
                    relatedInput.focus();
                }
            }
        }
        
        updatePaymentDueDate();
        
        // Set today's date as default (date only, no time)
        const today = new Date();
        const dateString = today.toISOString().split('T')[0];
        const saleDateInput = document.getElementById('SaleDate');
        if (saleDateInput) {
            saleDateInput.value = dateString;
            updatePaymentDueDate();
        }
        
        // Debug: Check if customer search input exists
        const customerSearch = document.getElementById('customerSearch');
        if (customerSearch) {
            console.log('Customer search input found');
            customerSearch.focus(); // Focus on search input when page loads
        } else {
            console.error('Customer search input not found!');
        }
        
        // Debug: Check if form exists
        const form = document.querySelector('form[asp-action="Create"]');
        if (form) {
            console.log('Create sale form found');
        } else {
            console.error('Create sale form not found!');
        }
    });

    // Ensure loading indicator is hidden when page visibility changes (handles browser back/forward)
    document.addEventListener('visibilitychange', function() {
        if (document.visibilityState === 'visible' && window.LoadingIndicator && window.LoadingIndicator.isShowing) {
            console.log('Page became visible with loading indicator showing, hiding it');
            window.LoadingIndicator.hide(true);
        }
    });

    // Add page unload handler to cleanup loading indicator
    window.addEventListener('beforeunload', function() {
        if (window.LoadingIndicator && window.LoadingIndicator.isShowing) {
            console.log('Page unloading, hiding loading indicator');
            window.LoadingIndicator.hide(true);
        }
    });

    // Customer search functionality (similar to item search in Purchase Create)
    $('#customerSearch').on('input', function() {
        const query = $(this).val();
        console.log('Customer search input changed:', query);
        
        // Clear previous timeout
        clearTimeout(customerSearchTimeout);
        
        // Hide results if query is too short
        if (query.length < 2) {
            hideCustomerSearchResults();
            return;
        }

        // Show loading spinner
        showCustomerLoadingSpinner();

        // Debounce search
        customerSearchTimeout = setTimeout(function() {
            performCustomerSearch(query);
        }, 300);
    });

    // Show customer loading spinner
    function showCustomerLoadingSpinner() {
        $('#customerSearchIcon').addClass('d-none');
        $('#customerSearchSpinner').removeClass('d-none');
    }

    // Hide customer loading spinner
    function hideCustomerLoadingSpinner() {
        $('#customerSearchIcon').removeClass('d-none');
        $('#customerSearchSpinner').addClass('d-none');
    }

    // Hide customer search results
    function hideCustomerSearchResults() {
        $('#customerSearchResults').removeClass('show').hide();
    }

    // Show customer search results
    function showCustomerSearchResults() {
        $('#customerSearchResults').addClass('show').show();
    }

    // Perform customer search
    function performCustomerSearch(query) {
        console.log('Performing customer search for:', query);
        
        $.ajax({
            url: '@Url.Action("SearchCustomers")',
            type: 'GET',
            data: { query: query, page: 1, pageSize: 10 },
            success: function(response) {
                hideCustomerLoadingSpinner();
                
                console.log('Customer search response received:', response);
                
                if (response.success && response.customers && response.customers.length > 0) {
                    console.log('Displaying', response.customers.length, 'customer results');
                    displayCustomerSearchResults(response.customers, response.hasMore);
                } else {
                    console.log('No customers found or search failed');
                    displayCustomerNoResults(response.message || 'No customers found');
                }
            },
            error: function(xhr, status, error) {
                hideCustomerLoadingSpinner();
                console.error('Customer search AJAX Error:', status, error);
                displayCustomerNoResults('Error searching customers. Please try again.');
            }
        });
    }

    // Display customer search results
    function displayCustomerSearchResults(customers, hasMore) {
        console.log('displayCustomerSearchResults called with', customers.length, 'customers');
        
        let html = '';
        
        // Store customers data globally for easier access
        window.customerSearchResultsData = customers;
        
        customers.forEach(function(customer, index) {
            let creditBadge = '';
            if (customer.outstandingBalance > customer.creditLimit && customer.creditLimit > 0) {
                creditBadge = '<span class="badge bg-danger text-white ms-2">Over Credit</span>';
            } else if (customer.creditLimit > 0) {
                creditBadge = '<span class="badge bg-success text-white ms-2">Credit OK</span>';
            }
            
            html += `
                <a href="#" class="dropdown-item customer-result py-2" data-customer-index="${index}">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="flex-grow-1">
                            <div class="fw-bold">${escapeHtml(customer.displayText)} ${creditBadge}</div>
                            <div class="text-muted small">${escapeHtml(customer.email || 'No email')}</div>
                            <div class="text-muted small">${escapeHtml(customer.phone || 'No phone')} | Credit: $${customer.creditLimit.toLocaleString()}</div>
                        </div>
                        <div class="text-end">
                            <small class="badge bg-secondary">${escapeHtml(customer.customerType)}</small>
                        </div>
                    </div>
                </a>
            `;
        });

        if (hasMore) {
            html += '<div class="dropdown-header text-center text-muted"><small><em>Type more to refine search...</em></small></div>';
        }

        const $customerSearchResults = $('#customerSearchResults');
        $customerSearchResults.html(html);
        showCustomerSearchResults();
        
        console.log('Customer search results HTML updated, dropdown should be visible');
        
        // Bind click events to new results
        bindCustomerResultClicks();
    }

    // Display no customer results message
    function displayCustomerNoResults(message) {
        console.log('displayCustomerNoResults called with message:', message);
        
        const html = `
            <div class="dropdown-header text-center text-muted py-3">
                <i class="fas fa-search"></i> ${escapeHtml(message)}
            </div>
        `;
        
        const $customerSearchResults = $('#customerSearchResults');
        $customerSearchResults.html(html);
        showCustomerSearchResults();
    }

    // Bind click events to customer search results
    function bindCustomerResultClicks() {
        console.log('Binding click events to customer search results');
        
        $('.customer-result').off('click').on('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            const customerIndex = parseInt($(this).data('customer-index'));
            console.log('Customer clicked, index:', customerIndex);
            
            if (window.customerSearchResultsData && window.customerSearchResultsData[customerIndex]) {
                const customerData = window.customerSearchResultsData[customerIndex];
                console.log('Selected customer:', customerData);
                selectCustomer(customerData);
                hideCustomerSearchResults();
            } else {
                console.error('Customer data not found for index:', customerIndex);
            }
        });
    }

    // Select a customer
    function selectCustomer(customer) {
        console.log('selectCustomer called with:', customer);
        selectedCustomer = customer;
        
        // Set the main CustomerId field (the one that gets submitted)
        $('input[name="CustomerId"]').val(customer.id);
        
        // Update the search input
        $('#customerSearch').val(customer.displayText);
        
        // Show selected customer display
        $('#selectedCustomerInfo').text(customer.displayText);
        $('#selectedCustomerDisplay').removeClass('d-none');
        
        // Load full customer details and display preview
        loadFullCustomerDetails(customer.id);
        
        // Clear validation error if present
        $('span[data-valmsg-for="CustomerId"]').text('');
        
        console.log('Customer selected successfully. CustomerId field value:', $('input[name="CustomerId"]').val());
    }

    // Load full customer details for preview
    async function loadFullCustomerDetails(customerId) {
        try {
            const response = await fetch(`/Sales/GetCustomerDetails/${customerId}`);
            const result = await response.json();
            
            if (result.success) {
                selectedCustomer = result.data;
                displayCustomerPreview(result.data);
                loadCustomerPaymentTerms(result.data);
                $('#customerPreview').show();
                $('#creditCheckCard').show();
            }
        } catch (error) {
            console.error('Error loading customer details:', error);
        }
    }

    // Clear customer selection
    $('#clearCustomerSelection').on('click', function() {
        selectedCustomer = null;
        $('input[name="CustomerId"]').val('');
        $('#customerSearch').val('');
        $('#selectedCustomerDisplay').addClass('d-none');
        $('#customerPreview').hide();
        $('#creditCheckCard').hide();
        $('#customerSearch').focus();
    });

    // Hide customer search results when clicking outside
    $(document).on('click', function(e) {
        if (!$(e.target).closest('#customerSearch, #customerSearchResults').length) {
            hideCustomerSearchResults();
        }
    });

    // Update payment due date based on terms
    function updatePaymentDueDate() {
        const saleDate = new Date(document.getElementById('SaleDate').value);
        const terms = parseInt(document.getElementById('paymentTerms').value);
        
        if (saleDate) {
            const dueDate = new Date(saleDate);
            dueDate.setDate(dueDate.getDate() + terms);
            
            const dueDateString = dueDate.toISOString().split('T')[0];
            
            // Update both visible and hidden PaymentDueDate fields
            const visibleField = document.getElementById('PaymentDueDate');
            const hiddenFields = document.querySelectorAll('input[name="PaymentDueDate"][type="hidden"]');
            
            if (visibleField) {
                visibleField.value = dueDateString;
            }
            
            hiddenFields.forEach(field => {
                field.value = dueDateString;
            });
            
            console.log('Payment due date updated to:', dueDateString);
        }
    }

    function displayCustomerPreview(customer) {
        const detailsDiv = document.getElementById('customerDetails');
        const statsDiv = document.getElementById('customerStats');
        const creditWarning = document.getElementById('creditWarning');
        
        detailsDiv.innerHTML = `
            <strong>${customer.customerName}</strong><br>
            <small class="text-muted">${customer.email}</small><br>
            <small class="text-muted">${customer.phone || 'No phone'}</small><br>
            <span class="badge bg-info">${customer.customerType}</span>
        `;
        
        statsDiv.innerHTML = `
            <small class="text-muted">Total Sales:</small> <strong>$${customer.totalSales.toLocaleString()}</strong><br>
            <small class="text-muted">Orders:</small> <strong>${customer.salesCount}</strong><br>
            <small class="text-muted">Outstanding:</small> <strong>$${customer.outstandingBalance.toLocaleString()}</strong><br>
            <small class="text-muted">Credit Limit:</small> <strong>$${customer.creditLimit.toLocaleString()}</strong>
        `;

        // Show credit warning if over limit
        if (customer.creditLimit > 0 && customer.outstandingBalance > customer.creditLimit) {
            const overAmount = customer.outstandingBalance - customer.creditLimit;
            document.getElementById('creditMessage').textContent = 
                `Customer is over credit limit by $${overAmount.toLocaleString()}`;
            creditWarning.style.display = 'block';
        } else {
            creditWarning.style.display = 'none';
        }
    }

    function loadCustomerPaymentTerms(customer) {
        const termsSelect = document.getElementById('paymentTerms');
        
        // Set customer's default payment terms
        if (customer.defaultPaymentTerms !== undefined) {
            termsSelect.value = customer.defaultPaymentTerms;
            updatePaymentDueDate();
        }
    }

    function useCustomerShippingAddress() {
        if (selectedCustomer && selectedCustomer.fullShippingAddress) {
            document.getElementById('ShippingAddress').value = selectedCustomer.fullShippingAddress;
        } else {
            alert('No shipping address found for selected customer.');
        }
    }

    function calculateTax() {
        if (selectedCustomer && selectedCustomer.isTaxExempt) {
            document.getElementById('TaxAmount').value = '0.00';
            alert('Customer is tax exempt.');
            return;
        }

        // Basic tax calculation (you might want to implement more sophisticated logic)
        const subtotal = 0; // Would calculate from line items
        const shippingCost = parseFloat(document.getElementById('ShippingCost').value) || 0;
        const taxRate = 0.0725; // Default tax rate, could be configurable
        
        const taxableAmount = subtotal + shippingCost;
        const taxAmount = taxableAmount * taxRate;
        
        document.getElementById('TaxAmount').value = taxAmount.toFixed(2);
    }

    // Enhanced form submission handling with loading indicator management
    document.querySelector('form').addEventListener('submit', function(e) {
        console.log('Form submission started...');
        
        // Hide any loading indicator that might be showing from navigation
        if (window.LoadingIndicator && window.LoadingIndicator.isShowing) {
            console.log('Hiding navigation loading indicator before form submission');
            window.LoadingIndicator.hide(true); // Force hide
        }
        
        // Debug: Log all form data
        const formData = new FormData(this);
        console.log('Form data being submitted:');
        for (let [key, value] of formData.entries()) {
            console.log(`${key}: ${value}`);
        }
        
        // Check if customer is selected
        const customerId = $('input[name="CustomerId"]').val();
        if (!customerId) {
            alert('Please select a customer before creating the sale.');
            e.preventDefault();
            return false;
        }
        
        console.log('Customer selected:', customerId);
        
        // Check if payment due date is set
        const paymentDueDate = document.getElementById('PaymentDueDate').value;
        if (!paymentDueDate) {
            alert('Payment due date is required. Please select a sale date and payment terms.');
            e.preventDefault();
            return false;
        }
        
        console.log('Payment due date:', paymentDueDate);
        
        if (selectedCustomer && selectedCustomer.creditLimit > 0) {
            const totalAmount = calculateEstimatedTotal();
            const newBalance = selectedCustomer.outstandingBalance + totalAmount;
            
            if (newBalance > selectedCustomer.creditLimit) {
                const overAmount = newBalance - selectedCustomer.creditLimit;
                if (!confirm(`This sale will put the customer $${overAmount.toLocaleString()} over their credit limit. Continue anyway?`)) {
                    e.preventDefault();
                    return false;
                }
            }
        }
        
        console.log('Form validation passed, submitting...');
        
        // Show form submission loading indicator
        if (window.LoadingIndicator) {
            console.log('Showing form submission loading indicator');
            window.LoadingIndicator.show('Creating Sale...', 'Processing sale information', true);
        }
        
        return true;
    });

    function calculateEstimatedTotal() {
        const shipping = parseFloat(document.getElementById('ShippingCost').value) || 0;
        const tax = parseFloat(document.getElementById('TaxAmount').value) || 0;
        // Add logic to calculate subtotal from line items when they're implemented
        const subtotal = 0; // Placeholder, implement subtotal calculation
        
        return subtotal + shipping + tax;
    }
</script>
}

@section Styles {
    <style>
        /* Customer search dropdown styling (similar to item search) */
        #customerSearchResults {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            z-index: 1050;
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
            max-height: 300px;
            overflow-y: auto;
            display: none; /* Hidden by default */
        }

        #customerSearchResults.show {
            display: block !important;
        }

        /* Style dropdown items properly */
        #customerSearchResults .dropdown-item {
            padding: 0.75rem 1rem;
            border-bottom: 1px solid #f8f9fa;
            cursor: pointer;
            text-decoration: none;
            color: inherit;
        }

        #customerSearchResults .dropdown-item:last-child {
            border-bottom: none;
        }

        #customerSearchResults .dropdown-item:hover {
            background-color: #f8f9fa;
            color: inherit;
            text-decoration: none;
        }

        #customerSearchResults .dropdown-item:focus {
            background-color: #e9ecef;
            color: inherit;
            text-decoration: none;
        }

        /* Ensure spinner alignment */
        .spinner-border-sm {
            width: 1rem;
            height: 1rem;
        }

        /* Ensure proper positioning context */
        .position-relative {
            position: relative !important;
        }

        /* Badge styling in search results */
        #customerSearchResults .badge {
            font-size: 0.65rem;
        }

        /* Typography improvements */
        #customerSearchResults .fw-bold {
            font-weight: 600 !important;
        }

        #customerSearchResults .text-muted {
            color: #6c757d !important;
        }
    </style>
}