@model IEnumerable<InventorySystem.Models.Sale>
@{
    ViewData["Title"] = "Sales";
}

<div class="d-flex justify-content-between align-items-center mb-4">
  <h1><i class="fas fa-cash-register"></i> Sales</h1>
  <div class="btn-group">
    <a href="/Sales/Create" class="btn btn-success">
      <i class="fas fa-plus"></i> New Sale
    </a>
    <a href="/Sales/Backorders" class="btn btn-warning">
      <i class="fas fa-hourglass-half"></i> Backorders
      @{
        var backorderCount = Model?.Count(s => s.SaleStatus == InventorySystem.Models.Enums.SaleStatus.Backordered) ?? 0;
      }
      @if (backorderCount > 0)
      {
        <span class="badge bg-light text-dark">@backorderCount</span>
      }
    </a>
    <a href="/Sales/Reports" class="btn btn-outline-info">
      <i class="fas fa-chart-bar"></i> Reports
    </a>
  </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<div class="card">
    <div class="card-header">
        <h5><i class="fas fa-list"></i> Sales Records</h5>
    </div>
    <div class="card-body">
        @if (Model?.Any() == true)
        {
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>Sale #</th>
                            <th>Date</th>
                            <th>Customer</th>
                            <th>Items</th>
                            <th>Total</th>
                            <th>Payment Status</th>
                            <th>Sale Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var sale in Model.OrderByDescending(s => s.SaleDate))
                        {
                            <tr>
                                <td>
                                    <strong>@sale.SaleNumber</strong>
                                    @if (!string.IsNullOrEmpty(sale.OrderNumber))
                                    {
                                        <br><small class="text-muted">Order: @sale.OrderNumber</small>
                                    }
                                </td>
                                <td>@sale.SaleDate.ToString("MM/dd/yyyy")</td>
                                <td>
                                    @* FIXED: Use Customer relationship instead of legacy properties *@
                                    @if (sale.Customer != null)
                                    {
                                        <strong>
                                            <a href="/Customers/Details/@sale.Customer.Id" class="text-decoration-none">
                                                @sale.Customer.CustomerName
                                            </a>
                                        </strong>
                                        @if (!string.IsNullOrEmpty(sale.Customer.CompanyName))
                                        {
                                            <br><small class="text-muted">@sale.Customer.CompanyName</small>
                                        }
                                        @if (!string.IsNullOrEmpty(sale.Customer.Email))
                                        {
                                            <br><small class="text-muted">@sale.Customer.Email</small>
                                        }
                                    }
                                    else
                                    {
                                        <span class="text-muted">Unknown Customer</span>
                                    }
                                </td>
                                <td>
                                    <span class="badge bg-info">@sale.SaleItems.Count() items</span>
                                    @if (sale.HasBackorders)
                                    {
                                        <br><span class="badge bg-warning text-dark">
                                            <i class="fas fa-hourglass-half"></i> @sale.TotalBackorders backordered
                                        </span>
                                    }
                                </td>
                                <td>@sale.TotalAmount.ToString("C")</td>
                                <td>
                                    @if (sale.PaymentStatus == InventorySystem.Models.Enums.PaymentStatus.Paid)
                                    {
                                        <span class="badge bg-success">Paid</span>
                                    }
                                    else if (sale.PaymentStatus == InventorySystem.Models.Enums.PaymentStatus.Pending)
                                    {
                                        <span class="badge bg-warning">Pending</span>
                                        @if (sale.IsOverdue)
                                        {
                                            <br><small class="text-danger"><i class="fas fa-exclamation-triangle"></i> @sale.DaysOverdue days overdue</small>
                                        }
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger">@sale.PaymentStatus</span>
                                    }
                                </td>
                                <td>
                                    @if (sale.SaleStatus == InventorySystem.Models.Enums.SaleStatus.Processing)
                                    {
                                        <span class="badge bg-primary">Processing</span>
                                    }
                                    else if (sale.SaleStatus == InventorySystem.Models.Enums.SaleStatus.Shipped)
                                    {
                                        <span class="badge bg-success">Shipped</span>
                                    }
                                    else if (sale.SaleStatus == InventorySystem.Models.Enums.SaleStatus.Delivered)
                                    {
                                        <span class="badge bg-info">Delivered</span>
                                    }
                                    else if (sale.SaleStatus == InventorySystem.Models.Enums.SaleStatus.Backordered)
                                    {
                                        <span class="badge bg-warning">Backordered</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">@sale.SaleStatus</span>
                                    }
                                </td>
                                <td>
                                    <div class="btn-group btn-group-sm">
                                        <a href="/Sales/Details/@sale.Id" class="btn btn-outline-primary" title="View Details">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <a href="@Url.Action("InvoiceReport", new { saleId = sale.Id })" 
                                           class="btn btn-outline-success" title="View Invoice">
                                            <i class="fas fa-file-invoice-dollar"></i>
                                        </a>
                                        @if (sale.PaymentStatus != InventorySystem.Models.Enums.PaymentStatus.Paid)
                                        {
                                            <button type="button" class="btn btn-outline-warning" 
                                                    title="Record Payment" 
                                                    onclick="openPaymentModal(@sale.Id, '@sale.SaleNumber', @sale.TotalAmount)">
                                                <i class="fas fa-dollar-sign"></i>
                                            </button>
                                        }
                                        <a href="/Sales/Edit/@sale.Id" class="btn btn-outline-secondary" title="Edit Sale">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        @if (sale.Customer != null)
                                        {
                                            <a href="/Customers/Details/@sale.Customer.Id" class="btn btn-outline-info" title="View Customer">
                                                <i class="fas fa-user"></i>
                                            </a>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="row mt-4">
                <div class="col-md-12">
                    <div class="card bg-light">
                        <div class="card-body">
                            <div class="row text-center">
                                <div class="col-md-3">
                                    <h6>Total Sales: <span class="badge bg-primary">@Model.Count()</span></h6>
                                </div>
                                <div class="col-md-3">
                                    <h6>Total Value: <span class="badge bg-success">@Model.Sum(s => s.TotalAmount).ToString("C")</span></h6>
                                </div>
                                <div class="col-md-3">
                                    <h6>Paid: <span class="badge bg-success">@Model.Count(s => s.PaymentStatus == InventorySystem.Models.Enums.PaymentStatus.Paid)</span></h6>
                                </div>
                                <div class="col-md-3">
                                    <h6>Pending: <span class="badge bg-warning">@Model.Count(s => s.PaymentStatus == InventorySystem.Models.Enums.PaymentStatus.Pending)</span></h6>
                                </div>
                            </div>
                            
                            @* Additional Statistics Row *@
                            <div class="row text-center mt-3">
                                <div class="col-md-3">
                                    <h6>Shipped: <span class="badge bg-info">@Model.Count(s => s.SaleStatus == InventorySystem.Models.Enums.SaleStatus.Shipped)</span></h6>
                                </div>
                                <div class="col-md-3">
                                    <h6>Backorders: <span class="badge bg-warning">@Model.Count(s => s.SaleStatus == InventorySystem.Models.Enums.SaleStatus.Backordered)</span></h6>
                                </div>
                                <div class="col-md-3">
                                    <h6>Avg Sale: <span class="badge bg-secondary">@(Model.Any() ? Model.Average(s => s.TotalAmount).ToString("C") : "$0")</span></h6>
                                </div>
                                <div class="col-md-3">
                                    <h6>Overdue: <span class="badge bg-danger">@Model.Count(s => s.IsOverdue)</span></h6>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="fas fa-shopping-cart fa-3x text-muted mb-3"></i>
                <h4 class="text-muted">No Sales Records</h4>
                <p class="text-muted">Start creating sales to track your revenue.</p>
                <a href="/Sales/Create" class="btn btn-success">
                    <i class="fas fa-plus"></i> Create Your First Sale
                </a>
            </div>
        }
    </div>
</div>

<!-- Payment Recording Modal for Sales Index -->
<div class="modal fade" id="recordPaymentModalIndex" tabindex="-1" aria-labelledby="recordPaymentModalIndexLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <form asp-action="RecordPayment" method="post">
        <input type="hidden" name="saleId" id="modalSaleId" />
        <div class="modal-header">
          <h5 class="modal-title" id="recordPaymentModalIndexLabel">
            <i class="fas fa-dollar-sign"></i> Record Payment
          </h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <label class="form-label">Sale Number</label>
            <input type="text" class="form-control" id="modalSaleNumber" readonly />
          </div>
          <div class="mb-3">
            <label class="form-label">Sale Total</label>
            <input type="text" class="form-control" id="modalSaleTotal" readonly />
          </div>
          <div class="mb-3">
            <label for="modalPaymentAmount" class="form-label">Payment Amount *</label>
            <input type="number" step="0.01" class="form-control" id="modalPaymentAmount" name="paymentAmount" 
                   min="0.01" required />
            <div class="form-text">Enter the amount received from the customer</div>
          </div>
          <div class="mb-3">
            <label for="modalPaymentMethod" class="form-label">Payment Method *</label>
            <select class="form-select" id="modalPaymentMethod" name="paymentMethod" required>
              <option value="">Select payment method...</option>
              <option value="Cash">Cash</option>
              <option value="Check">Check</option>
              <option value="Credit Card">Credit Card</option>
              <option value="Bank Transfer">Bank Transfer</option>
              <option value="PayPal">PayPal</option>
              <option value="Other">Other</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="modalPaymentDate" class="form-label">Payment Date *</label>
            <input type="date" class="form-control" id="modalPaymentDate" name="paymentDate" 
                   value="@DateTime.Today.ToString("yyyy-MM-dd")" required />
          </div>
          <div class="mb-3">
            <label for="modalPaymentNotes" class="form-label">Payment Notes</label>
            <textarea class="form-control" id="modalPaymentNotes" name="paymentNotes" rows="2" 
                      placeholder="Check number, transaction ID, reference number, etc."></textarea>
            <div class="form-text">Optional notes about this payment</div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-success">
            <i class="fas fa-save"></i> Record Payment
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
function openPaymentModal(saleId, saleNumber, saleTotal) {
    // Set the sale information in the modal
    document.getElementById('modalSaleId').value = saleId;
    document.getElementById('modalSaleNumber').value = saleNumber;
    document.getElementById('modalSaleTotal').value = '$' + saleTotal.toFixed(2);
    document.getElementById('modalPaymentAmount').value = saleTotal.toFixed(2);
    document.getElementById('modalPaymentAmount').max = saleTotal;
    
    // Reset other fields
    document.getElementById('modalPaymentMethod').value = '';
    document.getElementById('modalPaymentNotes').value = '';
    document.getElementById('modalPaymentDate').value = '@DateTime.Today.ToString("yyyy-MM-dd")';
    
    // Update modal title
    document.getElementById('recordPaymentModalIndexLabel').innerHTML = 
        '<i class="fas fa-dollar-sign"></i> Record Payment - Sale ' + saleNumber;
    
    // Show the modal
    var modal = new bootstrap.Modal(document.getElementById('recordPaymentModalIndex'));
    modal.show();
}

// Payment amount validation
document.addEventListener('DOMContentLoaded', function() {
    const paymentAmountInput = document.getElementById('modalPaymentAmount');
    const saleTotal = document.getElementById('modalSaleTotal');
    
    if (paymentAmountInput) {
        paymentAmountInput.addEventListener('change', function() {
            const paymentAmount = parseFloat(this.value);
            const maxAmount = parseFloat(this.max);
            
            if (paymentAmount > maxAmount) {
                alert('Payment amount cannot exceed sale total of $' + maxAmount.toFixed(2));
                this.value = maxAmount.toFixed(2);
            }
        });
    }
});
</script>