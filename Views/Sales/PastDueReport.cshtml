@model IEnumerable<InventorySystem.Models.Sale>
@{
    ViewData["Title"] = "Past Due Sales Report";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1><i class="fas fa-exclamation-triangle text-danger"></i> Past Due Sales Report</h1>
    <div class="btn-group">
        <a href="/Sales/Reports" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left"></i> Back to Reports
        </a>
        <button class="btn btn-outline-primary" onclick="window.print()">
            <i class="fas fa-print"></i> Print Report
        </button>
    </div>
</div>

<!-- Summary Cards -->
<div class="row mb-4">
    <div class="col-md-4">
        <div class="card bg-danger text-white">
            <div class="card-body text-center">
                <h3>@Model.Count()</h3>
                <p class="mb-0">Overdue Sales</p>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card bg-warning text-dark">
            <div class="card-body text-center">
                <h3>@ViewBag.TotalOverdueAmount.ToString("C")</h3>
                <p class="mb-0">Total Overdue Amount</p>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card bg-info text-white">
            <div class="card-body text-center">
                <h3>@ViewBag.AverageDaysOverdue.ToString("F0")</h3>
                <p class="mb-0">Avg Days Overdue</p>
            </div>
        </div>
    </div>
</div>

@if (Model.Any())
{
    <div class="card">
        <div class="card-header">
            <h5><i class="fas fa-list"></i> Overdue Sales Details</h5>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Sale #</th>
                            <th>Customer</th>
                            <th>Sale Date</th>
                            <th>Due Date</th>
                            <th>Terms</th>
                            <th>Amount</th>
                            <th>Days Overdue</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var sale in Model)
                        {
                            <tr class="@(sale.DaysOverdue > 30 ? "table-danger" : sale.DaysOverdue > 7 ? "table-warning" : "")">
                                <td>
                                    <a href="/Sales/Details/@sale.Id">@sale.SaleNumber</a>
                                </td>
                                <td>
                                    @* FIXED: Use Customer relationship instead of legacy properties *@
                                    @if (sale.Customer != null)
                                    {
                                        <strong>
                                            <a href="/Customers/Details/@sale.Customer.Id" class="text-decoration-none">
                                                @sale.Customer.CustomerName
                                            </a>
                                        </strong>
                                        @if (!string.IsNullOrEmpty(sale.Customer.CompanyName))
                                        {
                                            <br><small class="text-muted">@sale.Customer.CompanyName</small>
                                        }
                                        @if (!string.IsNullOrEmpty(sale.Customer.Email))
                                        {
                                            <br><small class="text-muted"><i class="fas fa-envelope"></i> @sale.Customer.Email</small>
                                        }
                                        @if (!string.IsNullOrEmpty(sale.Customer.Phone))
                                        {
                                            <br><small class="text-muted"><i class="fas fa-phone"></i> @sale.Customer.Phone</small>
                                        }
                                    }
                                    else
                                    {
                                        <span class="text-muted">Unknown Customer</span>
                                    }
                                </td>
                                <td>@sale.SaleDate.ToString("MM/dd/yyyy")</td>
                                <td>@sale.PaymentDueDate.ToString("MM/dd/yyyy")</td>
                                <td>
                                    <span class="badge bg-secondary">@sale.Terms.ToString().Replace("Net", "Net ")</span>
                                </td>
                                <td>@sale.TotalAmount.ToString("C")</td>
                                <td>
                                    <span class="badge bg-@(sale.DaysOverdue > 30 ? "danger" : "warning")">
                                        @sale.DaysOverdue days
                                    </span>
                                </td>
                                <td>
                                    <div class="btn-group btn-group-sm">
                                        <a href="/Sales/Details/@sale.Id" class="btn btn-outline-primary" title="View Details">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <a href="/Sales/Edit/@sale.Id" class="btn btn-outline-warning" title="Edit Sale">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        @if (sale.Customer != null)
                                        {
                                            <a href="/Customers/Details/@sale.Customer.Id" class="btn btn-outline-info" title="View Customer">
                                                <i class="fas fa-user"></i>
                                            </a>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Customer Analysis Section -->
    <div class="card mt-4">
        <div class="card-header">
            <h5><i class="fas fa-user-exclamation"></i> Customer Analysis</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <h6>Customers with Multiple Overdue Sales</h6>
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Customer</th>
                                    <th>Overdue Sales</th>
                                    <th>Total Overdue</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    var customerGroups = Model
                                        .Where(s => s.Customer != null)
                                        .GroupBy(s => s.Customer)
                                        .Where(g => g.Count() > 1)
                                        .OrderByDescending(g => g.Sum(s => s.TotalAmount))
                                        .Take(5);
                                }
                                @foreach (var group in customerGroups)
                                {
                                    <tr>
                                        <td>
                                            <strong>@group.Key.CustomerName</strong>
                                            @if (!string.IsNullOrEmpty(group.Key.CompanyName))
                                            {
                                                <br><small class="text-muted">@group.Key.CompanyName</small>
                                            }
                                        </td>
                                        <td><span class="badge bg-danger">@group.Count()</span></td>
                                        <td><strong>@group.Sum(s => s.TotalAmount).ToString("C")</strong></td>
                                        <td>
                                            <a href="/Customers/Details/@group.Key.Id" class="btn btn-outline-info btn-sm">
                                                <i class="fas fa-user"></i> View Customer
                                            </a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="col-md-6">
                    <h6>Summary by Days Overdue</h6>
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Days Overdue</th>
                                    <th>Count</th>
                                    <th>Total Amount</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    var overdueRanges = new[]
                                    {
                                        new { Range = "1-7 days", Min = 1, Max = 7 },
                                        new { Range = "8-30 days", Min = 8, Max = 30 },
                                        new { Range = "31-60 days", Min = 31, Max = 60 },
                                        new { Range = "Over 60 days", Min = 61, Max = int.MaxValue }
                                    };
                                }
                                @foreach (var range in overdueRanges)
                                {
                                    var salesInRange = Model.Where(s => s.DaysOverdue >= range.Min && s.DaysOverdue <= range.Max);
                                    var count = salesInRange.Count();
                                    var total = salesInRange.Sum(s => s.TotalAmount);

                                    if (count > 0)
                                    {
                                        <tr class="@(range.Min > 30 ? "table-danger" : range.Min > 7 ? "table-warning" : "")">
                                            <td>@range.Range</td>
                                            <td><span class="badge bg-secondary">@count</span></td>
                                            <td><strong>@total.ToString("C")</strong></td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="text-center py-5">
        <i class="fas fa-check-circle fa-3x text-success mb-3"></i>
        <h4 class="text-success">No Past Due Sales!</h4>
        <p class="text-muted">All sales are either paid or within their payment terms.</p>
    </div>
}