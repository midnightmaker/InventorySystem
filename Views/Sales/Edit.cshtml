@using InventorySystem.Models.Enums
@model InventorySystem.Models.Sale
@{
  ViewData["Title"] = "Edit Sale";
}

<div class="d-flex justify-content-between align-items-center mb-4">
  <h1><i class="fas fa-edit"></i> Edit Sale @Model.SaleNumber</h1>
  <div class="btn-group">
    <a href="/Sales/Details/@Model.Id" class="btn btn-outline-secondary">
      <i class="fas fa-arrow-left"></i> Back to Details
    </a>
    <a href="/Sales" class="btn btn-outline-info">
      <i class="fas fa-list"></i> All Sales
    </a>
  </div>
</div>

@if (TempData["ErrorMessage"] != null)
{
  <div class="alert alert-danger alert-dismissible fade show">
    @TempData["ErrorMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

@if (TempData["SuccessMessage"] != null)
{
  <div class="alert alert-success alert-dismissible fade show">
    @TempData["SuccessMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

<form asp-action="Edit" method="post">
  <input asp-for="Id" type="hidden" />
  <input asp-for="SaleNumber" type="hidden" />
  <input asp-for="CreatedDate" type="hidden" />
  <input asp-for="CustomerId" type="hidden" />

  <div class="row">
    <div class="col-md-8">
      <div class="card">
        <div class="card-header">
          <h5><i class="fas fa-user"></i> Customer Information</h5>
        </div>
        <div class="card-body">
          @* FIXED: Display customer information using Customer relationship *@
          @if (Model.Customer != null)
          {
            <div class="alert alert-info">
              <div class="row">
                <div class="col-md-8">
                  <h6><i class="fas fa-user"></i> Current Customer</h6>
                  <strong>@Model.Customer.CustomerName</strong>
                  @if (!string.IsNullOrEmpty(Model.Customer.CompanyName))
                  {
                    <br><small class="text-muted">@Model.Customer.CompanyName</small>
                  }
                  @if (!string.IsNullOrEmpty(Model.Customer.Email))
                  {
                    <br><small class="text-muted"><i class="fas fa-envelope"></i> @Model.Customer.Email</small>
                  }
                  @if (!string.IsNullOrEmpty(Model.Customer.Phone))
                  {
                    <br><small class="text-muted"><i class="fas fa-phone"></i> @Model.Customer.Phone</small>
                  }
                </div>
                <div class="col-md-4 text-end">
                  <a href="/Customers/Details/@Model.Customer.Id" class="btn btn-outline-primary btn-sm">
                    <i class="fas fa-user"></i> View Customer
                  </a>
                </div>
              </div>
            </div>
          }
          else
          {
            <div class="alert alert-warning">
              <i class="fas fa-exclamation-triangle"></i> No customer associated with this sale.
            </div>
          }

          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label asp-for="OrderNumber" class="form-label">Order Number</label>
                <input asp-for="OrderNumber" class="form-control" />
                <span asp-validation-for="OrderNumber" class="text-danger"></span>
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label asp-for="PaymentMethod" class="form-label">Payment Method</label>
                <select asp-for="PaymentMethod" class="form-select">
                  <option value="">Select payment method...</option>
                  <option value="Cash">Cash</option>
                  <option value="Check">Check</option>
                  <option value="Credit Card">Credit Card</option>
                  <option value="Bank Transfer">Bank Transfer</option>
                  <option value="PayPal">PayPal</option>
                  <option value="Square"></option>
                  <option value="Stripe">Stripe</option>
                  <option value="Other">Other</option>
                </select>
                <span asp-validation-for="PaymentMethod" class="text-danger"></span>
              </div>
            </div>
          </div>

          <div class="mb-3">
            <label asp-for="ShippingAddress" class="form-label">Shipping Address</label>
            <textarea asp-for="ShippingAddress" class="form-control" rows="3" placeholder="@(Model.Customer?.FullShippingAddress ?? "Enter shipping address")"></textarea>
            <span asp-validation-for="ShippingAddress" class="text-danger"></span>
            @if (Model.Customer?.FullShippingAddress != null)
            {
              <div class="form-text">
                <button type="button" class="btn btn-link p-0" onclick="useCustomerShippingAddress()">
                  <i class="fas fa-copy"></i> Use customer's default shipping address
                </button>
              </div>
            }
          </div>
        </div>
      </div>

      <div class="card mt-4">
        <div class="card-header">
          <h5><i class="fas fa-receipt"></i> Sale Details</h5>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-md-4">
              <div class="mb-3">
                <label asp-for="SaleDate" class="form-label">Sale Date *</label>
                <input asp-for="SaleDate" class="form-control" type="date" onchange="updatePaymentDueDate()" />
                <span asp-validation-for="SaleDate" class="text-danger"></span>
              </div>
            </div>
            <div class="col-md-4">
              <div class="mb-3">
                <label asp-for="Terms" class="form-label">
                  <i class="fas fa-calendar-check text-primary"></i>
                  Payment Terms *
                </label>
                <select asp-for="Terms" class="form-select" onchange="updatePaymentDueDate()">
                  <option value="@((int)PaymentTerms.Immediate)">Immediate</option>
                  <option value="@((int)PaymentTerms.Net10)">Net 10</option>
                  <option value="@((int)PaymentTerms.Net30)">Net 30</option>
                  <option value="@((int)PaymentTerms.Net45)">Net 45</option>
                  <option value="@((int)PaymentTerms.Net60)">Net 60</option>
                </select>
                <span asp-validation-for="Terms" class="text-danger"></span>
              </div>
            </div>
            <div class="col-md-4">
              <div class="mb-3">
                <label asp-for="PaymentDueDate" class="form-label">
                  <i class="fas fa-clock text-warning"></i>
                  Payment Due Date
                </label>
                <input asp-for="PaymentDueDate" class="form-control" type="date" readonly style="background-color: #e9ecef;" />
                <input asp-for="PaymentDueDate" type="hidden" />
                <span asp-validation-for="PaymentDueDate" class="text-danger"></span>
                @if (Model.IsOverdue)
                {
                  <div class="form-text text-danger">
                    <i class="fas fa-exclamation-triangle"></i>
                    <strong>OVERDUE by @Model.DaysOverdue days!</strong>
                  </div>
                }
                @if (Model.PaymentDueDate.Date < DateTime.Today && Model.PaymentStatus != PaymentStatus.Paid)
                {
                  <div class="alert alert-warning mt-2">
                    <i class="fas fa-exclamation-triangle"></i>
                    <strong>Warning:</strong> This payment due date is in the past. Consider updating the terms or marking as paid.
                  </div>
                }
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-4">
              <div class="mb-3">
                <label asp-for="PaymentStatus" class="form-label">Payment Status *</label>
                <select asp-for="PaymentStatus" class="form-select">
                  <option value="@((int)PaymentStatus.Pending)">Pending</option>
                  <option value="@((int)PaymentStatus.Paid)">Paid</option>
                  <option value="@((int)PaymentStatus.PartiallyPaid)">Partially Paid</option>
                  <option value="@((int)PaymentStatus.Overdue)">Overdue</option>
                </select>
                <span asp-validation-for="PaymentStatus" class="text-danger"></span>
              </div>
            </div>
            <div class="col-md-4">
              <div class="mb-3">
                <label asp-for="SaleStatus" class="form-label">Sale Status *</label>
                <select asp-for="SaleStatus" class="form-select">
                  <option value="@((int)SaleStatus.Processing)">Processing</option>
                  <option value="@((int)SaleStatus.Backordered)">Backordered</option>
                  <option value="@((int)SaleStatus.Shipped)">Shipped</option>
                  <option value="@((int)SaleStatus.Delivered)">Delivered</option>
                  <option value="@((int)SaleStatus.Returned)">Returned</option>
                  <option value="@((int)SaleStatus.Cancelled)">Cancelled</option>
                </select>
                <span asp-validation-for="SaleStatus" class="text-danger"></span>
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label asp-for="TaxAmount" class="form-label">Tax Amount</label>
                <div class="input-group">
                  <span class="input-group-text">$</span>
                  <input asp-for="TaxAmount" class="form-control" step="0.01" />
                </div>
                <span asp-validation-for="TaxAmount" class="text-danger"></span>
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label asp-for="ShippingCost" class="form-label">Shipping Cost</label>
                <div class="input-group">
                  <span class="input-group-text">$</span>
                  <input asp-for="ShippingCost" class="form-control" step="0.01" />
                </div>
                <span asp-validation-for="ShippingCost" class="text-danger"></span>
              </div>
            </div>
          </div>

          <div class="mb-3">
            <label asp-for="Notes" class="form-label">Notes</label>
            <textarea asp-for="Notes" class="form-control" rows="3"></textarea>
            <span asp-validation-for="Notes" class="text-danger"></span>
          </div>
        </div>
      </div>
    </div>

    <div class="col-md-4">
      <div class="card">
        <div class="card-header">
          <h5><i class="fas fa-info-circle"></i> Sale Information</h5>
        </div>
        <div class="card-body">
          <dl class="row">
            <dt class="col-sm-5">Sale Number:</dt>
            <dd class="col-sm-7">@Model.SaleNumber</dd>

            <dt class="col-sm-5">Created:</dt>
            <dd class="col-sm-7">@Model.CreatedDate.ToString("MM/dd/yyyy")</dd>

            <dt class="col-sm-5">Items:</dt>
            <dd class="col-sm-7">
              <span class="badge bg-info">@Model.SaleItems.Count()</span>
            </dd>

            <dt class="col-sm-5">Current Total:</dt>
            <dd class="col-sm-7">@Model.TotalAmount.ToString("C")</dd>
          </dl>

          @if (Model.SaleItems?.Any() == true)
          {
            <div class="alert alert-info">
              <small><i class="fas fa-info-circle"></i> Tax and shipping changes will update the total automatically.</small>
            </div>
          }
        </div>
      </div>

      @if (Model.Customer != null && Model.Customer.CreditLimit > 0)
      {
        <div class="card mt-3">
          <div class="card-header">
            <h5><i class="fas fa-credit-card"></i> Customer Credit Status</h5>
          </div>
          <div class="card-body">
            <table class="table table-sm">
              <tr>
                <td>Credit Limit:</td>
                <td class="text-end">@Model.Customer.CreditLimit.ToString("C")</td>
              </tr>
              <tr>
                <td>Outstanding:</td>
                <td class="text-end">@Model.Customer.OutstandingBalance.ToString("C")</td>
              </tr>
              <tr class="@(Model.Customer.CreditAvailable > 0 ? "table-success" : "table-danger")">
                <td><strong>Available:</strong></td>
                <td class="text-end"><strong>@Model.Customer.CreditAvailable.ToString("C")</strong></td>
              </tr>
            </table>
            
            @if (Model.Customer.OutstandingBalance > Model.Customer.CreditLimit)
            {
              <div class="alert alert-danger alert-sm mt-2">
                <i class="fas fa-exclamation-triangle"></i>
                Customer is over credit limit!
              </div>
            }
          </div>
        </div>
      }

      <div class="card mt-3">
        <div class="card-header">
          <h5><i class="fas fa-save"></i> Actions</h5>
        </div>
        <div class="card-body">
          <div class="d-grid gap-2">
            <button type="submit" class="btn btn-primary">
              <i class="fas fa-save"></i> Update Sale
            </button>
            <a href="/Sales/Details/@Model.Id" class="btn btn-outline-secondary">
              <i class="fas fa-times"></i> Cancel
            </a>
          </div>

          <hr>

          <div class="d-grid">
            <a href="/Sales/AddItem?saleId=@Model.Id" class="btn btn-success">
              <i class="fas fa-plus"></i> Add Items
            </a>
          </div>
        </div>
      </div>

      @if (Model.SaleStatus == SaleStatus.Processing)
      {
        <div class="card mt-3 border-warning">
          <div class="card-header bg-warning">
            <h6><i class="fas fa-exclamation-triangle"></i> Processing Status</h6>
          </div>
          <div class="card-body">
            <p class="mb-2">This sale is still being processed. You can still modify it.</p>
            @if (Model.SaleItems?.Any() == true)
            {
              <form asp-action="ProcessSale" method="post">
                <input type="hidden" name="id" value="@Model.Id" />
                <button type="submit" class="btn btn-warning btn-sm w-100"
                        onclick="return confirm('This will ship the sale and reduce inventory. Continue?')">
                  <i class="fas fa-shipping-fast"></i> Process & Ship
                </button>
              </form>
            }
          </div>
        </div>
      }
    </div>
  </div>
</form>

@section Scripts {
  <script>
    // Auto-format currency inputs
    document.querySelectorAll('input[step="0.01"]').forEach(input => {
        input.addEventListener('blur', function() {
            if (this.value) {
                this.value = parseFloat(this.value).toFixed(2);
            }
        });
    });

    // Format date input
    const dateInput = document.querySelector('input[type="date"]');
    if (dateInput && dateInput.value) {
        // Ensure the date is in the correct format
        const date = new Date(dateInput.value);
        dateInput.value = date.toISOString().split('T')[0];
    }

    function updatePaymentDueDate() {
      const saleDateInput = document.querySelector('input[name="SaleDate"]');
      const termsSelect = document.querySelector('select[name="Terms"]');
      const dueDateInput = document.querySelector('input[name="PaymentDueDate"]:not([type="hidden"])');
      const hiddenDueDateInput = document.querySelector('input[name="PaymentDueDate"][type="hidden"]');
      
      if (saleDateInput.value && termsSelect.value) {
        const saleDate = new Date(saleDateInput.value);
        const termsDays = parseInt(termsSelect.value);
        
        const dueDate = new Date(saleDate);
        dueDate.setDate(dueDate.getDate() + termsDays);
        
        const dueDateString = dueDate.toISOString().split('T')[0];
        
        if (dueDateInput) {
          dueDateInput.value = dueDateString;
        }
        if (hiddenDueDateInput) {
          hiddenDueDateInput.value = dueDateString;
        }
      }
    }

    function useCustomerShippingAddress() {
      @if (Model.Customer?.FullShippingAddress != null)
      {
        <text>
        document.getElementById('ShippingAddress').value = '@Html.Raw(Model.Customer.FullShippingAddress.Replace("'", "\\'"))';
        </text>
      }
    }
    
    // Calculate initial due date on page load
    document.addEventListener('DOMContentLoaded', function() {
      updatePaymentDueDate();
    });
  </script>
}}