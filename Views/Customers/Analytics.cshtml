@model InventorySystem.Services.CustomerAnalytics
@{
    ViewData["Title"] = $"Customer Analytics - {Model.CustomerName}";
    var customer = ViewBag.Customer as InventorySystem.Models.Customer;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1><i class="fas fa-chart-line"></i> Customer Analytics - @Model.CustomerName</h1>
    <div class="btn-group">
        <a href="@Url.Action("Details", new { id = Model.CustomerId })" class="btn btn-outline-primary">
            <i class="fas fa-user"></i> Customer Details
        </a>
        <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left"></i> Back to Customers
        </a>
    </div>
</div>

@* Key Metrics Row *@
<div class="row mb-4">
    <div class="col-lg-3 col-md-6 mb-3">
        <div class="card text-center h-100">
            <div class="card-body">
                <div class="text-primary mb-2">
                    <i class="fas fa-dollar-sign fa-2x"></i>
                </div>
                <h3 class="card-title">$@Model.TotalSales.ToString("N2")</h3>
                <p class="card-text text-muted">Lifetime Value</p>
                <small class="text-success">
                    Average: $@Model.AverageOrderValue.ToString("N2") per order
                </small>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6 mb-3">
        <div class="card text-center h-100">
            <div class="card-body">
                <div class="text-info mb-2">
                    <i class="fas fa-shopping-cart fa-2x"></i>
                </div>
                <h3 class="card-title">@Model.TotalOrders</h3>
                <p class="card-text text-muted">Total Orders</p>
                <small class="text-info">
                    @if (Model.LastOrderDate.HasValue)
                    {
                        <text>Last order: @Model.LastOrderDate.Value.ToString("MM/dd/yyyy")</text>
                    }
                    else
                    {
                        <text>No orders yet</text>
                    }
                </small>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6 mb-3">
        <div class="card text-center h-100">
            <div class="card-body">
                <div class="text-warning mb-2">
                    <i class="fas fa-exclamation-circle fa-2x"></i>
                </div>
                <h3 class="card-title">$@Model.OutstandingBalance.ToString("N2")</h3>
                <p class="card-text text-muted">Outstanding Balance</p>
                <small class="@(Model.OutstandingBalance > 0 ? "text-warning" : "text-success")">
                    @if (Model.OutstandingBalance > 0)
                    {
                        <text>Needs attention</text>
                    }
                    else
                    {
                        <text>Current</text>
                    }
                </small>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6 mb-3">
        <div class="card text-center h-100">
            <div class="card-body">
                <div class="text-secondary mb-2">
                    <i class="fas fa-calendar fa-2x"></i>
                </div>
                <h3 class="card-title">@Model.DaysSinceLastOrder</h3>
                <p class="card-text text-muted">Days Since Last Order</p>
                <small class="@(Model.DaysSinceLastOrder > 90 ? "text-danger" : Model.DaysSinceLastOrder > 30 ? "text-warning" : "text-success")">
                    @if (Model.DaysSinceLastOrder > 90)
                    {
                        <text>Long time customer</text>
                    }
                    else if (Model.DaysSinceLastOrder > 30)
                    {
                        <text>May need follow-up</text>
                    }
                    else
                    {
                        <text>Recent activity</text>
                    }
                </small>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <!-- Sales Trend Chart -->
    <div class="col-lg-8 mb-4">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-chart-area"></i> Sales Trend</h5>
            </div>
            <div class="card-body">
                @if (Model.MonthlySalesHistory.Any())
                {
                    <canvas id="salesTrendChart" height="100"></canvas>
                }
                else
                {
                    <div class="text-center py-4">
                        <i class="fas fa-chart-line fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">No sales data available</h5>
                        <p class="text-muted">Sales history will appear here once the customer places orders.</p>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Customer Info Sidebar -->
    <div class="col-lg-4 mb-4">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-info-circle"></i> Customer Information</h5>
            </div>
            <div class="card-body">
                <table class="table table-borderless table-sm">
                    <tr>
                        <td><strong>Customer Type:</strong></td>
                        <td><span class="badge bg-info">@Model.CustomerType</span></td>
                    </tr>
                    <tr>
                        <td><strong>Active:</strong></td>
                        <td>
                            <span class="badge @(Model.IsActiveCustomer ? "bg-success" : "bg-secondary")">
                                @(Model.IsActiveCustomer ? "Yes" : "No")
                            </span>
                        </td>
                    </tr>
                    <tr>
                        <td><strong>First Order:</strong></td>
                        <td>@(Model.FirstOrderDate?.ToString("MM/dd/yyyy") ?? "N/A")</td>
                    </tr>
                    <tr>
                        <td><strong>Last Order:</strong></td>
                        <td>@(Model.LastOrderDate?.ToString("MM/dd/yyyy") ?? "N/A")</td>
                    </tr>
                    @if (customer != null)
                    {
                        <tr>
                            <td><strong>Credit Limit:</strong></td>
                            <td>$@customer.CreditLimit.ToString("N2")</td>
                        </tr>
                        <tr>
                            <td><strong>Available Credit:</strong></td>
                            <td>$@customer.CreditAvailable.ToString("N2")</td>
                        </tr>
                        <tr>
                            <td><strong>Payment Terms:</strong></td>
                            <td>@customer.DefaultPaymentTerms</td>
                        </tr>
                    }
                </table>
                
                <div class="mt-3">
                    <a href="/Sales/Create?customerId=@Model.CustomerId" class="btn btn-primary btn-sm w-100">
                        <i class="fas fa-plus"></i> Create New Sale
                    </a>
                </div>
            </div>
        </div>

        <!-- Customer Health Score -->
        <div class="card mt-3">
            <div class="card-header">
                <h5><i class="fas fa-heartbeat"></i> Customer Health Score</h5>
            </div>
            <div class="card-body">
                @{
                    // Calculate health score based on various factors
                    var healthScore = CalculateHealthScore(Model);
                    var healthColor = healthScore >= 80 ? "success" : healthScore >= 60 ? "warning" : "danger";
                    var healthText = healthScore >= 80 ? "Excellent" : healthScore >= 60 ? "Good" : "Needs Attention";
                }
                <div class="text-center mb-3">
                    <div class="display-4 text-@healthColor">@healthScore</div>
                    <div class="text-@healthColor"><strong>@healthText</strong></div>
                </div>
                
                <div class="progress mb-3" style="height: 20px;">
                    <div class="progress-bar bg-@healthColor" style="width: @healthScore%">
                        @healthScore%
                    </div>
                </div>

                <div class="small">
                    <div class="d-flex justify-content-between">
                        <span>Recent Activity:</span>
                        <span class="@(Model.DaysSinceLastOrder <= 30 ? "text-success" : Model.DaysSinceLastOrder <= 90 ? "text-warning" : "text-danger")">
                            @(Model.DaysSinceLastOrder <= 30 ? "✓" : Model.DaysSinceLastOrder <= 90 ? "⚠" : "✗")
                        </span>
                    </div>
                    <div class="d-flex justify-content-between">
                        <span>Credit Standing:</span>
                        <span class="@(Model.OutstandingBalance == 0 ? "text-success" : customer != null && customer.CreditLimit > 0 && Model.OutstandingBalance > customer.CreditLimit ? "text-danger" : "text-warning")">
                            @(Model.OutstandingBalance == 0 ? "✓" : customer != null && customer.CreditLimit > 0 && Model.OutstandingBalance > customer.CreditLimit ? "✗" : "⚠")
                        </span>
                    </div>
                    <div class="d-flex justify-content-between">
                        <span>Order Frequency:</span>
                        <span class="@(Model.TotalOrders >= 10 ? "text-success" : Model.TotalOrders >= 5 ? "text-warning" : "text-danger")">
                            @(Model.TotalOrders >= 10 ? "✓" : Model.TotalOrders >= 5 ? "⚠" : "✗")
                        </span>
                    </div>
                    <div class="d-flex justify-content-between">
                        <span>Order Value:</span>
                        <span class="@(Model.AverageOrderValue >= 1000 ? "text-success" : Model.AverageOrderValue >= 500 ? "text-warning" : "text-danger")">
                            @(Model.AverageOrderValue >= 1000 ? "✓" : Model.AverageOrderValue >= 500 ? "⚠" : "✗")
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Top Products -->
@if (Model.TopPurchasedProducts.Any())
{
    <div class="card">
        <div class="card-header">
            <h5><i class="fas fa-star"></i> Top Purchased Products</h5>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Rank</th>
                            <th>Product</th>
                            <th>Part Number</th>
                            <th class="text-end">Quantity</th>
                            <th class="text-end">Total Spent</th>
                            <th class="text-center">Orders</th>
                            <th class="text-end">Avg Price</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.TopPurchasedProducts.Count && i < 10; i++)
                        {
                            var product = Model.TopPurchasedProducts[i];
                            var avgPrice = product.QuantityPurchased > 0 ? product.TotalSpent / product.QuantityPurchased : 0;
                            
                            <tr>
                                <td>
                                    <span class="badge bg-@(i < 3 ? "warning" : "secondary")">
                                        @(i + 1)
                                    </span>
                                </td>
                                <td>
                                    <strong>@product.ProductName</strong>
                                </td>
                                <td>
                                    <code>@product.PartNumber</code>
                                </td>
                                <td class="text-end">
                                    <span class="badge bg-primary">@product.QuantityPurchased</span>
                                </td>
                                <td class="text-end">
                                    <strong>$@product.TotalSpent.ToString("N2")</strong>
                                </td>
                                <td class="text-center">
                                    <span class="badge bg-info">@product.OrderCount</span>
                                </td>
                                <td class="text-end">
                                    <small class="text-muted">$@avgPrice.ToString("N2")</small>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
else
{
    <div class="card">
        <div class="card-body text-center py-4">
            <i class="fas fa-box-open fa-3x text-muted mb-3"></i>
            <h5 class="text-muted">No product purchases yet</h5>
            <p class="text-muted">Product purchase history will appear here once the customer places orders.</p>
            <a href="/Sales/Create?customerId=@Model.CustomerId" class="btn btn-primary">
                <i class="fas fa-plus"></i> Create First Sale
            </a>
        </div>
    </div>
}

@* Monthly Sales Comparison *@
@if (Model.MonthlySalesHistory.Count >= 2)
{
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-chart-bar"></i> Monthly Performance Comparison</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        @{
                            var currentMonth = Model.MonthlySalesHistory.OrderByDescending(m => m.Year).ThenByDescending(m => m.Month).FirstOrDefault();
                            var previousMonth = Model.MonthlySalesHistory.OrderByDescending(m => m.Year).ThenByDescending(m => m.Month).Skip(1).FirstOrDefault();
                            
                            if (currentMonth != null && previousMonth != null)
                            {
                                var salesChange = previousMonth.SalesAmount > 0 ? ((currentMonth.SalesAmount - previousMonth.SalesAmount) / previousMonth.SalesAmount) * 100 : 0;
                                var orderChange = previousMonth.OrderCount > 0 ? ((currentMonth.OrderCount - previousMonth.OrderCount) / (decimal)previousMonth.OrderCount) * 100 : 0;
                                
                                <div class="col-md-6">
                                    <div class="card bg-light">
                                        <div class="card-body text-center">
                                            <h6 class="card-title">@currentMonth.MonthName @currentMonth.Year</h6>
                                            <h4 class="text-primary">$@currentMonth.SalesAmount.ToString("N2")</h4>
                                            <small class="text-muted">@currentMonth.OrderCount orders</small>
                                            
                                            <div class="mt-2">
                                                <span class="badge bg-@(salesChange >= 0 ? "success" : "danger")">
                                                    <i class="fas fa-@(salesChange >= 0 ? "arrow-up" : "arrow-down")"></i>
                                                    @Math.Abs(salesChange).ToString("F1")%
                                                </span>
                                                <small class="text-muted">vs previous month</small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="col-md-6">
                                    <div class="card bg-light">
                                        <div class="card-body text-center">
                                            <h6 class="card-title">@previousMonth.MonthName @previousMonth.Year</h6>
                                            <h4 class="text-secondary">$@previousMonth.SalesAmount.ToString("N2")</h4>
                                            <small class="text-muted">@previousMonth.OrderCount orders</small>
                                            
                                            <div class="mt-2">
                                                <span class="badge bg-secondary">Previous Month</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@functions {
    private int CalculateHealthScore(InventorySystem.Services.CustomerAnalytics analytics)
    {
        int score = 0;
        
        // Recent activity (25 points)
        if (analytics.DaysSinceLastOrder <= 30) score += 25;
        else if (analytics.DaysSinceLastOrder <= 90) score += 15;
        else if (analytics.DaysSinceLastOrder <= 180) score += 5;
        
        // Credit standing (25 points)
        if (analytics.OutstandingBalance == 0) score += 25;
        else
        {
            var customer = ViewBag.Customer as InventorySystem.Models.Customer;
            if (customer != null && customer.CreditLimit > 0)
            {
                var creditUsage = analytics.OutstandingBalance / customer.CreditLimit;
                if (creditUsage <= 0.5m) score += 20;
                else if (creditUsage <= 0.8m) score += 10;
                else if (creditUsage <= 1.0m) score += 5;
            }
            else
            {
                score += 15; // No credit limit but has outstanding balance
            }
        }
        
        // Order frequency (25 points)
        if (analytics.TotalOrders >= 20) score += 25;
        else if (analytics.TotalOrders >= 10) score += 20;
        else if (analytics.TotalOrders >= 5) score += 15;
        else if (analytics.TotalOrders >= 1) score += 10;
        
        // Order value (25 points)
        if (analytics.AverageOrderValue >= 2000) score += 25;
        else if (analytics.AverageOrderValue >= 1000) score += 20;
        else if (analytics.AverageOrderValue >= 500) score += 15;
        else if (analytics.AverageOrderValue >= 100) score += 10;
        else if (analytics.AverageOrderValue > 0) score += 5;
        
        return Math.Min(100, score);
    }
}

@section Scripts {
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    @if (Model.MonthlySalesHistory.Any())
    {
        <text>
        // Sales Trend Chart
        const ctx = document.getElementById('salesTrendChart').getContext('2d');
        new Chart(ctx, {
            type: 'line',
            data: {
                labels: [@Html.Raw(string.Join(",", Model.MonthlySalesHistory.Select(m => $"'{m.MonthName} {m.Year}'")))],
                datasets: [
                    {
                        label: 'Sales Amount',
                        data: [@string.Join(",", Model.MonthlySalesHistory.Select(m => m.SalesAmount))],
                        borderColor: 'rgb(75, 192, 192)',
                        backgroundColor: 'rgba(75, 192, 192, 0.1)',
                        tension: 0.4,
                        fill: true,
                        yAxisID: 'y'
                    },
                    {
                        label: 'Order Count',
                        data: [@string.Join(",", Model.MonthlySalesHistory.Select(m => m.OrderCount))],
                        borderColor: 'rgb(255, 99, 132)',
                        backgroundColor: 'rgba(255, 99, 132, 0.1)',
                        tension: 0.4,
                        yAxisID: 'y1'
                    }
                ]
            },
            options: {
                responsive: true,
                interaction: {
                    mode: 'index',
                    intersect: false,
                },
                plugins: {
                    title: {
                        display: true,
                        text: 'Customer Sales and Order Trends'
                    },
                    legend: {
                        display: true,
                        position: 'top'
                    }
                },
                scales: {
                    x: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Month'
                        }
                    },
                    y: {
                        type: 'linear',
                        display: true,
                        position: 'left',
                        title: {
                            display: true,
                            text: 'Sales Amount ($)'
                        },
                        ticks: {
                            callback: function(value) {
                                return '$' + value.toLocaleString();
                            }
                        }
                    },
                    y1: {
                        type: 'linear',
                        display: true,
                        position: 'right',
                        title: {
                            display: true,
                            text: 'Order Count'
                        },
                        grid: {
                            drawOnChartArea: false,
                        },
                        ticks: {
                            callback: function(value) {
                                return value;
                            }
                        }
                    }
                }
            }
        });
        </text>
    }

    // Auto-refresh analytics every 5 minutes
    setInterval(function() {
        if (document.hidden) return; // Don't refresh if tab is not active
        
        // You could implement auto-refresh of analytics data here
        console.log('Analytics auto-refresh check');
    }, 300000); // 5 minutes

    // Add click handlers for product recommendations
    document.addEventListener('DOMContentLoaded', function() {
        // Add any interactive functionality here
        console.log('Customer Analytics loaded for customer ID: @Model.CustomerId');
    });
</script>
}