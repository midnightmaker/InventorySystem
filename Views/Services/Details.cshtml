@model InventorySystem.ViewModels.ServiceOrderDetailsViewModel
@{
  ViewData["Title"] = $"Service Order {Model.ServiceOrder.ServiceOrderNumber}";
}

<div class="d-flex justify-content-between align-items-center mb-4">
  <h1><i class="fas fa-clipboard-list"></i> Service Order Details</h1>
  <div class="btn-group">
    <a href="@Url.Action("ServiceOrders")" class="btn btn-outline-secondary">
      <i class="fas fa-arrow-left"></i> Back to Service Orders
    </a>
    @if (Model.CanEdit)
    {
      <a href="@Url.Action("Edit", new { id = Model.ServiceOrder.Id })" class="btn btn-warning">
        <i class="fas fa-edit"></i> Edit
      </a>
    }
    @if (Model.CanStart)
    {
      <button class="btn btn-success" onclick="startService(@Model.ServiceOrder.Id)">
        <i class="fas fa-play"></i> Start Service
      </button>
    }
    @if (Model.CanComplete)
    {
      <button class="btn btn-primary" onclick="completeService(@Model.ServiceOrder.Id)">
        <i class="fas fa-check"></i> Complete Service
      </button>
    }
    <div class="btn-group" role="group">
      <button type="button" class="btn btn-info dropdown-toggle" data-bs-toggle="dropdown">
        <i class="fas fa-cogs"></i> Actions
      </button>
      <ul class="dropdown-menu">
        <li>
          <a class="dropdown-item" href="#" onclick="addTimeLog(@Model.ServiceOrder.Id)">
            <i class="fas fa-clock"></i> Log Time
          </a>
        </li>
        <li>
          <a class="dropdown-item" href="#" onclick="addMaterial(@Model.ServiceOrder.Id)">
            <i class="fas fa-plus"></i> Add Material
          </a>
        </li>
        <li><hr class="dropdown-divider"></li>
        <li>
          <a class="dropdown-item" href="#" onclick="updateStatus(@Model.ServiceOrder.Id)">
            <i class="fas fa-flag"></i> Update Status
          </a>
        </li>
        @if (Model.ServiceOrder.Customer?.Email != null)
        {
          <li>
            <a class="dropdown-item" href="mailto:@Model.ServiceOrder.Customer.Email?subject=Service Order @Model.ServiceOrder.ServiceOrderNumber Update">
              <i class="fas fa-envelope"></i> Email Customer
            </a>
          </li>
        }
      </ul>
    </div>
  </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
  <div class="alert alert-success alert-dismissible fade show">
    <i class="fas fa-check-circle"></i> @TempData["SuccessMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

@if (TempData["ErrorMessage"] != null)
{
  <div class="alert alert-danger alert-dismissible fade show">
    <i class="fas fa-exclamation-circle"></i> @TempData["ErrorMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

<!-- Main Service Order Information -->
@Html.AntiForgeryToken()

<div class="row">
  <div class="col-lg-8">
    <!-- Basic Information Card -->
    <div class="card mb-4">
      <div class="card-header">
        <h5>
          <i class="fas fa-info-circle"></i> Service Order Information
          <span class="badge bg-@(GetStatusBadgeColor(Model.ServiceOrder.Status)) ms-2">@Model.ServiceOrder.StatusDisplay</span>
          @if (Model.ServiceOrder.Priority == InventorySystem.Models.ServicePriority.Emergency)
          {
            <span class="badge bg-danger ms-1">EMERGENCY</span>
          }
          else if (Model.ServiceOrder.Priority == InventorySystem.Models.ServicePriority.Urgent)
          {
            <span class="badge bg-warning ms-1">URGENT</span>
          }
        </h5>
      </div>
      <div class="card-body">
        <div class="row">
          <div class="col-md-6">
            <div class="mb-3">
              <span class="fw-bold text-muted">Service Order Number:</span> 
              <span class="fw-bold">@Model.ServiceOrder.ServiceOrderNumber</span>
            </div>
            <div class="mb-3">
              <span class="fw-bold text-muted">Customer:</span>
              <div class="ms-3">
                <a href="/Customers/Details/@Model.Customer.Id" class="text-decoration-none fw-bold">
                  @Model.Customer.CustomerName
                </a>
                @if (!string.IsNullOrEmpty(Model.Customer.CompanyName))
                {
                  <br>
                  <small class="text-muted ms-3">@Model.Customer.CompanyName</small>
                }
                @if (!string.IsNullOrEmpty(Model.Customer.Email))
                {
                  <br>
                  <small class="ms-3"><a href="mailto:@Model.Customer.Email" class="text-decoration-none">@Model.Customer.Email</a></small>
                }
                @if (!string.IsNullOrEmpty(Model.Customer.Phone))
                {
                  <br>
                  <small class="ms-3"><a href="tel:@Model.Customer.Phone" class="text-decoration-none">@Model.Customer.Phone</a></small>
                }
              </div>
            </div>
            <div class="mb-3">
              <span class="fw-bold text-muted">Service Type:</span>
              <div class="ms-3">
                <span class="fw-bold">@Model.ServiceType.ServiceName</span>
                @if (!string.IsNullOrEmpty(Model.ServiceType.Description))
                {
                  <br>
                  <small class="text-muted ms-3">@Model.ServiceType.Description</small>
                }
              </div>
            </div>
            @if (Model.RelatedSale != null)
            {
              <div class="mb-3">
                <span class="fw-bold text-muted">Related Sale:</span>
                <div class="ms-3">
                  <a href="/Sales/Details/@Model.RelatedSale.Id" class="text-decoration-none">
                    @Model.RelatedSale.SaleNumber
                  </a>
                  <small class="text-muted"> - @Model.RelatedSale.TotalAmount.ToString("C")</small>
                </div>
              </div>
            }
          </div>
          <div class="col-md-6">
            <div class="mb-3">
              <span class="fw-bold text-muted">Request Date:</span> 
              <span>@Model.ServiceOrder.RequestDate.ToString("MMMM dd, yyyy")</span>
            </div>
            @if (Model.ServiceOrder.PromisedDate.HasValue)
            {
              <div class="mb-3">
                <span class="fw-bold text-muted">Promised Date:</span>
                <span class="@(Model.ServiceOrder.IsOverdue ? "text-danger fw-bold" : "")">
                  @Model.ServiceOrder.PromisedDate.Value.ToString("MMMM dd, yyyy")
                </span>
                @if (Model.ServiceOrder.IsOverdue)
                {
                  <br>
                  <small class="text-danger ms-3">@Model.ServiceOrder.DaysSinceRequest days overdue</small>
                }
              </div>
            }
            @if (Model.ServiceOrder.ScheduledDate.HasValue)
            {
              <div class="mb-3">
                <span class="fw-bold text-muted">Scheduled Date:</span> 
                <span>@Model.ServiceOrder.ScheduledDate.Value.ToString("MMMM dd, yyyy HH:mm")</span>
              </div>
            }
            @if (!string.IsNullOrEmpty(Model.ServiceOrder.AssignedTechnician))
            {
              <div class="mb-3">
                <span class="fw-bold text-muted">Assigned Technician:</span>
                <span class="badge bg-info ms-2">@Model.ServiceOrder.AssignedTechnician</span>
              </div>
            }
            <div class="mb-3">
              <span class="fw-bold text-muted">Priority:</span>
              <span class="badge bg-@(GetPriorityBadgeColor(Model.ServiceOrder.Priority)) ms-2">
                @Model.ServiceOrder.PriorityDisplay
              </span>
            </div>
            @if (!string.IsNullOrEmpty(Model.ServiceOrder.WorkLocation))
            {
              <div class="mb-3">
                <span class="fw-bold text-muted">Work Location:</span> 
                <span>@Model.ServiceOrder.WorkLocation</span>
              </div>
            }
          </div>
        </div>

        <!-- Equipment Details -->
        @if (!string.IsNullOrEmpty(Model.ServiceOrder.EquipmentDetails) ||
                !string.IsNullOrEmpty(Model.ServiceOrder.SerialNumber) ||
                !string.IsNullOrEmpty(Model.ServiceOrder.ModelNumber))
        {
          <hr>
          <h6><i class="fas fa-wrench"></i> Equipment Information</h6>
          <div class="row">
            @if (!string.IsNullOrEmpty(Model.ServiceOrder.EquipmentDetails))
            {
              <div class="col-md-12 mb-3">
                <span class="fw-bold text-muted">Equipment Details:</span>
                <div class="ms-3">@Model.ServiceOrder.EquipmentDetails</div>
              </div>
            }
            <div class="col-md-6">
              @if (!string.IsNullOrEmpty(Model.ServiceOrder.SerialNumber))
              {
                <div class="mb-3">
                  <span class="fw-bold text-muted">Serial Number:</span> 
                  <code>@Model.ServiceOrder.SerialNumber</code>
                </div>
              }
            </div>
            <div class="col-md-6">
              @if (!string.IsNullOrEmpty(Model.ServiceOrder.ModelNumber))
              {
                <div class="mb-3">
                  <span class="fw-bold text-muted">Model Number:</span> 
                  <code>@Model.ServiceOrder.ModelNumber</code>
                </div>
              }
            </div>
          </div>
        }

        <!-- Customer Request -->
        @if (!string.IsNullOrEmpty(Model.ServiceOrder.CustomerRequest))
        {
          <hr>
          <h6><i class="fas fa-comment"></i> Customer Request</h6>
          <div class="border p-3 bg-light rounded">
            @Model.ServiceOrder.CustomerRequest
          </div>
        }

        <!-- Service Notes -->
        @if (!string.IsNullOrEmpty(Model.ServiceOrder.ServiceNotes))
        {
          <hr>
          <h6><i class="fas fa-sticky-note"></i> Service Notes</h6>
          <div class="border p-3 bg-light rounded">
            @Model.ServiceOrder.ServiceNotes
          </div>
        }
      </div>
    </div>

    <!-- Shipment Readiness Card -->
    @if (Model.ServiceOrder.Status == InventorySystem.Models.ServiceOrderStatus.Completed || 
         Model.ServiceOrder.Status == InventorySystem.Models.ServiceOrderStatus.QualityCheck ||
         Model.ServiceOrder.Status == InventorySystem.Models.ServiceOrderStatus.Delivered)
    {
      <div class="card mb-4 @(GetShipmentReadinessCardClass(Model.ServiceOrder))">
        <div class="card-header">
          <h5>
            <i class="fas fa-shipping-fast"></i> Shipment Status
            @if (IsReadyForShipment(Model.ServiceOrder))
            {
              <span class="badge bg-success ms-2">
                <i class="fas fa-check-circle"></i> Ready for Shipment
              </span>
            }
            else
            {
              <span class="badge bg-warning ms-2">
                <i class="fas fa-clock"></i> Pending Actions
              </span>
            }
          </h5>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-md-8">
              <!-- Shipment Checklist -->
              <h6><i class="fas fa-clipboard-check"></i> Shipment Checklist</h6>
              <div class="list-group list-group-flush">
                <!-- Service Completion -->
                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                  <div>
                    <i class="fas fa-wrench me-2"></i>
                    <span class="fw-bold">Service Work Completed</span>
                  </div>
                  @if (Model.ServiceOrder.Status == InventorySystem.Models.ServiceOrderStatus.Completed || 
                       Model.ServiceOrder.Status == InventorySystem.Models.ServiceOrderStatus.Delivered)
                  {
                    <span class="badge bg-success">
                      <i class="fas fa-check"></i> Complete
                    </span>
                  }
                  else
                  {
                    <span class="badge bg-secondary">
                      <i class="fas fa-clock"></i> In Progress
                    </span>
                  }
                </div>

                <!-- Quality Control -->
                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                  <div>
                    <i class="fas fa-clipboard-check me-2"></i>
                    <span class="fw-bold">Quality Control</span>
                    @if (!Model.ServiceOrder.QcRequired)
                    {
                      <small class="text-muted">(Not Required)</small>
                    }
                  </div>
                  @if (!Model.ServiceOrder.QcRequired)
                  {
                    <span class="badge bg-success">
                      <i class="fas fa-check"></i> N/A
                    </span>
                  }
                  else if (Model.ServiceOrder.QcCompleted)
                  {
                    <span class="badge bg-success">
                      <i class="fas fa-check"></i> Passed
                    </span>
                  }
                  else
                  {
                    <span class="badge bg-warning">
                      <i class="fas fa-exclamation-triangle"></i> Required
                    </span>
                  }
                </div>

                <!-- Certificate -->
                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                  <div>
                    <i class="fas fa-certificate me-2"></i>
                    <span class="fw-bold">Service Certificate</span>
                    @if (!Model.ServiceOrder.CertificateRequired)
                    {
                      <small class="text-muted">(Not Required)</small>
                    }
                  </div>
                  @if (!Model.ServiceOrder.CertificateRequired)
                  {
                    <span class="badge bg-success">
                      <i class="fas fa-check"></i> N/A
                    </span>
                  }
                  else if (Model.ServiceOrder.CertificateGenerated)
                  {
                    <span class="badge bg-success">
                      <i class="fas fa-check"></i> Generated
                    </span>
                  }
                  else
                  {
                    <span class="badge bg-warning">
                      <i class="fas fa-exclamation-triangle"></i> Required
                    </span>
                  }
                </div>

                <!-- Worksheet -->
                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                  <div>
                    <i class="fas fa-file-alt me-2"></i>
                    <span class="fw-bold">Service Worksheet</span>
                    @if (!Model.ServiceOrder.WorksheetRequired)
                    {
                      <small class="text-muted">(Not Required)</small>
                    }
                  </div>
                  @if (!Model.ServiceOrder.WorksheetRequired)
                  {
                    <span class="badge bg-success">
                      <i class="fas fa-check"></i> N/A
                    </span>
                  }
                  else if (Model.ServiceOrder.WorksheetUploaded)
                  {
                    <span class="badge bg-success">
                      <i class="fas fa-check"></i> Uploaded
                    </span>
                  }
                  else
                  {
                    <span class="badge bg-warning">
                      <i class="fas fa-exclamation-triangle"></i> Required
                    </span>
                  }
                </div>

                <!-- Documentation -->
                <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                  <div>
                    <i class="fas fa-file-alt me-2"></i>
                    <span class="fw-bold">Service Documentation</span>
                  </div>
                  @if (Model.Documents.Any())
                  {
                    <span class="badge bg-success">
                      <i class="fas fa-check"></i> @Model.Documents.Count() Documents
                    </span>
                  }
                  else
                  {
                    <span class="badge bg-info">
                      <i class="fas fa-info-circle"></i> No Documents
                    </span>
                  }
                </div>
              </div>

              <!-- Additional Details -->
              @if (Model.ServiceOrder.QcRequired && Model.ServiceOrder.QcCompleted)
              {
                <div class="mt-3">
                  <small class="text-muted">
                    <strong>QC Details:</strong> 
                    Completed @Model.ServiceOrder.QcDate?.ToString("MM/dd/yyyy") 
                    @if (!string.IsNullOrEmpty(Model.ServiceOrder.QcTechnician))
                    {
                      <span>by @Model.ServiceOrder.QcTechnician</span>
                    }
                  </small>
                </div>
              }

              @if (Model.ServiceOrder.CertificateRequired && Model.ServiceOrder.CertificateGenerated && !string.IsNullOrEmpty(Model.ServiceOrder.CertificateNumber))
              {
                <div class="mt-2">
                  <small class="text-muted">
                    <strong>Certificate Number:</strong> @Model.ServiceOrder.CertificateNumber
                  </small>
                </div>
              }
            </div>

            <div class="col-md-4">
              <!-- Action Buttons -->
              @if (Model.ServiceOrder.Status == InventorySystem.Models.ServiceOrderStatus.Completed && IsReadyForShipment(Model.ServiceOrder))
              {
                <div class="d-grid gap-2">
                  <button class="btn btn-success btn-lg" onclick="markAsDelivered(@Model.ServiceOrder.Id)">
                    <i class="fas fa-shipping-fast"></i> Mark as Shipped
                  </button>
                  <button class="btn btn-outline-primary" onclick="generateShippingLabel(@Model.ServiceOrder.Id)">
                    <i class="fas fa-tag"></i> Generate Shipping Label
                  </button>
                  <button class="btn btn-outline-info" onclick="emailCustomerShipment(@Model.ServiceOrder.Id)">
                    <i class="fas fa-envelope"></i> Notify Customer
                  </button>
                </div>
              }
              else if (Model.ServiceOrder.Status == InventorySystem.Models.ServiceOrderStatus.Delivered)
              {
                <div class="alert alert-success mb-0">
                  <i class="fas fa-check-circle"></i>
                  <strong>Shipped!</strong><br>
                  <small>Unit has been delivered to customer</small>
                </div>
              }
              else
              {
                <div class="alert alert-info mb-0">
                  <i class="fas fa-info-circle"></i>
                  <strong>Complete pending items above before shipping</strong>
                </div>
              }
            </div>
          </div>
        </div>
      </div>
    }

    <!-- Time Logs -->
    <div class="card mb-4">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h5><i class="fas fa-clock"></i> Time Logs</h5>
        <button class="btn btn-sm btn-outline-primary" onclick="addTimeLog(@Model.ServiceOrder.Id)">
          <i class="fas fa-plus"></i> Add Time
        </button>
      </div>
      <div class="card-body">
        @if (Model.TimeLogs.Any())
        {
          <div class="table-responsive">
            <table class="table table-sm">
              <thead>
                <tr>
                  <th>Date</th>
                  <th>Technician</th>
                  <th>Hours</th>
                  <th>Rate</th>
                  <th>Cost</th>
                  <th>Billable</th>
                  <th>Description</th>
                </tr>
              </thead>
              <tbody>
                @foreach (var timeLog in Model.TimeLogs.OrderByDescending(t => t.Date))
                {
                  <tr>
                    <td>@timeLog.Date.ToString("MM/dd/yyyy")</td>
                    <td>@timeLog.Technician</td>
                    <td>@timeLog.Hours</td>
                    <td>@timeLog.HourlyRate.ToString("C")</td>
                    <td class="fw-bold">@timeLog.TotalCost.ToString("C")</td>
                    <td>
                      @if (timeLog.IsBillable)
                      {
                        <span class="badge bg-success">Billable</span>
                      }
                      else
                      {
                        <span class="badge bg-secondary">Non-billable</span>
                      }
                    </td>
                    <td>@timeLog.WorkDescription</td>
                  </tr>
                }
              </tbody>
              <tfoot>
                <tr class="table-info">
                  <th colspan="2">Totals:</th>
                  <th>@Model.ServiceOrder.TotalHoursLogged</th>
                  <th></th>
                  <th>@Model.TotalLaborCost.ToString("C")</th>
                  <th></th>
                  <th></th>
                </tr>
              </tfoot>
            </table>
          </div>
        }
        else
        {
          <div class="text-center py-4">
            <i class="fas fa-clock fa-2x text-muted mb-2"></i>
            <p class="text-muted">No time logged yet</p>
            <button class="btn btn-outline-primary" onclick="addTimeLog(@Model.ServiceOrder.Id)">
              <i class="fas fa-plus"></i> Log First Time Entry
            </button>
          </div>
        }
      </div>
    </div>

    <!-- Materials Used -->
    <div class="card mb-4">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h5><i class="fas fa-boxes"></i> Materials Used</h5>
        <button class="btn btn-sm btn-outline-primary" onclick="addMaterial(@Model.ServiceOrder.Id)">
          <i class="fas fa-plus"></i> Add Material
        </button>
      </div>
      <div class="card-body">
        @if (Model.Materials.Any())
        {
          <div class="table-responsive">
            <table class="table table-sm">
              <thead>
                <tr>
                  <th>Item</th>
                  <th>Quantity</th>
                  <th>Unit Cost</th>
                  <th>Total Cost</th>
                  <th>Billable</th>
                  <th>Date Used</th>
                  <th>Notes</th>
                </tr>
              </thead>
              <tbody>
                @foreach (var material in Model.Materials.OrderByDescending(m => m.UsedDate))
                {
                  <tr>
                    <td>
                      <a href="/Items/Details/@material.ItemId" class="text-decoration-none">
                        @material.Item.PartNumber
                      </a>
                      <br><small class="text-muted">@material.Item.Description</small>
                    </td>
                    <td>@material.QuantityUsed</td>
                    <td>@material.UnitCost.ToString("C")</td>
                    <td class="fw-bold">@material.TotalCost.ToString("C")</td>
                    <td>
                      @if (material.IsBillable)
                      {
                        <span class="badge bg-success">Billable</span>
                      }
                      else
                      {
                        <span class="badge bg-secondary">Non-billable</span>
                      }
                    </td>
                    <td>@material.UsedDate.ToString("MM/dd/yyyy")</td>
                    <td>@material.Notes</td>
                  </tr>
                }
              </tbody>
              <tfoot>
                <tr class="table-info">
                  <th colspan="3">Material Totals:</th>
                  <th>@Model.TotalMaterialCost.ToString("C")</th>
                  <th></th>
                  <th></th>
                  <th></th>
                </tr>
              </tfoot>
            </table>
          </div>
        }
        else
        {
          <div class="text-center py-4">
            <i class="fas fa-boxes fa-2x text-muted mb-2"></i>
            <p class="text-muted">No materials used yet</p>
            <button class="btn btn-outline-primary" onclick="addMaterial(@Model.ServiceOrder.Id)">
              <i class="fas fa-plus"></i> Add First Material
            </button>
          </div>
        }
      </div>
    </div>

    <!-- Documents -->
    @await Html.PartialAsync("_DocumentManager", Model.ServiceOrder.Id)
  </div>

  <!-- Sidebar -->
  <div class="col-lg-4">
    <!-- Cost Summary Card -->
    <div class="card mb-4">
      <div class="card-header">
        <h6><i class="fas fa-calculator"></i> Cost Summary</h6>
      </div>
      <div class="card-body">
        <div class="row mb-2">
          <div class="col-6 text-muted">Labor Cost:</div>
          <div class="col-6 text-end fw-bold">@Model.TotalLaborCost.ToString("C")</div>
        </div>
        <div class="row mb-2">
          <div class="col-6 text-muted">Material Cost:</div>
          <div class="col-6 text-end fw-bold">@Model.TotalMaterialCost.ToString("C")</div>
        </div>
        <hr>
        <div class="row mb-2">
          <div class="col-6 fw-bold">Total Cost:</div>
          <div class="col-6 text-end fw-bold text-primary fs-5">@Model.TotalServiceCost.ToString("C")</div>
        </div>
        @if (Model.ServiceOrder.EstimatedCost > 0)
        {
          <div class="row mb-2">
            <div class="col-6 text-muted small">Estimated:</div>
            <div class="col-6 text-end text-muted small">@Model.ServiceOrder.EstimatedCost.ToString("C")</div>
          </div>

          var variance = Model.TotalServiceCost - Model.ServiceOrder.EstimatedCost;
          var variancePercent = Model.ServiceOrder.EstimatedCost > 0 ? (variance / Model.ServiceOrder.EstimatedCost) * 100 : 0;

          <div class="row">
            <div class="col-6 text-muted small">Variance:</div>
            <div class="col-6 text-end small @(variance > 0 ? "text-danger" : "text-success")">
              @variance.ToString("C") (@variancePercent.ToString("F1")%)
            </div>
          </div>
        }
      </div>
    </div>

    <!-- Status History Card -->
    <div class="card mb-4">
      <div class="card-header">
        <h6><i class="fas fa-history"></i> Status History</h6>
      </div>
      <div class="card-body">
        <div class="timeline">
          <div class="timeline-item">
            <div class="timeline-marker bg-primary"></div>
            <div class="timeline-content">
              <h6 class="timeline-title">@Model.ServiceOrder.StatusDisplay</h6>
              <p class="timeline-text">Current Status</p>
              <small class="text-muted">
                @if (Model.ServiceOrder.LastModifiedDate.HasValue)
                {
                  @Model.ServiceOrder.LastModifiedDate.Value.ToString("MM/dd/yyyy HH:mm")
                }
                else
                {
                  @Model.ServiceOrder.CreatedDate.ToString("MM/dd/yyyy HH:mm")
                }
              </small>
            </div>
          </div>

          <div class="timeline-item">
            <div class="timeline-marker bg-success"></div>
            <div class="timeline-content">
              <h6 class="timeline-title">Service Requested</h6>
              <p class="timeline-text">Service order created</p>
              <small class="text-muted">
                @Model.ServiceOrder.CreatedDate.ToString("MM/dd/yyyy HH:mm")
                @if (!string.IsNullOrEmpty(Model.ServiceOrder.CreatedBy))
                {
                  <span>by @Model.ServiceOrder.CreatedBy</span>
                }
              </small>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Quick Actions Card -->
    <div class="card">
      <div class="card-header">
        <h6><i class="fas fa-bolt"></i> Quick Actions</h6>
      </div>
      <div class="card-body">
        <div class="d-grid gap-2">
          @if (Model.CanStart)
          {
            <button class="btn btn-success" onclick="startService(@Model.ServiceOrder.Id)">
              <i class="fas fa-play"></i> Start Service
            </button>
          }
          @if (Model.CanComplete)
          {
            <button class="btn btn-primary" onclick="completeService(@Model.ServiceOrder.Id)">
              <i class="fas fa-check"></i> Complete Service
            </button>
          }
          <button class="btn btn-outline-info" onclick="addTimeLog(@Model.ServiceOrder.Id)">
            <i class="fas fa-clock"></i> Log Time
          </button>
          <button class="btn btn-outline-warning" onclick="addMaterial(@Model.ServiceOrder.Id)">
            <i class="fas fa-plus"></i> Add Material
          </button>
          <button class="btn btn-outline-secondary" onclick="updateStatus(@Model.ServiceOrder.Id)">
            <i class="fas fa-flag"></i> Update Status
          </button>
          @if (Model.ServiceOrder.Customer?.Email != null)
          {
            <a href="mailto:@Model.ServiceOrder.Customer.Email?subject=Service Order @Model.ServiceOrder.ServiceOrderNumber Update"
               class="btn btn-outline-primary">
              <i class="fas fa-envelope"></i> Email Customer
            </a>
          }
        </div>
      </div>
    </div>
  </div>
</div>

@functions {
  private string GetStatusBadgeColor(InventorySystem.Models.ServiceOrderStatus status)
  {
    return status switch
    {
      InventorySystem.Models.ServiceOrderStatus.Requested => "secondary",
      InventorySystem.Models.ServiceOrderStatus.Quoted => "info",
      InventorySystem.Models.ServiceOrderStatus.Approved => "primary",
      InventorySystem.Models.ServiceOrderStatus.Scheduled => "warning",
      InventorySystem.Models.ServiceOrderStatus.InProgress => "primary",
      InventorySystem.Models.ServiceOrderStatus.AwaitingParts => "warning",
      InventorySystem.Models.ServiceOrderStatus.QualityCheck => "info",
      InventorySystem.Models.ServiceOrderStatus.Completed => "success",
      InventorySystem.Models.ServiceOrderStatus.Delivered => "success",
      InventorySystem.Models.ServiceOrderStatus.Cancelled => "danger",
      InventorySystem.Models.ServiceOrderStatus.OnHold => "secondary",
      _ => "secondary"
    };
  }

  private string GetPriorityBadgeColor(InventorySystem.Models.ServicePriority priority)
  {
    return priority switch
    {
      InventorySystem.Models.ServicePriority.Low => "success",
      InventorySystem.Models.ServicePriority.Normal => "secondary",
      InventorySystem.Models.ServicePriority.High => "warning",
      InventorySystem.Models.ServicePriority.Urgent => "danger",
      InventorySystem.Models.ServicePriority.Emergency => "danger",
      _ => "secondary"
    };
  }

  // NEW: Shipment readiness helper functions
  private bool IsReadyForShipment(InventorySystem.Models.ServiceOrder serviceOrder)
  {
    // Service must be completed
    if (serviceOrder.Status != InventorySystem.Models.ServiceOrderStatus.Completed)
      return false;

    // Quality control check (if required)
    if (serviceOrder.QcRequired && !serviceOrder.QcCompleted)
      return false;

    // Certificate check (if required)
    if (serviceOrder.CertificateRequired && !serviceOrder.CertificateGenerated)
      return false;

    return true;
  }

  private string GetShipmentReadinessCardClass(InventorySystem.Models.ServiceOrder serviceOrder)
  {
    if (serviceOrder.Status == InventorySystem.Models.ServiceOrderStatus.Delivered)
      return "border-success";
    
    if (IsReadyForShipment(serviceOrder))
      return "border-success";
    
    return "border-warning";
  }
}

<style>
  .timeline {
    position: relative;
    padding-left: 30px;
  }

    .timeline::before {
      content: '';
      position: absolute;
      left: 15px;
      top: 0;
      bottom: 0;
      width: 2px;
      background: #dee2e6;
    }

  .timeline-item {
    position: relative;
    margin-bottom: 20px;
  }

  .timeline-marker {
    position: absolute;
    left: -22px;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    top: 2px;
  }

  .timeline-content {
    background: #f8f9fa;
    padding: 10px;
    border-radius: 5px;
    border-left: 3px solid #007bff;
  }

  .timeline-title {
    margin: 0 0 5px 0;
    font-size: 0.9rem;
    font-weight: 600;
  }

  .timeline-text {
    margin: 0 0 5px 0;
    font-size: 0.8rem;
    color: #6c757d;
  }

  /* Shipment Readiness Card */
  .border-success {
    border-color: #28a745 !important;
  }

  .border-warning {
    border-color: #ffc107 !important;
  }

  .border-info {
    border-color: #17a2b8 !important;
  }
</style>

@section Scripts {
  <!-- Load CSS and JS for Document Manager -->
  <link href="~/css/document-manager.css" rel="stylesheet" />
  <script src="~/js/document-manager.js"></script>

  <script>
    // ✅ GENERATE: Server-side constants for all enums and document types
    const serviceOrderStatuses = @Html.Raw(Json.Serialize(
              Enum.GetValues<InventorySystem.Models.ServiceOrderStatus>()
                      .ToDictionary(
                              status => status.ToString(),
                              status => new ServiceOrder { Status = status }.StatusDisplay
                      )
      ));

  const ServiceOrderStatus = @Html.Raw(Json.Serialize(
            Enum.GetValues<InventorySystem.Models.ServiceOrderStatus>()
                    .ToDictionary(
                            status => status.ToString(),
                            status => status.ToString()
                    )
    ));

  // ✅ NEW: Generate document type constants from server-side
  const DocumentTypes = {
      GENERAL: 'General',
      CERTIFICATE: 'Certificate',
      WORKSHEET: 'Worksheet',
      QC_REPORT: 'QC Report',
      PHOTO: 'Photo',
      DRAWING: 'Drawing'
  };

    // ✅ NEW: Generate UI element IDs as constants
    const ElementIds = {
        UPDATE_STATUS_FORM: 'updateStatusForm',
        UPDATE_STATUS_MODAL: 'updateStatusModal',
        UPDATE_STATUS_BTN: 'updateStatusBtn',
        SCHEDULING_FIELDS: 'schedulingFields',
        QUALITY_CHECK_FIELDS: 'qualityCheckFields',
        COMPLETION_FIELDS: 'completionFields',
        HOLD_CANCEL_FIELDS: 'holdCancelFields',
        REASON_REQUIRED: 'reasonRequired',
        REASON_HELP_TEXT: 'reasonHelpText',
        HOLD_CANCEL_MESSAGE: 'holdCancelMessage',
        CERTIFICATE_REQUIRED: 'certificateRequired',
        WORKSHEET_REQUIRED: 'worksheetRequired',
        QC_TECHNICIAN: 'qcTechnician',
        QC_DATE: 'qcDate',
        QC_NOTES: 'qcNotes'
    };

    // ✅ NEW: Generate form field names as constants
    const FormFields = {
        NEW_STATUS: 'NewStatus',
        REASON: 'Reason',
        SCHEDULED_DATE_TIME: 'ScheduledDateTime',
        QC_TECHNICIAN: 'QcTechnician',
        QC_DATE: 'QcDate',
        QC_NOTES: 'QcNotes',
        GENERATE_CERTIFICATE: 'GenerateCertificate',
        GENERATE_WORKSHEET: 'GenerateWorksheet',
        ANTIFORGERY_TOKEN: '__RequestVerificationToken'
    };

    // ✅ NEW: Generate CSS class names as constants
    const CssClasses = {
        SPINNER_ICON: 'fas fa-spinner fa-spin',
        CHECK_ICON: 'fas fa-check'
    };

    // ✅ NEW: Generate message keywords as constants
    const MessageKeywords = {
        MISSING_DOCUMENTS: 'missing required documents',
        HTTP_ERROR: 'HTTP error! status:',
        UNKNOWN_ERROR: 'Unknown error'
    };

    // ✅ NEW: Use safe DTO instead of full model
    const serviceOrderSafe = {
        id: @Model.ServiceOrder.Id,
        serviceOrderNumber: '@Model.ServiceOrder.ServiceOrderNumber',
        status: '@Model.ServiceOrder.Status',
        statusDisplay: '@Model.ServiceOrder.StatusDisplay',
        customerId: @Model.ServiceOrder.CustomerId,
        qcRequired: @Model.ServiceOrder.QcRequired.ToString().ToLower(),
        qcCompleted: @Model.ServiceOrder.QcCompleted.ToString().ToLower(),
        certificateRequired: @Model.ServiceOrder.CertificateRequired.ToString().ToLower(),
        certificateGenerated: @Model.ServiceOrder.CertificateGenerated.ToString().ToLower(),
        worksheetRequired: @Model.ServiceOrder.WorksheetRequired.ToString().ToLower(),
        worksheetUploaded: @Model.ServiceOrder.WorksheetUploaded.ToString().ToLower(),
        customer: {
            id: @(Model.Customer?.Id ?? 0),
            customerName: '@(Model.Customer?.CustomerName ?? "")',
            email: '@(Model.Customer?.Email ?? "")'
        }
    };

    document.addEventListener('DOMContentLoaded', function() {
        console.log('DOM loaded, initializing document manager...');
        console.log('Service Order ID:', @Model.ServiceOrder.Id);

        documentManager = new DocumentManager(@Model.ServiceOrder.Id);

        setTimeout(() => {
            console.log('Testing document load...');
            documentManager.loadDocumentsList();
        }, 1000);
    });

    function getAntiForgeryToken() {
        const token = document.querySelector(`input[name="${FormFields.ANTIFORGERY_TOKEN}"]`);
        return token ? token.value : '';
    }

    function handleStatusChange() {
        const statusSelect = document.querySelector(`#${ElementIds.UPDATE_STATUS_MODAL} [name="${FormFields.NEW_STATUS}"]`);
        if (!statusSelect) return;

        const selectedStatus = statusSelect.value;

        // Hide all conditional fields first
        const schedulingFields = document.getElementById(ElementIds.SCHEDULING_FIELDS);
        const qualityCheckFields = document.getElementById(ElementIds.QUALITY_CHECK_FIELDS);
        const completionFields = document.getElementById(ElementIds.COMPLETION_FIELDS);
        const holdCancelFields = document.getElementById(ElementIds.HOLD_CANCEL_FIELDS);

        if (schedulingFields) schedulingFields.style.display = 'none';
        if (qualityCheckFields) qualityCheckFields.style.display = 'none';
        if (completionFields) completionFields.style.display = 'none';
        if (holdCancelFields) holdCancelFields.style.display = 'none';

        // Reset reason requirements
        const reasonField = document.querySelector(`#${ElementIds.UPDATE_STATUS_MODAL} [name="${FormFields.REASON}"]`);
        const reasonRequired = document.getElementById(ElementIds.REASON_REQUIRED);
        const reasonHelpText = document.getElementById(ElementIds.REASON_HELP_TEXT);
        const holdCancelMessage = document.getElementById(ElementIds.HOLD_CANCEL_MESSAGE);

        if (reasonField) {
            reasonField.required = false;
        }
        if (reasonRequired) {
            reasonRequired.style.display = 'none';
        }

        // ✅ FIXED: Use enum constants instead of string literals
        switch (selectedStatus) {
            case ServiceOrderStatus.Scheduled:
                if (schedulingFields) schedulingFields.style.display = 'block';
                if (reasonHelpText) reasonHelpText.textContent = 'Optional scheduling notes.';
                break;

            case ServiceOrderStatus.QualityCheck:
                if (qualityCheckFields) qualityCheckFields.style.display = 'block';
                if (reasonHelpText) reasonHelpText.textContent = 'QC initiation notes.';
                break;

            case ServiceOrderStatus.Completed:
                if (completionFields) completionFields.style.display = 'block';
                if (reasonHelpText) reasonHelpText.textContent = 'Completion summary and final notes.';
                break;

            case ServiceOrderStatus.OnHold:
                if (holdCancelFields) holdCancelFields.style.display = 'block';
                if (holdCancelMessage) holdCancelMessage.textContent = 'Placing on hold may delay promised delivery dates.';
                if (reasonField) reasonField.required = true;
                if (reasonRequired) reasonRequired.style.display = 'inline';
                if (reasonHelpText) reasonHelpText.textContent = 'Required: Explain why the service is being placed on hold.';
                break;

            case ServiceOrderStatus.Cancelled:
                if (holdCancelFields) holdCancelFields.style.display = 'block';
                if (holdCancelMessage) holdCancelMessage.textContent = 'Cancelling will stop all work and may incur cancellation fees.';
                if (reasonField) reasonField.required = true;
                if (reasonRequired) reasonRequired.style.display = 'inline';
                if (reasonHelpText) reasonHelpText.textContent = 'Required: Explain the reason for cancellation.';
                break;

            case ServiceOrderStatus.AwaitingParts:
                if (reasonHelpText) reasonHelpText.textContent = 'Specify which parts are needed.';
                break;

            default:
                if (reasonHelpText) reasonHelpText.textContent = 'This will be logged in the service history.';
                break;
        }

        updateStatusPreview(selectedStatus);
    }

    function updateStatusPreview(newStatus) {
        const preview = document.getElementById('statusPreview');
        const newStatusText = document.getElementById('newStatusText');

        if (newStatus && newStatusText) {
            newStatusText.textContent = getStatusDisplayName(newStatus);
            if (preview) preview.style.display = 'block';
        } else {
            if (preview) preview.style.display = 'none';
        }
    }

    function getStatusDisplayName(status) {
        return serviceOrderStatuses[status] || status;
    }

    // ✅ REFACTORED: setupModalEventHandlers without string literals
    function setupModalEventHandlers() {
        const form = document.getElementById(ElementIds.UPDATE_STATUS_FORM);
        if (form) {
            // Remove any existing event listeners to prevent duplicates
            const newForm = form.cloneNode(true);
            form.parentNode.replaceChild(newForm, form);

            newForm.addEventListener('submit', function(e) {
                e.preventDefault();

                // ✅ CRITICAL: Clear any existing error messages immediately
                if (typeof hideModalError === 'function') {
                    hideModalError();
                }
                if (typeof hideModalSuccess === 'function') {
                    hideModalSuccess();
                }

                const formData = new FormData(this);

                // Include antiforgery token
                const token = getAntiForgeryToken();
                if (token) {
                    formData.append(FormFields.ANTIFORGERY_TOKEN, token);
                }

                // Add QC fields if they're visible
                const qcFields = document.getElementById(ElementIds.QUALITY_CHECK_FIELDS);
                if (qcFields && qcFields.style.display !== 'none') {
                    const qcTechnician = document.getElementById(ElementIds.QC_TECHNICIAN);
                    const qcDate = document.getElementById(ElementIds.QC_DATE);
                    const qcNotes = document.getElementById(ElementIds.QC_NOTES);

                    if (qcTechnician && qcTechnician.value) formData.append(FormFields.QC_TECHNICIAN, qcTechnician.value);
                    if (qcDate && qcDate.value) formData.append(FormFields.QC_DATE, qcDate.value);
                    if (qcNotes && qcNotes.value) formData.append(FormFields.QC_NOTES, qcNotes.value);
                }

                // Add certificate flag if visible
                const certificateCheckbox = document.getElementById(ElementIds.CERTIFICATE_REQUIRED);
                if (certificateCheckbox && certificateCheckbox.checked) {
                    formData.append(FormFields.GENERATE_CERTIFICATE, 'true');
                }

                // Add worksheet flag if visible and checked
                const worksheetCheckbox = document.getElementById(ElementIds.WORKSHEET_REQUIRED);
                if (worksheetCheckbox && worksheetCheckbox.checked) {
                    formData.append(FormFields.GENERATE_WORKSHEET, 'true');
                }

                const updateBtn = document.getElementById(ElementIds.UPDATE_STATUS_BTN);
                const originalText = updateBtn ? updateBtn.innerHTML : '';

                // ✅ CRITICAL: Store reset function to ensure it's always called
                const resetLoadingState = () => {
                    if (updateBtn) {
                        updateBtn.innerHTML = originalText;
                        updateBtn.disabled = false;
                    }
                };

                // ✅ CRITICAL: Show loading state
                if (updateBtn) {
                    updateBtn.innerHTML = `<i class="${CssClasses.SPINNER_ICON}"></i> Updating...`;
                    updateBtn.disabled = true;
                }

                // ✅ CRITICAL: Set a timeout to force reset loading state after max wait time
                const timeoutId = setTimeout(() => {
                    resetLoadingState();
                    if (typeof showModalError === 'function') {
                        showModalError('Request timed out. Please try again.');
                    }
                }, 30000); // 30 second timeout

                fetch(this.action, {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    // ✅ CRITICAL: Clear timeout and reset loading immediately
                    clearTimeout(timeoutId);
                    resetLoadingState();

                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        // ✅ FIXED: No blocking alert - use modal success display
                        if (typeof showModalSuccess === 'function') {
                            showModalSuccess(data.message || 'Status updated successfully');

                            // ✅ AUTO-CLOSE: Close modal and reload after showing success
                            setTimeout(() => {
                                const modalElement = document.getElementById(ElementIds.UPDATE_STATUS_MODAL);
                                if (modalElement) {
                                    const modalInstance = bootstrap.Modal.getInstance(modalElement);
                                    if (modalInstance) modalInstance.hide();
                                }

                                // Reload page to show updated status
                                location.reload();
                            }, 2000); // Give user time to see the success message
                        } else {
                            // ✅ FALLBACK: If modal functions not available, just reload
                            console.log('Success:', data.message);
                            setTimeout(() => location.reload(), 500);
                        }
                    } else {
                        // ✅ FIXED: No blocking alert - use modal error display
                        const errorMessage = data.message || MessageKeywords.UNKNOWN_ERROR;

                        if (typeof showModalError === 'function') {
                            showModalError(errorMessage);

                            // ✅ ENHANCED: Handle document requirement errors specifically
                            if (errorMessage.toLowerCase().includes(MessageKeywords.MISSING_DOCUMENTS)) {
                                // Highlight completion fields if they exist
                                const completionFields = document.getElementById(ElementIds.COMPLETION_FIELDS);
                                if (completionFields) {
                                    completionFields.style.border = '2px solid #dc3545';
                                    completionFields.style.borderRadius = '5px';
                                    setTimeout(() => {
                                        completionFields.style.border = '';
                                        completionFields.style.borderRadius = '';
                                    }, 3000);
                                }
                            }
                        } else {
                            // ✅ FALLBACK: Log error instead of alert
                            console.error('Update failed:', errorMessage);
                        }
                    }
                })
                .catch(error => {
                    // ✅ CRITICAL: Clear timeout and reset loading on errors
                    clearTimeout(timeoutId);
                    resetLoadingState();

                    console.error('Error:', error);
                    const errorMessage = `Error updating status: ${error.message}`;

                    if (typeof showModalError === 'function') {
                        showModalError(errorMessage);
                    } else {
                        // ✅ FALLBACK: Log error instead of alert
                        console.error('Error updating status:', errorMessage);
                    }
                });
            });
        }

        // Set up modal initialization
        const modal = document.getElementById(ElementIds.UPDATE_STATUS_MODAL);
        if (modal) {
            modal.addEventListener('shown.bs.modal', function() {
                // Clear any previous messages
                if (typeof hideModalError === 'function') {
                    hideModalError();
                }
                if (typeof hideModalSuccess === 'function') {
                    hideModalSuccess();
                }

                // Set default scheduled date to tomorrow at 9 AM if scheduling
                const scheduledInput = document.querySelector(`#${ElementIds.UPDATE_STATUS_MODAL} [name="${FormFields.SCHEDULED_DATE_TIME}"]`);
                if (scheduledInput && !scheduledInput.value) {
                    const tomorrow = new Date();
                    tomorrow.setDate(tomorrow.getDate() + 1);
                    tomorrow.setHours(9, 0, 0, 0);
                    scheduledInput.value = tomorrow.toISOString().slice(0, 16);
                }

                // Set up document requirement validation
                setupDocumentRequirementValidation();
            });

            // Handle modal hide to clean up any document requirement alerts
            modal.addEventListener('hidden.bs.modal', function() {
                hideDocumentRequirementAlert();

                // Clear modal messages when closing
                if (typeof hideModalError === 'function') {
                    hideModalError();
                }
                if (typeof hideModalSuccess === 'function') {
                    hideModalSuccess();
                }
            });
        }
    }

    // ✅ NEW: Enhanced document requirement functions without string literals
    function showDocumentRequirementAlert(message) {
        hideDocumentRequirementAlert();

        const alertId = 'documentRequirementAlert';
        const alertHtml = `
            <div id="${alertId}" class="alert alert-warning alert-dismissible fade show mt-3" role="alert">
                <div class="d-flex align-items-start">
                    <div class="me-3">
                        <i class="fas fa-exclamation-triangle fa-2x text-warning"></i>
                    </div>
                    <div class="flex-grow-1">
                        <h6 class="alert-heading">
                            <i class="fas fa-file-alt"></i> Required Documents Missing
                        </h6>
                        <p class="mb-2">${message}</p>
                        <div class="d-grid gap-2 d-md-flex justify-content-md-start">
                            <button type="button" class="btn btn-warning btn-sm" onclick="scrollToDocumentManager()">
                                <i class="fas fa-upload"></i> Upload Documents
                            </button>
                            <button type="button" class="btn btn-outline-secondary btn-sm" onclick="viewRequiredDocuments()">
                                <i class="fas fa-info-circle"></i> View Requirements
                            </button>
                        </div>
                    </div>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            </div>
        `;

        const container = document.querySelector('.container-fluid') ||
                        document.querySelector('.container') ||
                        document.body;
        container.insertAdjacentHTML('afterbegin', alertHtml);
    }

    function hideDocumentRequirementAlert() {
        const existingAlert = document.getElementById('documentRequirementAlert');
        if (existingAlert) {
            existingAlert.remove();
        }
    }

    function scrollToDocumentManager() {
        const selectors = ['.document-manager', '#documentManager', '[data-section="documents"]'];
        let documentSection = null;

        for (const selector of selectors) {
            documentSection = document.querySelector(selector);
            if (documentSection) break;
        }

        if (documentSection) {
            documentSection.scrollIntoView({ behavior: 'smooth', block: 'center' });

            // Highlight the section briefly
            documentSection.style.transition = 'background-color 0.3s ease';
            documentSection.style.backgroundColor = '#fff3cd';

            setTimeout(() => {
                documentSection.style.backgroundColor = '';
            }, 2000);
        }

        hideDocumentRequirementAlert();
    }

    function viewRequiredDocuments() {
        const serviceOrder = serviceOrderSafe; // Use the safe object

        let requirementsList = '<ul class="list-unstyled mb-0">';

        if (serviceOrder.qcRequired && !serviceOrder.qcCompleted) {
            requirementsList += '<li><i class="fas fa-search text-warning me-2"></i>Quality Control verification must be completed</li>';
        }

        if (serviceOrder.certificateRequired && !serviceOrder.certificateGenerated) {
            requirementsList += '<li><i class="fas fa-certificate text-info me-2"></i>Service Certificate document must be uploaded</li>';
        }

        if (serviceOrder.worksheetRequired && !serviceOrder.worksheetUploaded) {
            requirementsList += '<li><i class="fas fa-file-alt text-primary me-2"></i>Service Worksheet document must be uploaded</li>';
        }

        requirementsList += '</ul>';

        const modalId = 'requirementsModal';
        const modalHtml = `
            <div class="modal fade" id="${modalId}" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">
                                <i class="fas fa-clipboard-check"></i> Service Requirements
                            </h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <h6>The following requirements must be completed before this service order can be marked as complete:</h6>
                            ${requirementsList}
                            <hr>
                            <p class="small text-muted mb-0">
                                <i class="fas fa-info-circle"></i>
                                Use the Document Manager section below to upload required certificates and worksheets.
                            </p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-warning" onclick="scrollToDocumentManager(); bootstrap.Modal.getInstance(document.getElementById('${modalId}')).hide();">
                                <i class="fas fa-upload"></i> Go to Document Manager
                            </button>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        `;

        // Remove any existing requirements modal
        const existingModal = document.getElementById(modalId);
        if (existingModal) {
            existingModal.remove();
        }

        document.body.insertAdjacentHTML('beforeend', modalHtml);
        new bootstrap.Modal(document.getElementById(modalId)).show();

        hideDocumentRequirementAlert();
    }

    function setupDocumentRequirementValidation() {
        const completionFields = document.getElementById('completionFields');
        if (completionFields) {
            const serviceOrder = serviceOrderSafe; // Use the safe object
            const missingDocs = [];

            if (serviceOrder.certificateRequired && !serviceOrder.certificateGenerated) {
                missingDocs.push('Service Certificate');
            }

            if (serviceOrder.worksheetRequired && !serviceOrder.worksheetUploaded) {
                missingDocs.push('Service Worksheet');
            }

            if (missingDocs.length > 0) {
                const validationId = 'completionValidation';
                const validationHtml = `
                    <div class="alert alert-warning mt-2" id="${validationId}">
                        <i class="fas fa-exclamation-triangle"></i>
                        <strong>Missing Required Documents:</strong>
                        <ul class="mb-0 mt-1">
                            ${missingDocs.map(doc => `<li>${doc}</li>`).join('')}
                        </ul>
                        <small class="d-block mt-2">
                            <i class="fas fa-info-circle"></i>
                            Upload these documents before marking as complete.
                        </small>
                    </div>
                `;

                completionFields.insertAdjacentHTML('beforeend', validationHtml);
            }
        }
    }

    // ✅ ENHANCED: Override handleStatusChange to include document validation
    const originalHandleStatusChange = handleStatusChange;
    handleStatusChange = function() {
        // Call the original function
        if (originalHandleStatusChange) {
            originalHandleStatusChange();
        }

        // Add document requirement validation
        const selectedStatus = document.querySelector(`#${ElementIds.UPDATE_STATUS_MODAL} [name="${FormFields.NEW_STATUS}"]`)?.value;

        if (selectedStatus === ServiceOrderStatus.Completed) {
            setTimeout(() => {
                setupDocumentRequirementValidation();
            }, 100);
        } else {
            // Remove validation if not completing
            const existingValidation = document.getElementById('completionValidation');
            if (existingValidation) {
                existingValidation.remove();
            }
        }
    };

    // ✅ ADD: Missing updateStatus function that loads the modal
    function updateStatus(serviceOrderId) {
        fetch('@Url.Action("UpdateStatus", "Services")?serviceOrderId=' + serviceOrderId)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.text();
            })
            .then(html => {
                document.body.insertAdjacentHTML('beforeend', html);
                new bootstrap.Modal(document.getElementById('updateStatusModal')).show();

                // ✅ ADD: Set up event handlers after modal is loaded
                setTimeout(() => {
                    setupModalEventHandlers();
                }, 100);
            })
            .catch(error => {
                console.error('Error:', error);
                if (typeof showToast === 'function') {
                    showToast('Error loading status update form.', 'error');
                } else {
                    console.error('Error loading status update form.');
                }
            });
    }

    // Service Order specific functions
    function startService(serviceOrderId) {
        // ✅ FIXED: Use modal confirmation instead of blocking confirm
        if (typeof showModalConfirm === 'function') {
            showModalConfirm('Are you sure you want to start this service?', () => {
                updateServiceStatus(serviceOrderId, ServiceOrderStatus.InProgress);
            });
        } else {
            // ✅ FALLBACK: Direct call without confirmation
            updateServiceStatus(serviceOrderId, ServiceOrderStatus.InProgress);
        }
    }

    function completeService(serviceOrderId) {
        // ✅ FIXED: Use modal prompt instead of blocking prompt
        if (typeof showModalPrompt === 'function') {
            showModalPrompt('Enter completion notes (optional):', (reason) => {
                updateServiceStatus(serviceOrderId, ServiceOrderStatus.Completed, reason);
            });
        } else {
            // ✅ FALLBACK: Complete without notes
            updateServiceStatus(serviceOrderId, ServiceOrderStatus.Completed, '');
        }
    }

    function updateServiceStatus(serviceOrderId, newStatus, reason = null) {
        const formData = new FormData();

        formData.append('ServiceOrderId', serviceOrderId);
        formData.append(FormFields.NEW_STATUS, newStatus);
        if (reason) formData.append(FormFields.REASON, reason);

        const token = getAntiForgeryToken();
        if (token) {
            formData.append(FormFields.ANTIFORGERY_TOKEN, token);
        }

        fetch('@Url.Action("UpdateStatus")', {
            method: 'POST',
            body: formData
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // ✅ FIXED: No blocking alert - show toast or log success
                if (typeof showToast === 'function') {
                    showToast(data.message || 'Status updated successfully', 'success');
                } else {
                    console.log('Success:', data.message);
                }

                // Reload page after brief delay
                setTimeout(() => location.reload(), 1000);
            } else {
                // ✅ FIXED: No blocking alert - show error message
                const errorMsg = data.message || MessageKeywords.UNKNOWN_ERROR;
                if (typeof showToast === 'function') {
                    showToast(`Error: ${errorMsg}`, 'error');
                } else {
                    console.error('Error updating status:', errorMsg);
                }
            }
        })
        .catch(error => {
            console.error('Error:', error);
            if (typeof showToast === 'function') {
                showToast(`Error updating status: ${error.message}`, 'error');
            } else {
                console.error('Error updating status:', error.message);
            }
        });
    }

    function addTimeLog(serviceOrderId) {
        fetch('@Url.Action("AddTimeLog", "Services")?serviceOrderId=' + serviceOrderId)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.text();
            })
            .then(html => {
                document.body.insertAdjacentHTML('beforeend', html);
                new bootstrap.Modal(document.getElementById('addTimeLogModal')).show();
            })
            .catch(error => {
                console.error('Error:', error);
                if (typeof showToast === 'function') {
                    showToast('Error loading time log form.', 'error');
                } else {
                    console.error('Error loading time log form.');
                }
            });
    }

    function addMaterial(serviceOrderId) {
        fetch('@Url.Action("AddMaterial", "Services")?serviceOrderId=' + serviceOrderId)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.text();
            })
            .then(html => {
                document.body.insertAdjacentHTML('beforeend', html);
                new bootstrap.Modal(document.getElementById('addMaterialModal')).show();
            })
            .catch(error => {
                console.error('Error:', error);
                if (typeof showToast === 'function') {
                    showToast('Error loading material form.', 'error');
                } else {
                    console.error('Error loading material form.');
                }
            });
    }

    function markAsDelivered(serviceOrderId) {
        // ✅ FIXED: Use modal confirmation instead of blocking confirm
        if (typeof showModalConfirm === 'function') {
            showModalConfirm('Mark this service order as delivered/shipped to customer?', () => {
                updateServiceStatus(serviceOrderId, ServiceOrderStatus.Delivered, 'Shipped to customer');
            });
        } else {
            // ✅ FALLBACK: Direct call without confirmation
            updateServiceStatus(serviceOrderId, ServiceOrderStatus.Delivered, 'Shipped to customer');
        }
    }

    function generateShippingLabel(serviceOrderId) {
        // Placeholder for shipping label generation
        if (typeof showToast === 'function') {
            showToast('Shipping label generation would be implemented here. Integration with shipping carriers like UPS, FedEx, etc. would go here.', 'info');
        } else {
            console.log('Shipping label generation would be implemented here.');
        }
    }

    function emailCustomerShipment(serviceOrderId) {
        // You can enhance this to use a modal or direct email integration
        const subject = encodeURIComponent('Your service is complete and ready for pickup/delivery');
        const body = encodeURIComponent('Dear Customer,\n\nYour service order has been completed and is ready for shipment.\n\nThank you for your business!');

        // Get customer email from the page or make an AJAX call
        const customerEmail = '@Model.ServiceOrder.Customer?.Email';

        if (customerEmail) {
            window.open(`mailto:${customerEmail}?subject=${subject}&body=${body}`);
        } else {
            if (typeof showToast === 'function') {
                showToast('Customer email not available. Please contact customer directly.', 'warning');
            } else {
                console.log('Customer email not available. Please contact customer directly.');
            }
        }
    }

    // ✅ NEW: Non-blocking toast notification system
    function showToast(message, type = 'info', duration = 5000) {
        // Create toast container if it doesn't exist
        let toastContainer = document.getElementById('toast-container');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.id = 'toast-container';
            toastContainer.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 9999;
                pointer-events: none;
            `;
            document.body.appendChild(toastContainer);
        }

        // Create toast element
        const toast = document.createElement('div');
        const toastId = 'toast-' + Date.now();
        toast.id = toastId;

        const bgColor = type === 'success' ? '#28a745' :
                       type === 'error' ? '#dc3545' :
                       type === 'warning' ? '#ffc107' : '#17a2b8';

        toast.style.cssText = `
            background-color: ${bgColor};
            color: white;
            padding: 12px 20px;
            margin-bottom: 10px;
            border-radius: 5px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            pointer-events: auto;
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.3s ease;
            max-width: 350px;
            word-wrap: break-word;
        `;

        toast.innerHTML = `
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <span>${message}</span>
                <button onclick="removeToast('${toastId}')" style="
                    background: none;
                    border: none;
                    color: white;
                    font-size: 18px;
                    cursor: pointer;
                    margin-left: 10px;
                    padding: 0;
                    width: 20px;
                    height: 20px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                ">&times;</button>
            </div>
        `;

        toastContainer.appendChild(toast);

        // Animate in
        setTimeout(() => {
            toast.style.opacity = '1';
            toast.style.transform = 'translateX(0)';
        }, 10);

        // Auto remove after duration
        setTimeout(() => {
            removeToast(toastId);
        }, duration);
    }

    function removeToast(toastId) {
        const toast = document.getElementById(toastId);
        if (toast) {
            toast.style.opacity = '0';
            toast.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 300);
        }
    }

    // ✅ NEW: Modal confirmation system (optional enhancement)
    function showModalConfirm(message, onConfirm, onCancel = null) {
        const confirmModalHtml = `
            <div class="modal fade" id="confirmModal" tabindex="-1">
                <div class="modal-dialog modal-sm">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Confirm Action</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <p>${message}</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-primary" id="confirmBtn">Confirm</button>
                        </div>
                    </div>
                </div>
            </div>
        `;

        // Remove any existing confirm modal
        const existingModal = document.getElementById('confirmModal');
        if (existingModal) {
            existingModal.remove();
        }

        // Add modal to page
        document.body.insertAdjacentHTML('beforeend', confirmModalHtml);

        const modal = new bootstrap.Modal(document.getElementById('confirmModal'));

        // Set up event handlers
        document.getElementById('confirmBtn').addEventListener('click', () => {
            modal.hide();
            if (onConfirm) onConfirm();
        });

        // Handle modal hidden event
        document.getElementById('confirmModal').addEventListener('hidden.bs.modal', () => {
            document.getElementById('confirmModal').remove();
            if (onCancel) onCancel();
        });

        modal.show();
    }
  </script>
}