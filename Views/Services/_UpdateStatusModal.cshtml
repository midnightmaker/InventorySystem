@model InventorySystem.ViewModels.UpdateServiceStatusViewModel

<div class="modal fade" id="updateStatusModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">
          <i class="fas fa-flag"></i> Update Service Status
          @if (Model.ServiceOrder != null)
          {
            <span class="text-muted">- @Model.ServiceOrder.ServiceOrderNumber</span>
          }
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <form id="updateStatusForm" method="post" action="@Url.Action("UpdateStatus")">
        <div class="modal-body">
          <input type="hidden" asp-for="ServiceOrderId" />

          <!-- ? NEW: Error Alert Container -->
          <div id="modalErrorAlert" class="alert alert-danger alert-dismissible fade" role="alert" style="display: none;">
            <i class="fas fa-exclamation-circle"></i>
            <strong>Error:</strong> <span id="modalErrorMessage"></span>
            <button type="button" class="btn-close" onclick="hideModalError()"></button>
          </div>

          <!-- ? NEW: Success Alert Container -->
          <div id="modalSuccessAlert" class="alert alert-success alert-dismissible fade" role="alert" style="display: none;">
            <i class="fas fa-check-circle"></i>
            <strong>Success:</strong> <span id="modalSuccessMessage"></span>
            <button type="button" class="btn-close" onclick="hideModalSuccess()"></button>
          </div>

          <!-- Current Status Display -->
          @if (Model.ServiceOrder != null)
          {
            <div class="alert alert-info mb-3">
              <strong>Current Status:</strong> 
              <span class="badge bg-@(GetCurrentStatusBadgeColor(Model.ServiceOrder.Status)) ms-2">
                @Model.ServiceOrder.StatusDisplay
              </span>
            </div>
          }

          <!-- New Status Selection -->
          <div class="mb-3">
            <label asp-for="NewStatus" class="form-label">New Status <span class="text-danger">*</span></label>
            <select asp-for="NewStatus" class="form-select" required onchange="handleStatusChange()">
              <option value="">Select new status...</option>
              @foreach (var status in Enum.GetValues<InventorySystem.Models.ServiceOrderStatus>())
              {
                <option value="@status">@GetStatusDisplayName(status)</option>
              }
            </select>
            <span asp-validation-for="NewStatus" class="text-danger"></span>
          </div>

          <!-- Conditional Fields -->
          
          <!-- Scheduling Fields (shown when status is Scheduled) -->
          <div id="schedulingFields" style="display: none;">
            <div class="row">
              <div class="col-md-8 mb-3">
                <label asp-for="ScheduledDateTime" class="form-label">Scheduled Date & Time</label>
                <input asp-for="ScheduledDateTime" class="form-control" type="datetime-local" />
                <span asp-validation-for="ScheduledDateTime" class="text-danger"></span>
              </div>
              <div class="col-md-4 mb-3">
                <label asp-for="AssignedTechnician" class="form-label">Technician</label>
                <select asp-for="AssignedTechnician" class="form-select" asp-items="Model.TechnicianOptions">
                  <option value="">Select technician...</option>
                </select>
              </div>
            </div>
          </div>

          <!-- Quality Control Fields (shown when status is QualityCheck) -->
          <div id="qualityCheckFields" style="display: none;">
            <div class="row">
              <div class="col-md-6 mb-3">
                <label for="qcTechnician" class="form-label">QC Technician</label>
                <select id="qcTechnician" class="form-select" asp-items="Model.TechnicianOptions">
                  <option value="">Select QC technician...</option>
                </select>
              </div>
              <div class="col-md-6 mb-3">
                <label for="qcDate" class="form-label">QC Date</label>
                <input id="qcDate" class="form-control" type="date" value="@DateTime.Today.ToString("yyyy-MM-dd")" />
              </div>
            </div>
            <div class="mb-3">
              <label for="qcNotes" class="form-label">QC Notes</label>
              <textarea id="qcNotes" class="form-control" rows="2" placeholder="Quality control notes..."></textarea>
            </div>
          </div>

          <!-- Completion Fields (shown when status is Completed) -->
          <div id="completionFields" style="display: none;">
            <div class="mb-3">
              <div class="form-check">
                <input id="certificateRequired" class="form-check-input" type="checkbox" />
                <label for="certificateRequired" class="form-check-label">
                  <i class="fas fa-certificate"></i> Generate Service Certificate
                </label>
              </div>
              <!-- ? NEW: Worksheet checkbox -->
              <div class="form-check mt-2">
                <input id="worksheetRequired" class="form-check-input" type="checkbox" />
                <label for="worksheetRequired" class="form-check-label">
                  <i class="fas fa-file-alt"></i> Generate Service Worksheet
                </label>
              </div>
            </div>
          </div>

          <!-- Hold/Cancel Fields -->
          <div id="holdCancelFields" style="display: none;">
            <div class="alert alert-warning">
              <i class="fas fa-exclamation-triangle"></i>
              <strong>Note:</strong> <span id="holdCancelMessage">This action may affect scheduling and customer expectations.</span>
            </div>
          </div>

          <!-- Reason/Notes (shown for most status changes) -->
          <div class="mb-3">
            <label asp-for="Reason" class="form-label">
              Reason/Notes
              <span id="reasonRequired" class="text-danger" style="display: none;">*</span>
            </label>
            <textarea asp-for="Reason" class="form-control" rows="3" 
                      placeholder="Enter reason for status change (optional)..."></textarea>
            <span asp-validation-for="Reason" class="text-danger"></span>
            <div class="form-text">
              <small id="reasonHelpText">This will be logged in the service history.</small>
            </div>
          </div>

          <!-- Status Change Preview -->
          <div id="statusPreview" class="alert alert-secondary" style="display: none;">
            <strong>Status Change:</strong> 
            <span id="currentStatusText">@Model.ServiceOrder?.StatusDisplay</span>
            <i class="fas fa-arrow-right mx-2"></i>
            <span id="newStatusText"></span>
          </div>
        </div>
        
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
            <i class="fas fa-times"></i> Cancel
          </button>
          <button type="submit" class="btn btn-primary" id="updateStatusBtn">
            <i class="fas fa-check"></i> Update Status
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

@functions {
  private string GetCurrentStatusBadgeColor(InventorySystem.Models.ServiceOrderStatus status)
  {
    return status switch
    {
      InventorySystem.Models.ServiceOrderStatus.Requested => "secondary",
      InventorySystem.Models.ServiceOrderStatus.Quoted => "info",
      InventorySystem.Models.ServiceOrderStatus.Approved => "primary",
      InventorySystem.Models.ServiceOrderStatus.Scheduled => "warning",
      InventorySystem.Models.ServiceOrderStatus.InProgress => "primary",
      InventorySystem.Models.ServiceOrderStatus.AwaitingParts => "warning",
      InventorySystem.Models.ServiceOrderStatus.QualityCheck => "info",
      InventorySystem.Models.ServiceOrderStatus.Completed => "success",
      InventorySystem.Models.ServiceOrderStatus.Delivered => "success",
      InventorySystem.Models.ServiceOrderStatus.Cancelled => "danger",
      InventorySystem.Models.ServiceOrderStatus.OnHold => "secondary",
      _ => "secondary"
    };
  }

  private string GetStatusDisplayName(InventorySystem.Models.ServiceOrderStatus status)
  {
    return status switch
    {
      InventorySystem.Models.ServiceOrderStatus.Requested => "Requested",
      InventorySystem.Models.ServiceOrderStatus.Quoted => "Quoted",
      InventorySystem.Models.ServiceOrderStatus.Approved => "Approved",
      InventorySystem.Models.ServiceOrderStatus.Scheduled => "Scheduled",
      InventorySystem.Models.ServiceOrderStatus.InProgress => "In Progress",
      InventorySystem.Models.ServiceOrderStatus.AwaitingParts => "Awaiting Parts",
      InventorySystem.Models.ServiceOrderStatus.QualityCheck => "Quality Check",
      InventorySystem.Models.ServiceOrderStatus.Completed => "Completed",
      InventorySystem.Models.ServiceOrderStatus.Delivered => "Delivered",
      InventorySystem.Models.ServiceOrderStatus.Cancelled => "Cancelled",
      InventorySystem.Models.ServiceOrderStatus.OnHold => "On Hold",
      _ => status.ToString()
    };
  }
}

<script>
// ? NEW: Modal-specific error handling functions
function showModalError(message) {
    hideModalSuccess(); // Hide any success messages first
    
    const errorAlert = document.getElementById('modalErrorAlert');
    const errorMessage = document.getElementById('modalErrorMessage');
    
    if (errorAlert && errorMessage) {
        errorMessage.textContent = message;
        errorAlert.style.display = 'block';
        errorAlert.classList.add('show');
        
        // Scroll to top of modal to ensure error is visible
        const modalBody = document.querySelector('#updateStatusModal .modal-body');
        if (modalBody) {
            modalBody.scrollTop = 0;
        }
    }
}

function hideModalError() {
    const errorAlert = document.getElementById('modalErrorAlert');
    if (errorAlert) {
        errorAlert.style.display = 'none';
        errorAlert.classList.remove('show');
    }
}

function showModalSuccess(message) {
    hideModalError(); // Hide any error messages first
    
    const successAlert = document.getElementById('modalSuccessAlert');
    const successMessage = document.getElementById('modalSuccessMessage');
    
    if (successAlert && successMessage) {
        successMessage.textContent = message;
        successAlert.style.display = 'block';
        successAlert.classList.add('show');
        
        // Scroll to top of modal to ensure message is visible
        const modalBody = document.querySelector('#updateStatusModal .modal-body');
        if (modalBody) {
            modalBody.scrollTop = 0;
        }
    }
}

function hideModalSuccess() {
    const successAlert = document.getElementById('modalSuccessAlert');
    if (successAlert) {
        successAlert.style.display = 'none';
        successAlert.classList.remove('show');
    }
}

// ? NEW: Reset modal state when it's shown
document.addEventListener('DOMContentLoaded', function() {
    const modal = document.getElementById('updateStatusModal');
    if (modal) {
        modal.addEventListener('shown.bs.modal', function() {
            // Clear any previous error/success messages
            hideModalError();
            hideModalSuccess();
        });
    }
});
</script>