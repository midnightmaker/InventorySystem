@model InventorySystem.ViewModels.ServiceTypeViewModel
@{
  ViewData["Title"] = $"Edit Service Type - {Model.ServiceName}";
}

<!-- Document Viewer Modal -->
<div class="modal fade" id="documentViewerModal" tabindex="-1">
  <div class="modal-dialog modal-xl">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="documentViewerModalLabel">
          <i class="fas fa-eye"></i> Document Viewer
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body p-0">
        <div id="documentViewerContent">
          <!-- Content will be loaded dynamically -->
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="downloadFromViewer">
          <i class="fas fa-download"></i> Download
        </button>
      </div>
    </div>
  </div>
</div>

<div class="d-flex justify-content-between align-items-center mb-4">
  <h1><i class="fas fa-edit"></i> Edit Service Type</h1>
  <div class="btn-group">
    <a href="@Url.Action("ServiceTypes")" class="btn btn-outline-secondary">
      <i class="fas fa-arrow-left"></i> Back to Service Types
    </a>
    @if (!Model.IsActive)
    {
      <button type="button" class="btn btn-outline-success" onclick="toggleServiceTypeStatus(@Model.Id, true)">
        <i class="fas fa-toggle-on"></i> Activate
      </button>
    }
    else
    {
      <button type="button" class="btn btn-outline-warning" onclick="toggleServiceTypeStatus(@Model.Id, false)">
        <i class="fas fa-toggle-off"></i> Deactivate
      </button>
    }
  </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
  <div class="alert alert-success alert-dismissible fade show">
    <i class="fas fa-check-circle"></i> @TempData["SuccessMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

@if (TempData["ErrorMessage"] != null)
{
  <div class="alert alert-danger alert-dismissible fade show">
    <i class="fas fa-exclamation-circle"></i> @TempData["ErrorMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

@if (TempData["WarningMessage"] != null)
{
  <div class="alert alert-warning alert-dismissible fade show">
    <i class="fas fa-exclamation-triangle"></i> @TempData["WarningMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

<div class="row">
  <div class="col-lg-8">
    <form asp-action="EditServiceType" method="post" class="needs-validation" novalidate>
      <input type="hidden" asp-for="Id" />
      @Html.AntiForgeryToken()
      <!-- Status Warning for Inactive Service Types -->
      @if (!Model.IsActive)
      {
        <div class="alert alert-warning">
          <i class="fas fa-exclamation-triangle"></i>
          <strong>Inactive Service Type</strong> - This service type is currently inactive and not available for new service orders.
        </div>
      }

      <div class="card">
        <div class="card-header">
          <h5><i class="fas fa-info-circle"></i> Service Type Information</h5>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-md-6 mb-3">
              <label asp-for="ServiceName" class="form-label">
                <i class="fas fa-tag"></i> Service Name <span class="text-danger">*</span>
              </label>
              <input asp-for="ServiceName" class="form-control" required />
              <span asp-validation-for="ServiceName" class="text-danger"></span>
            </div>

            <div class="col-md-6 mb-3">
              <label asp-for="ServiceCode" class="form-label">
                <i class="fas fa-barcode"></i> Service Code
              </label>
              <input asp-for="ServiceCode" class="form-control" placeholder="e.g., CAL001, REP002" />
              <div class="form-text">
                @if (!string.IsNullOrEmpty(Model.ServiceCode))
                {
                  <span>Current: @Model.ServiceCode</span>
                }
                else
                {
                  <span>Optional short code for quick reference</span>
                }
              </div>
              <span asp-validation-for="ServiceCode" class="text-danger"></span>
            </div>
          </div>

          <div class="mb-3">
            <label asp-for="ServiceCategory" class="form-label">
              <i class="fas fa-folder"></i> Service Category
            </label>
            <select asp-for="ServiceCategory" class="form-select">
              <option value="">Select category...</option>
              <option value="Calibration">Calibration</option>
              <option value="Repair">Repair</option>
              <option value="Maintenance">Maintenance</option>
              <option value="Installation">Installation</option>
              <option value="Training">Training</option>
              <option value="Consultation">Consultation</option>
              <option value="Testing">Testing</option>
              <option value="Inspection">Inspection</option>
              <option value="Custom">Custom</option>
            </select>
            <span asp-validation-for="ServiceCategory" class="text-danger"></span>
          </div>

          <div class="mb-3">
            <label asp-for="VendorId" class="form-label">
              <i class="fas fa-building text-info"></i>
              Service Provider (Vendor)
            </label>
            <div class="input-group">
              <select asp-for="VendorId" class="form-select" id="vendorSelect">
                <option value="">-- Select Vendor --</option>
                @if (Model.VendorOptions != null)
                {
                  foreach (var vendor in Model.VendorOptions)
                  {
                    <option value="@vendor.Value" selected="@vendor.Selected">@vendor.Text</option>
                  }
                }
              </select>
              <button type="button" class="btn btn-outline-info" id="addNewVendorBtn" title="Add New Vendor">
                <i class="fas fa-plus"></i>
              </button>
            </div>
            <span asp-validation-for="VendorId" class="text-danger"></span>
            <div class="form-text">
              <i class="fas fa-info-circle"></i>
              Select the vendor who provides this service. This helps with vendor management and outsourcing.
            </div>

            <!-- Current Vendor Display -->
            @if (Model.VendorId.HasValue && Model.VendorOptions != null)
            {
              var currentVendor = Model.VendorOptions.FirstOrDefault(v => v.Value == Model.VendorId.ToString());
              if (currentVendor != null)
              {
                <div class="mt-2">
                  <small class="text-muted">
                    <strong>Current:</strong> @currentVendor.Text
                    <span class="badge bg-success text-white ms-1">
                      <i class="fas fa-check-circle"></i> Active Vendor
                    </span>
                  </small>
                </div>
              }
            }
            else if (Model.VendorId.HasValue)
            {
              <div class="mt-2">
                <small class="text-warning">
                  <i class="fas fa-exclamation-triangle"></i>
                  <strong>Warning:</strong> Selected vendor is not in the active vendors list
                </small>
              </div>
            }
            else
            {
              <div class="mt-2">
                <small class="text-muted">
                  <i class="fas fa-info-circle"></i>
                  <strong>No vendor assigned.</strong> This service will be performed internally.
                </small>
              </div>
            }
          </div>

          <div class="mb-3">
            <label asp-for="Description" class="form-label">
              <i class="fas fa-align-left"></i> Description
            </label>
            <textarea asp-for="Description" class="form-control" rows="3"
                      placeholder="Detailed description of the service..."></textarea>
            <span asp-validation-for="Description" class="text-danger"></span>
          </div>

          <div class="row">
            <div class="col-md-4 mb-3">
              <label asp-for="StandardHours" class="form-label">
                <i class="fas fa-clock"></i> Standard Hours <span class="text-danger">*</span>
              </label>
              <input asp-for="StandardHours"
                     class="form-control"
                     type="number"
                     step="any"
                     min="0.1"
                     max="100"
                     required
                     data-val-number="Please enter a valid number"
                     data-val-range="Standard hours must be between 0.1 and 100"
                     data-val-range-min="0.1"
                     data-val-range-max="100" />
              <div class="form-text">Between 0.1 and 100 hours</div>
              <span asp-validation-for="StandardHours" class="text-danger"></span>
            </div>

            <div class="col-md-4 mb-3">
              <label asp-for="StandardRate" class="form-label">
                <i class="fas fa-dollar-sign"></i> Standard Rate <span class="text-danger">*</span>
              </label>
              <input asp-for="StandardRate" class="form-control" type="number" step="0.01" min="0.01" max="1000" required />
              <div class="form-text">Between $0.01 and $1000 per hour</div>
              <span asp-validation-for="StandardRate" class="text-danger"></span>
            </div>

            <div class="col-md-4 mb-3">
              <label class="form-label">
                <i class="fas fa-calculator"></i> Estimated Cost
              </label>
              <input id="estimatedCost" class="form-control" readonly />
              <div class="form-text">Calculated from hours × rate</div>
            </div>
          </div>

          <!-- Requirements Section -->
          <hr>
          <h6><i class="fas fa-clipboard-check"></i> Service Requirements</h6>
          <p class="text-muted small mb-3">
            <i class="fas fa-info-circle"></i>
            These requirements will be enforced - service orders cannot be marked as complete until all required documents are uploaded.
          </p>

          <div class="row">
            <div class="col-md-6">
              <div class="form-check mb-3">
                <input asp-for="QcRequired" class="form-check-input" type="checkbox" />
                <label asp-for="QcRequired" class="form-check-label">
                  <i class="fas fa-search"></i> Quality Check Required
                </label>
                <div class="form-text">Service requires quality control verification</div>
              </div>

              <div class="form-check mb-3">
                <input asp-for="CertificateRequired" class="form-check-input" type="checkbox" />
                <label asp-for="CertificateRequired" class="form-check-label">
                  <i class="fas fa-certificate"></i> Certificate Required
                </label>
                <div class="form-text">Service requires certification document</div>
              </div>

              <div class="form-check mb-3">
                <input asp-for="WorksheetRequired" class="form-check-input" type="checkbox" />
                <label asp-for="WorksheetRequired" class="form-check-label">
                  <i class="fas fa-file-alt"></i> Worksheet Required
                </label>
                <div class="form-text">Service requires completed worksheet document upload</div>
                <span asp-validation-for="WorksheetRequired" class="text-danger"></span>
              </div>
            </div>

            <div class="col-md-6">
              <div class="form-check mb-3">
                <input asp-for="IsActive" class="form-check-input" type="checkbox" />
                <label asp-for="IsActive" class="form-check-label">
                  <i class="fas fa-toggle-on"></i> Active
                </label>
                <div class="form-text">Service type is available for new orders</div>
              </div>

              <div class="alert alert-info" id="requirementsWarning" style="display: none;">
                <i class="fas fa-exclamation-triangle"></i>
                <strong>Document Requirements:</strong>
                <ul id="requirementsList" class="mb-0 mt-2">
                </ul>
              </div>
            </div>
          </div>

          <!-- Change Tracking Information -->
          <hr>
          <div class="row">
            <div class="col-md-6">
              <small class="text-muted">
                <i class="fas fa-info-circle"></i> Changes will affect future service orders only.
                Existing service orders will retain their original settings.
              </small>
            </div>
            <div class="col-md-6 text-end">
              <small class="text-muted">
                Last updated: @DateTime.Now.ToString("MM/dd/yyyy HH:mm")
              </small>
            </div>
          </div>
        </div>
      </div>

      <!-- Documents Card - FIXED APPROACH -->
      <div class="card mt-4">
        <div class="card-header">
          <h5><i class="fas fa-paperclip"></i> Documents</h5>
        </div>
        <div class="card-body">
          <div class="mb-3">
            <div class="d-flex justify-content-between align-items-center">
              <h6 class="mb-0">Service Type Documents</h6>
              <a href="/Services/UploadServiceTypeDocument?serviceTypeId=@Model.Id" class="btn btn-outline-primary btn-sm">
                <i class="fas fa-upload"></i> Upload Document
              </a>
            </div>
            <p class="text-muted small mt-2">
              Upload specifications, procedures, training materials, or other documents related to this service type.
            </p>
          </div>

          <!-- Documents List -->
          <div id="documentsContainer">
            @if (Model.Documents?.Any() == true)
            {
              <div class="table-responsive">
                <table class="table table-sm">
                  <thead>
                    <tr>
                      <th>Document Name</th>
                      <th>Type</th>
                      <th>Size</th>
                      <th>Uploaded</th>
                      <th>Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    @foreach (var doc in Model.Documents.OrderBy(d => d.DocumentType).ThenBy(d => d.DocumentName))
                    {
                      <tr>
                        <td>
                          <div class="d-flex align-items-center">
                            <i class="@doc.FileTypeIcon me-2"></i>
                            <div>
                              <strong>@doc.DocumentName</strong>
                              @if (!string.IsNullOrEmpty(doc.Description))
                              {
                                <br>
                          
                                <small class="text-muted">@doc.Description</small>
                              }
                            </div>
                          </div>
                        </td>
                        <td>
                          <span class="badge bg-secondary">@doc.DocumentType</span>
                        </td>
                        <td>@doc.FileSizeFormatted</td>
                        <td>
                          <small>@doc.UploadedDate.ToString("MM/dd/yyyy")</small>
                        </td>
                        <td>
                          <div class="btn-group btn-group-sm">
                            @{
                              var canPreview = new[] { ".pdf", ".png", ".jpg", ".jpeg", ".gif", ".bmp", ".tiff" }
                              .Contains(System.IO.Path.GetExtension(doc.OriginalFileName).ToLowerInvariant());
                            }

                            @if (canPreview)
                            {
                              <button class="btn btn-outline-info" onclick="previewDocument(@doc.Id, '@doc.DocumentName')" title="Preview">
                                <i class="fas fa-eye"></i>
                              </button>
                            }

                            <a href="/Services/DownloadServiceTypeDocument/@doc.Id" class="btn btn-outline-primary" title="Download">
                              <i class="fas fa-download"></i>
                            </a>

                            @if (Model.IsActive)
                            {
                              <form method="post" action="/Services/DeleteServiceTypeDocument/@doc.Id" style="display: inline;" onsubmit="return confirm('Are you sure you want to delete this document?')">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="btn btn-outline-danger" title="Delete">
                                  <i class="fas fa-trash"></i>
                                </button>
                              </form>
                            }
                          </div>
                        </td>
                      </tr>
                    }
                  </tbody>
                </table>
              </div>
            }
            else
            {
              <div class="text-center py-4">
                <i class="fas fa-file-alt fa-3x text-muted mb-3"></i>
                <h6 class="text-muted">No Documents Uploaded</h6>
                <p class="text-muted">Upload specifications, procedures, training materials, or other documents related to this service type.</p>
                <a href="/Services/UploadServiceTypeDocument?serviceTypeId=@Model.Id" class="btn btn-outline-success">
                  <i class="fas fa-upload"></i> Upload First Document
                </a>
              </div>
            }
          </div>
        </div>
      </div>

      <!-- Action Buttons -->
      <div class="d-flex justify-content-between align-items-center mt-4">
        <div>
          <a href="@Url.Action("ServiceTypes")" class="btn btn-outline-secondary">
            <i class="fas fa-times"></i> Cancel
          </a>
          @if (ViewBag.HasActiveServiceOrders == true)
          {
            <button type="button" class="btn btn-outline-info ms-2" onclick="showActiveOrdersWarning()">
              <i class="fas fa-info-circle"></i> View Active Orders
            </button>
          }
        </div>
        <div>
          <button type="button" class="btn btn-outline-warning me-2" onclick="resetToDefaults()">
            <i class="fas fa-undo"></i> Reset Changes
          </button>
          <button type="submit" class="btn btn-primary">
            <i class="fas fa-save"></i> Save Changes
          </button>
        </div>
      </div>
    </form>
  </div>

  <!-- Help and Information Panel -->
  <div class="col-lg-4">
    <!-- Current Usage Information -->
    <div class="card mb-3">
      <div class="card-header">
        <h6><i class="fas fa-chart-bar"></i> Usage Statistics</h6>
      </div>
      <div class="card-body">
        <div class="row text-center">
          <div class="col-6">
            <h5 class="text-primary">@(ViewBag.TotalServiceOrders ?? 0)</h5>
            <small class="text-muted">Total Orders</small>
          </div>
          <div class="col-6">
            <h5 class="text-warning">@(ViewBag.ActiveServiceOrders ?? 0)</h5>
            <small class="text-muted">Active Orders</small>
          </div>
        </div>
        <hr>
        <div class="row text-center">
          <div class="col-6">
            <h6 class="text-success">@((ViewBag.AverageRevenue ?? 0).ToString("C"))</h6>
            <small class="text-muted">Avg Revenue</small>
          </div>
          <div class="col-6">
            <h6 class="text-info">@((ViewBag.AverageHours ?? 0).ToString("F1"))h</h6>
            <small class="text-muted">Avg Hours</small>
          </div>
        </div>
      </div>
    </div>

    <!-- Service Type Preview -->
    <div class="card mb-3">
      <div class="card-header">
        <h6><i class="fas fa-eye"></i> Preview</h6>
      </div>
      <div class="card-body">
        <div id="servicePreview">
          <!-- Preview will be populated by JavaScript -->
        </div>
      </div>
    </div>

    <!-- Guidelines -->
    <div class="card mb-3">
      <div class="card-header">
        <h6><i class="fas fa-lightbulb"></i> Edit Guidelines</h6>
      </div>
      <div class="card-body">
        <div class="mb-3">
          <h6 class="text-primary"><i class="fas fa-exclamation-triangle"></i> Impact</h6>
          <p class="small text-muted">Changes to service types only affect new service orders. Existing orders keep their original settings.</p>
        </div>

        <div class="mb-3">
          <h6 class="text-warning"><i class="fas fa-dollar-sign"></i> Pricing Changes</h6>
          <p class="small text-muted">Rate changes should be carefully considered. Consider market conditions and cost increases.</p>
        </div>

        <div class="mb-3">
          <h6 class="text-info"><i class="fas fa-toggle-off"></i> Deactivation</h6>
          <p class="small text-muted">Deactivating prevents new orders but doesn't affect existing ones. Use when discontinuing services.</p>
        </div>
      </div>
    </div>

    <!-- Recent Changes (if applicable) -->
    @if (ViewBag.RecentChanges != null && ((List<object>)ViewBag.RecentChanges).Any())
    {
      <div class="card">
        <div class="card-header">
          <h6><i class="fas fa-history"></i> Recent Changes</h6>
        </div>
        <div class="card-body">
          <div class="timeline-sm">
            @foreach (var change in (List<dynamic>)ViewBag.RecentChanges)
            {
              <div class="timeline-item-sm">
                <small class="text-muted">@change.Date</small>
                <div class="small">@change.Description</div>
                <div class="small text-muted">by @change.User</div>
              </div>
            }
          </div>
        </div>
      </div>
    }
  </div>
</div>

<!-- Active Orders Warning Modal -->
<div class="modal fade" id="activeOrdersModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">
          <i class="fas fa-exclamation-triangle text-warning"></i> Active Service Orders
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <div class="alert alert-info">
          <p><strong>This service type has active orders that will not be affected by your changes.</strong></p>
          <p>Changes to rates, hours, and requirements will only apply to new service orders created after saving.</p>
        </div>

        <div id="activeOrdersList">
          <!-- Active orders list will be loaded here -->
          <div class="text-center">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2 text-muted">Loading active orders...</p>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <a href="@Url.Action("ServiceOrders", new { serviceTypeFilter = Model.Id })" class="btn btn-primary">
          <i class="fas fa-external-link-alt"></i> View All Orders
        </a>
      </div>
    </div>
  </div>
</div>

<!-- Confirmation Modal for Status Toggle -->
<div class="modal fade" id="statusToggleModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Confirm Status Change</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <div id="statusChangeMessage">
          <!-- Message will be populated by JavaScript -->
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="confirmStatusToggle()">Confirm</button>
      </div>
    </div>
  </div>
</div>

<!-- Document Preview Modal -->
<div class="modal fade" id="documentPreviewModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-xl">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="previewModalTitle">Document Preview</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body p-0">
        <div id="previewLoading" class="text-center p-4">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
          <p class="mt-2">Loading document...</p>
        </div>
        <iframe id="previewIframe" style="width: 100%; height: 70vh; border: none; display: none;"></iframe>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <a id="downloadLink" href="#" class="btn btn-primary">
          <i class="fas fa-download"></i> Download
        </a>
      </div>
    </div>
  </div>
</div>

@section Scripts {
  @{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
  }

  <script>
    let originalFormData = new FormData();
    let pendingStatusChange = null;

    document.addEventListener('DOMContentLoaded', function() {
        console.log('🚀 Initializing EditServiceType page...');

        // Store original form data for reset functionality
        storeOriginalFormData();

        // Setup event listeners
        setupPreviewListeners();
        setupFormValidation();
        setupVendorDropdown();
        validateRequiredFields();

        // Initialize preview and calculation
        setTimeout(() => {
            calculateEstimatedCost();
            updatePreview();
        }, 100);
    });

    function storeOriginalFormData() {
        console.log('📋 Storing original form data...');
        const form = document.querySelector('.needs-validation');
        if (form) {
            originalFormData = new FormData(form);
            console.log('✅ Original form data stored');
        } else {
            console.warn('⚠️ Form with .needs-validation class not found');
        }
    }

    function validateRequiredFields() {
        const hoursInput = document.querySelector('[name="StandardHours"]');
        const rateInput = document.querySelector('[name="StandardRate"]');

        if (hoursInput && (parseFloat(hoursInput.value) < 0.1 || isNaN(parseFloat(hoursInput.value)))) {
            hoursInput.value = '1.0';
        }

        if (rateInput && (parseFloat(rateInput.value) < 0.01 || isNaN(parseFloat(rateInput.value)))) {
            rateInput.value = '75.00';
        }
    }

    function calculateEstimatedCost() {
        const hoursInput = document.querySelector('[name="StandardHours"]');
        const rateInput = document.querySelector('[name="StandardRate"]');
        const estimatedCostInput = document.getElementById('estimatedCost');

        if (hoursInput && rateInput && estimatedCostInput) {
            const hours = parseFloat(hoursInput.value) || 0;
            const rate = parseFloat(rateInput.value) || 0;
            const estimatedCost = hours * rate;

            estimatedCostInput.value = '$' + estimatedCost.toFixed(2);
            updatePreview();
        }
    }

    function setupPreviewListeners() {
        const formFields = ['ServiceName', 'ServiceCode', 'ServiceCategory', 'Description', 'StandardHours', 'StandardRate', 'VendorId', 'QcRequired', 'CertificateRequired', 'WorksheetRequired', 'IsActive'];

        formFields.forEach(fieldName => {
            const field = document.querySelector(`[name="${fieldName}"]`);
            if (field) {
                field.addEventListener('input', function() {
                    if (fieldName === 'StandardHours' || fieldName === 'StandardRate') {
                        calculateEstimatedCost();
                    }
                    updatePreview();
                });

                field.addEventListener('change', function() {
                    if (fieldName === 'StandardHours' || fieldName === 'StandardRate') {
                        calculateEstimatedCost();
                    }
                    updatePreview();
                });
            }
        });
    }

    function updatePreview() {
        const serviceName = document.querySelector('[name="ServiceName"]')?.value || '';
        const serviceCode = document.querySelector('[name="ServiceCode"]')?.value || '';
        const category = document.querySelector('[name="ServiceCategory"]')?.value || '';
        const description = document.querySelector('[name="Description"]')?.value || '';
        const hours = document.querySelector('[name="StandardHours"]')?.value || '0';
        const rate = document.querySelector('[name="StandardRate"]')?.value || '0';
        const vendorSelect = document.querySelector('[name="VendorId"]');
        const vendorName = vendorSelect ? vendorSelect.options[vendorSelect.selectedIndex]?.text || '' : '';
        const qcRequired = document.querySelector('[name="QcRequired"]')?.checked || false;
        const certRequired = document.querySelector('[name="CertificateRequired"]')?.checked || false;
        const worksheetRequired = document.querySelector('[name="WorksheetRequired"]')?.checked || false;
        const isActive = document.querySelector('[name="IsActive"]')?.checked || false;

        updateRequirementsWarning(qcRequired, certRequired, worksheetRequired);

        const estimatedCost = (parseFloat(hours) || 0) * (parseFloat(rate) || 0);

        const previewHtml = `
            <div class="text-center">
                <h6 class="text-primary">${serviceName || 'Service Name'}</h6>
                ${serviceCode ? `<div class="small text-muted mb-2">Code: ${serviceCode}</div>` : ''}
                ${category ? `<span class="badge bg-secondary mb-2">${category}</span>` : ''}
                ${vendorName && vendorName !== '-- Select Vendor --' ? `<div class="small text-info mb-2"><i class="fas fa-building"></i> ${vendorName}</div>` : ''}
                ${description ? `<p class="small text-muted">${description.substring(0, 100)}${description.length > 100 ? '...' : ''}</p>` : ''}
                <hr class="my-2">
                <div class="row text-center">
                    <div class="col-6">
                        <div class="small text-muted">Standard Hours</div>
                        <div class="fw-bold">${hours}</div>
                    </div>
                    <div class="col-6">
                        <div class="small text-muted">Hourly Rate</div>
                        <div class="fw-bold">$${rate}</div>
                    </div>
                </div>
                <div class="mt-2">
                    <div class="small text-muted">Estimated Cost</div>
                    <div class="fw-bold text-success fs-6">$${estimatedCost.toFixed(2)}</div>
                </div>
                <div class="mt-2">
                    ${qcRequired ? '<span class="badge bg-warning text-dark me-1">QC</span>' : ''}
                    ${certRequired ? '<span class="badge bg-info me-1">Cert</span>' : ''}
                    ${worksheetRequired ? '<span class="badge bg-primary me-1">Worksheet</span>' : ''}
                    ${isActive ? '<span class="badge bg-success">Active</span>' : '<span class="badge bg-secondary">Inactive</span>'}
                </div>
            </div>
        `;

        const previewElement = document.getElementById('servicePreview');
        if (previewElement) {
            previewElement.innerHTML = previewHtml;
        }
    }

    function updateRequirementsWarning(qc, cert, worksheet) {
        const warningBox = document.getElementById('requirementsWarning');
        const requirementsList = document.getElementById('requirementsList');

        if (!warningBox || !requirementsList) return;

        const requirements = [];
        if (qc) requirements.push('<li>Quality Check verification required</li>');
        if (cert) requirements.push('<li>Service Certificate must be uploaded</li>');
        if (worksheet) requirements.push('<li>Service Worksheet must be uploaded</li>');

        if (requirements.length > 0) {
            requirementsList.innerHTML = requirements.join('');
            warningBox.style.display = 'block';
        } else {
            warningBox.style.display = 'none';
        }
    }

    function setupFormValidation() {
        const form = document.querySelector('.needs-validation');
        if (form) {
            // Enhanced validation for StandardHours
            const hoursInput = document.querySelector('[name="StandardHours"]');
            if (hoursInput) {
                hoursInput.addEventListener('input', function() {
                    const value = parseFloat(this.value);

                    // Clear any previous custom validity
                    this.setCustomValidity('');

                    if (isNaN(value)) {
                        this.setCustomValidity('Please enter a valid number');
                    } else if (value < 0.1) {
                        this.setCustomValidity('Standard hours must be at least 0.1');
                    } else if (value > 100) {
                        this.setCustomValidity('Standard hours cannot exceed 100');
                    } else {
                        this.setCustomValidity(''); // Valid
                    }

                    // Update the estimated cost calculation
                    calculateEstimatedCost();
                });
            }

            // Enhanced validation for StandardRate
            const rateInput = document.querySelector('[name="StandardRate"]');
            if (rateInput) {
                rateInput.addEventListener('input', function() {
                    const value = parseFloat(this.value);

                    // Clear any previous custom validity
                    this.setCustomValidity('');

                    if (isNaN(value)) {
                        this.setCustomValidity('Please enter a valid number');
                    } else if (value < 0.01) {
                        this.setCustomValidity('Standard rate must be at least $0.01');
                    } else if (value > 1000) {
                        this.setCustomValidity('Standard rate cannot exceed $1000');
                    } else {
                        this.setCustomValidity(''); // Valid
                    }

                    // Update the estimated cost calculation
                    calculateEstimatedCost();
                });
            }

            form.addEventListener('submit', function(event) {
                if (!form.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();

                    const invalidFields = form.querySelectorAll(':invalid');
                    if (invalidFields.length > 0) {
                        // Focus on the first invalid field
                        invalidFields[0].focus();

                        // Show specific error message
                        const firstInvalidField = invalidFields[0];
                        const fieldName = firstInvalidField.getAttribute('name');
                        const customMessage = firstInvalidField.validationMessage;

                        showNotification(`Validation Error: ${customMessage}`, 'warning');
                        console.log(`Validation failed for field: ${fieldName}, message: ${customMessage}`);
                    }
                }
                form.classList.add('was-validated');
            });
        }
    }

    function setupVendorDropdown() {
        const vendorSelect = document.getElementById('vendorSelect');
        const addVendorBtn = document.getElementById('addNewVendorBtn');

        if (vendorSelect) {
            vendorSelect.addEventListener('change', function() {
                updatePreview();
            });
        }

        if (addVendorBtn) {
            addVendorBtn.addEventListener('click', function() {
                window.open('/Vendors/Create', '_blank');
            });
        }
    }

    function resetToDefaults() {
        if (confirm('Are you sure you want to reset all changes? This will restore the original values.')) {
            const form = document.querySelector('.needs-validation');

            if (form && originalFormData) {
                for (let [key, value] of originalFormData.entries()) {
                    const field = form.querySelector(`[name="${key}"]`);
                    if (field) {
                        if (field.type === 'checkbox') {
                            field.checked = value === 'true';
                        } else {
                            field.value = value;
                        }
                    }
                }

                form.classList.remove('was-validated');
                calculateEstimatedCost();
                updatePreview();
                showNotification('Form reset to original values', 'success');
            }
        }
    }

    function showNotification(message, type = 'info') {
        const iconMap = {
            'success': 'check-circle',
            'error': 'exclamation-circle',
            'warning': 'exclamation-triangle',
            'info': 'info-circle'
        };

        const bgMap = {
            'error': 'danger',
            'success': 'success',
            'warning': 'warning',
            'info': 'info'
        };

        const icon = iconMap[type] || 'info-circle';
        const bgClass = bgMap[type] || 'info';

        const toastHtml = `
            <div class="toast align-items-center text-white bg-${bgClass} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="d-flex">
                    <div class="toast-body">
                        <i class="fas fa-${icon}"></i> ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            </div>
        `;

        let toastContainer = document.querySelector('.toast-container');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
            document.body.appendChild(toastContainer);
        }

        toastContainer.insertAdjacentHTML('beforeend', toastHtml);
        const toast = new bootstrap.Toast(toastContainer.lastElementChild);
        toast.show();
    }

    // Document preview functionality
    function previewDocument(documentId, documentName) {
        const modal = new bootstrap.Modal(document.getElementById('documentPreviewModal'));
        const iframe = document.getElementById('previewIframe');
        const modalTitle = document.getElementById('previewModalTitle');
        const downloadLink = document.getElementById('downloadLink');
        const loading = document.getElementById('previewLoading');

        modalTitle.textContent = `Preview: ${documentName}`;
        downloadLink.href = `/Services/DownloadServiceTypeDocument/${documentId}`;

        // Show loading, hide iframe
        loading.style.display = 'block';
        iframe.style.display = 'none';

        // Set iframe source to view the document
        iframe.src = `/Services/ViewServiceTypeDocument/${documentId}`;

        // Show modal
        modal.show();

        // Handle iframe load
        iframe.onload = function() {
            loading.style.display = 'none';
            iframe.style.display = 'block';
        };

        // Handle iframe error
        iframe.onerror = function() {
            loading.innerHTML = `
                <div class="text-center p-4">
                    <i class="fas fa-exclamation-triangle fa-3x text-warning mb-3"></i>
                    <h5>Preview Not Available</h5>
                    <p class="text-muted">This document cannot be previewed in your browser.</p>
                    <a href="/Services/DownloadServiceTypeDocument/${documentId}" class="btn btn-primary">
                        <i class="fas fa-download"></i> Download Document
                    </a>
                </div>
            `;
        };
    }

    // Status toggle functions
    function toggleServiceTypeStatus(serviceTypeId, activate) {
        pendingStatusChange = { id: serviceTypeId, activate: activate };

        const action = activate ? 'activate' : 'deactivate';
        const message = activate
            ? '<p><strong>Activate this service type?</strong></p><p>It will become available for new service orders.</p>'
            : '<p><strong>Deactivate this service type?</strong></p><p>It will no longer be available for new service orders. Existing orders will not be affected.</p>';

        const messageElement = document.getElementById('statusChangeMessage');
        if (messageElement) {
            messageElement.innerHTML = message;
        }

        const modal = document.getElementById('statusToggleModal');
        if (modal) {
            new bootstrap.Modal(modal).show();
        }
    }

    function confirmStatusToggle() {
        if (!pendingStatusChange) return;

        const { id, activate } = pendingStatusChange;
        const action = activate ? 'activate' : 'deactivate';

        fetch(`@Url.Action("ToggleServiceTypeStatus")?id=${id}&activate=${activate}`, {
            method: 'POST',
            headers: {
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
            }
        })
        .then(response => response.json())
        .then(data => {
            const modal = document.getElementById('statusToggleModal');
            if (modal) {
                const bootstrapModal = bootstrap.Modal.getInstance(modal);
                if (bootstrapModal) {
                    bootstrapModal.hide();
                }
            }

            if (data.success) {
                showNotification(`Service type ${action}d successfully`, 'success');
                const activeCheckbox = document.querySelector('[name="IsActive"]');
                if (activeCheckbox) {
                    activeCheckbox.checked = activate;
                }
                updatePreview();
                setTimeout(() => location.reload(), 1500);
            } else {
                alert(`Error ${action}ing service type: ${data.message}`);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert(`Error ${action}ing service type. Please try again.`);
        });

        pendingStatusChange = null;
    }

    function showActiveOrdersWarning() {
        const modal = document.getElementById('activeOrdersModal');
        if (modal) {
            new bootstrap.Modal(modal).show();

            fetch(`@Url.Action("GetActiveServiceOrders")?serviceTypeId=@Model.Id`)
                .then(response => response.json())
                .then(data => {
                    const activeOrdersList = document.getElementById('activeOrdersList');
                    if (activeOrdersList) {
                        if (data.success && data.orders && data.orders.length > 0) {
                            let ordersHtml = '<div class="table-responsive"><table class="table table-sm"><thead><tr><th>Order #</th><th>Customer</th><th>Status</th><th>Date</th></tr></thead><tbody>';

                            data.orders.forEach(order => {
                                ordersHtml += `
                                    <tr>
                                        <td><a href="/Services/Details/${order.id}" class="text-decoration-none">${order.serviceOrderNumber}</a></td>
                                        <td>${order.customerName}</td>
                                        <td><span class="badge bg-primary">${order.status}</span></td>
                                        <td>${new Date(order.requestDate).toLocaleDateString()}</td>
                                    </tr>
                                `;
                            });

                            ordersHtml += '</tbody></table></div>';
                            activeOrdersList.innerHTML = ordersHtml;
                        } else {
                            activeOrdersList.innerHTML = '<div class="text-center text-muted">No active orders found.</div>';
                        }
                    }
                })
                .catch(error => {
                    console.error('Error loading active orders:', error);
                    const activeOrdersList = document.getElementById('activeOrdersList');
                    if (activeOrdersList) {
                        activeOrdersList.innerHTML = '<div class="alert alert-danger">Error loading active orders.</div>';
                    }
                });
        }
    }

    // Reset iframe source when modal is closed
    document.getElementById('documentPreviewModal').addEventListener('hidden.bs.modal', function () {
        document.getElementById('previewIframe').src = '';
    });

  </script>

  <style>
    .timeline-sm {
      position: relative;
      padding-left: 20px;
    }

      .timeline-sm::before {
        content: '';
        position: absolute;
        left: 8px;
        top: 0;
        bottom: 0;
        width: 1px;
        background: #dee2e6;
      }

    .timeline-item-sm {
      position: relative;
      margin-bottom: 15px;
      background: #f8f9fa;
      padding: 8px 12px;
      border-radius: 4px;
      border-left: 2px solid #007bff;
    }

      .timeline-item-sm::before {
        content: '';
        position: absolute;
        left: -21px;
        top: 10px;
        width: 6px;
        height: 6px;
        background: #007bff;
        border-radius: 50%;
      }

    .form-control:focus, .form-select:focus {
      border-color: #80bdff;
      box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .card {
      box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }

    .btn-outline-success:hover, .btn-outline-warning:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    }

    .form-control:invalid {
      border-color: #dc3545;
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath d='m5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
      background-repeat: no-repeat;
      background-position: right calc(0.375em + 0.1875rem) center;
      background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    }

    .form-control:valid {
      border-color: #198754;
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='m2.3 6.73.8-.78 1.99-1.99L6.47 2.6l.87.87-3.56 3.56a.5.5 0 0 1-.18.127.5.5 0 0 1-.53-.14l-1.7-1.7.87-.87z'/%3e%3c/svg%3e");
      background-repeat: no-repeat;
      background-position: right calc(0.375em + 0.1875rem) center;
      background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    }

    .was-validated .form-control:invalid {
      border-color: #dc3545;
    }

    .form-control:valid {
      border-color: #198754;
    }

    .was-validated .form-control:invalid {
      border-color: #dc3545;
    }

    .was-validated .form-control:valid {
      border-color: #198754;
    }

    .btn-group-sm .btn {
      padding: 0.25rem 0.5rem;
      font-size: 0.875rem;
    }

    .table th {
      border-top: none;
      font-weight: 600;
      font-size: 0.875rem;
    }

    .badge {
      font-size: 0.75rem;
    }
  </style>
}