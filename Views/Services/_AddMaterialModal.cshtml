@model InventorySystem.ViewModels.AddMaterialViewModel

<div class="modal fade" id="addMaterialModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">
          <i class="fas fa-boxes"></i> Add Material/Part
          @if (Model.ServiceOrder != null)
          {
            <span class="text-muted">- @Model.ServiceOrder.ServiceOrderNumber</span>
          }
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <form id="addMaterialForm" method="post" action="@Url.Action("AddMaterial")">
        <div class="modal-body">
          <input type="hidden" asp-for="ServiceOrderId" />

          <div class="mb-3">
            <label asp-for="ItemId" class="form-label">Material/Part <span class="text-danger">*</span></label>
            <select asp-for="ItemId" class="form-select" asp-items="Model.ItemOptions" required
                    onchange="loadItemDetails(this.value)">
              <option value="">Select material or part...</option>
            </select>
            <span asp-validation-for="ItemId" class="text-danger"></span>
          </div>

          <div id="itemDetails" class="alert alert-info" style="display: none;">
            <!-- Item details will be loaded here -->
          </div>

          <div class="row">
            <div class="col-md-6 mb-3">
              <label asp-for="QuantityUsed" class="form-label">Quantity Used <span class="text-danger">*</span></label>
              <input asp-for="QuantityUsed" class="form-control" type="number" step="0.01" min="0.01" required
                     onchange="calculateMaterialCost()" />
              <span asp-validation-for="QuantityUsed" class="text-danger"></span>
            </div>

            <div class="col-md-6 mb-3">
              <label asp-for="UnitCost" class="form-label">Unit Cost</label>
              <input asp-for="UnitCost" class="form-control" type="number" step="0.01" min="0"
                     onchange="calculateMaterialCost()" />
              <div class="form-text">Leave blank to use item's average cost</div>
              <span asp-validation-for="UnitCost" class="text-danger"></span>
            </div>
          </div>

          <div class="mb-3">
            <label class="form-label">Total Cost</label>
            <input id="materialTotalCost" class="form-control" readonly />
          </div>

          <div class="mb-3">
            <label asp-for="Notes" class="form-label">Notes</label>
            <textarea asp-for="Notes" class="form-control" rows="2"
                      placeholder="Notes about material usage..."></textarea>
            <span asp-validation-for="Notes" class="text-danger"></span>
          </div>

          <div class="form-check">
            <input asp-for="IsBillable" class="form-check-input" type="checkbox" />
            <label asp-for="IsBillable" class="form-check-label">
              <i class="fas fa-dollar-sign"></i> This material is billable to the customer
            </label>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
            <i class="fas fa-times"></i> Cancel
          </button>
          <button type="submit" class="btn btn-primary">
            <i class="fas fa-check"></i> Add Material
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  function loadItemDetails(itemId) {
      if (!itemId) {
          document.getElementById('itemDetails').style.display = 'none';
          return;
      }

      // In a real implementation, this would fetch item details via AJAX
      // For now, just show a placeholder
      document.getElementById('itemDetails').innerHTML = `
          <div class="d-flex justify-content-between">
              <div>
                  <strong>Loading item details...</strong>
              </div>
              <div class="spinner-border spinner-border-sm" role="status"></div>
          </div>
      `;
      document.getElementById('itemDetails').style.display = 'block';

      // Simulate API call
      setTimeout(() => {
          document.getElementById('itemDetails').innerHTML = `
              <div class="row">
                  <div class="col-md-8">
                      <strong>Item Details</strong><br>
                      <small class="text-muted">Current stock and pricing information would be shown here</small>
                  </div>
                  <div class="col-md-4 text-end">
                      <span class="badge bg-success">In Stock</span>
                  </div>
              </div>
          `;
      }, 500);
  }

  function calculateMaterialCost() {
      const quantity = parseFloat(document.querySelector('#addMaterialModal [name="QuantityUsed"]').value) || 0;
      const unitCost = parseFloat(document.querySelector('#addMaterialModal [name="UnitCost"]').value) || 0;
      const totalCost = quantity * unitCost;

      document.getElementById('materialTotalCost').value = totalCost > 0 ? '$' + totalCost.toFixed(2) : 'Using item average cost';
  }

  // Handle form submission via AJAX
  document.getElementById('addMaterialForm').addEventListener('submit', function(e) {
      e.preventDefault();

      const formData = new FormData(this);

      if (window.LoadingIndicator) {
          window.LoadingIndicator.show('Adding Material...', 'Please wait');
      }

      fetch(this.action, {
          method: 'POST',
          body: formData,
          headers: {
              'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
          }
      })
      .then(response => response.json())
      .then(data => {
          if (window.LoadingIndicator) {
              window.LoadingIndicator.hide();
          }

          if (data.success) {
              bootstrap.Modal.getInstance(document.getElementById('addMaterialModal')).hide();
              location.reload(); // Refresh to show new material
          } else {
              alert('Error adding material: ' + data.message);
          }
      })
      .catch(error => {
          if (window.LoadingIndicator) {
              window.LoadingIndicator.hide();
          }
          console.error('Error:', error);
          alert('Error adding material. Please try again.');
      });
  });

  // Initialize cost calculation
  document.addEventListener('DOMContentLoaded', calculateMaterialCost);
</script>