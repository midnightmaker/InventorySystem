@* Views/Production/Details.cshtml - Enhanced Version *@
@using InventorySystem.Domain.Enums
@using InventorySystem.ViewModels
@model ProductionDetailsViewModel
@{
  ViewData["Title"] = $"Production Details - {Model.Production.Id}";
}

@* Add this hidden form to provide the anti-forgery token *@
<form style="display: none;">
  @Html.AntiForgeryToken()
</form>

<div class="container-fluid">
  <div class="row">
    <div class="col-md-8">
      <!-- Production Information -->
      <div class="card">
        <div class="card-header">
          <h4><i class="fas fa-cogs"></i> Production #@Model.Production.Id</h4>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-md-6">
              <p><strong>BOM:</strong> @Model.Production.Bom?.BomNumber</p>
              <p><strong>Finished Good:</strong> @Model.Production.FinishedGood?.Description</p>
              <p><strong>Quantity:</strong> @Model.Production.QuantityProduced</p>
              <p><strong>Production Date:</strong> @Model.Production.ProductionDate.ToString("yyyy-MM-dd")</p>
            </div>
            <div class="col-md-6">
              <p><strong>Material Cost:</strong> @Model.Production.MaterialCost.ToString("C")</p>
              <p><strong>Labor Cost:</strong> @Model.Production.LaborCost.ToString("C")</p>
              <p><strong>Overhead Cost:</strong> @Model.Production.OverheadCost.ToString("C")</p>
              <p><strong>Total Cost:</strong> @Model.Production.TotalCost.ToString("C")</p>
            </div>
          </div>
          @if (!string.IsNullOrEmpty(Model.Production.Notes))
          {
            <div class="row">
              <div class="col-12">
                <p><strong>Notes:</strong> @Model.Production.Notes</p>
              </div>
            </div>
          }
        </div>
      </div>

      @if (Model.Workflow != null)
      {
        <!-- Workflow Status -->
        <div class="card mt-3">
          <div class="card-header">
            <h5><i class="fas fa-route"></i> Workflow Status</h5>
          </div>
          <div class="card-body">
            <div class="row">
              <div class="col-md-6">
                <p>
                  <strong>Current Status:</strong>
                  @if (Model.Workflow != null)
                  {
                    <span class="badge bg-@GetStatusColor(Model.Workflow.Status) fs-6">
                      @Model.Workflow.Status.ToString().Replace("InProgress", "In Progress")
                    </span>
                  }
                  else
                  {
                    <span class="badge bg-secondary fs-6">No Workflow</span>
                  }
                </p>
                <p>
                  <strong>Priority:</strong>
                  @if (Model.Workflow != null)
                  {
                    <span class="badge bg-@GetPriorityColor(Model.Workflow.Priority)">@Model.Workflow.Priority</span>
                  }
                </p>
                @if (!string.IsNullOrEmpty(Model.Workflow?.AssignedTo))
                {
                  <p><strong>Assigned To:</strong> @Model.Workflow.AssignedTo</p>
                }
              </div>
              <div class="col-md-6">
                @if (Model.Workflow.StartedAt.HasValue)
                {
                  <p><strong>Started:</strong> @Model.Workflow.StartedAt.Value.ToString("yyyy-MM-dd HH:mm")</p>
                }
                @if (Model.Workflow.EstimatedCompletionDate.HasValue)
                {
                  <p>
                    <strong>Est. Completion:</strong>
                    <span class="@(Model.Workflow.IsOverdue ? "text-danger" : "")">
                      @Model.Workflow.EstimatedCompletionDate.Value.ToString("yyyy-MM-dd HH:mm")
                    </span>
                    @if (Model.Workflow.IsOverdue)
                    {
                      <span class="badge bg-danger ms-2">Overdue</span>
                    }
                  </p>
                }
                @if (Model.Workflow.ActualCompletionDate.HasValue)
                {
                  <p><strong>Completed:</strong> @Model.Workflow.ActualCompletionDate.Value.ToString("yyyy-MM-dd HH:mm")</p>
                }
                @if (Model.Workflow.Duration.HasValue)
                {
                  <p><strong>Duration:</strong> @Model.Workflow.Duration.Value.ToString(@"dd\d\ hh\h\ mm\m")</p>
                }
              </div>
            </div>
          </div>
        </div>

        <!-- Workflow Actions -->
        @if (Model.ValidNextStatuses.Any())
        {
          <div class="card mt-3">
            <div class="card-header">
              <h5><i class="fas fa-tools"></i> Workflow Actions</h5>
            </div>
            <div class="card-body">
              <div class="row">
                @foreach (var status in Model.ValidNextStatuses)
                {
                  <div class="col-md-4 mb-2">
                    @switch (status)
                    {
                      case ProductionStatus.InProgress:
                        <button class="btn btn-warning w-100" onclick="startProduction(@Model.Production.Id)">
                          <i class="fas fa-play"></i> Start Production
                        </button>
                        break;
                      case ProductionStatus.QualityCheck:
                        <button class="btn btn-secondary w-100" onclick="moveToQualityCheck(@Model.Production.Id)">
                          <i class="fas fa-check-circle"></i> Quality Check
                        </button>
                        break;
                      case ProductionStatus.Completed:
                        <button class="btn btn-success w-100" onclick="completeProduction(@Model.Production.Id)">
                          <i class="fas fa-check"></i> Complete
                        </button>
                        break;
                      case ProductionStatus.OnHold:
                        <button class="btn btn-danger w-100" onclick="putOnHold(@Model.Production.Id)">
                          <i class="fas fa-pause"></i> Put on Hold
                        </button>
                        break;
                      case ProductionStatus.Cancelled:
                        <button class="btn btn-dark w-100" onclick="cancelProduction(@Model.Production.Id)">
                          <i class="fas fa-times"></i> Cancel
                        </button>
                        break;
                    }
                  </div>
                }
              </div>

              <!-- Assignment Section -->
              <div class="row mt-3">
                <div class="col-md-8">
                  <div class="input-group">
                    <input type="text" class="form-control" id="assignTo" placeholder="Employee name" value="@Model.Workflow.AssignedTo">
                    <button class="btn btn-outline-primary" onclick="assignProduction(@Model.Production.Id)">
                      <i class="fas fa-user"></i> Assign
                    </button>
                  </div>
                </div>
              </div>

              <!-- Quality Check Section -->
              @if (Model.Workflow.Status == ProductionStatus.QualityCheck)
              {
                <div class="row mt-3">
                  <div class="col-12">
                    <h6>Quality Check</h6>
                    <div class="mb-2">
                      <textarea class="form-control" id="qcNotes" placeholder="Quality check notes..." rows="2"></textarea>
                    </div>
                    <div class="btn-group" role="group">
                      <button class="btn btn-success" onclick="completeQualityCheck(@Model.Production.Id, true)">
                        <i class="fas fa-check"></i> Pass
                      </button>
                      <button class="btn btn-danger" onclick="completeQualityCheck(@Model.Production.Id, false)">
                        <i class="fas fa-times"></i> Fail
                      </button>
                    </div>
                  </div>
                </div>
              }
            </div>
          </div>
        }

        <!-- Timeline -->
        @if (Model.Timeline?.Events.Any() == true)
        {
          <div class="card mt-3">
            <div class="card-header">
              <h5><i class="fas fa-history"></i> Timeline</h5>
            </div>
            <div class="card-body">
              <div class="timeline">
                @foreach (var evt in Model.Timeline.Events.OrderByDescending(e => e.Timestamp))
                {
                  <div class="timeline-item">
                    <div class="timeline-marker"></div>
                    <div class="timeline-content">
                      <div class="d-flex justify-content-between">
                        <strong>@evt.Description</strong>
                        <small class="text-muted">@evt.Timestamp.ToString("yyyy-MM-dd HH:mm")</small>
                      </div>
                      @if (!string.IsNullOrEmpty(evt.TriggeredBy))
                      {
                        <small class="text-muted">by @evt.TriggeredBy</small>
                      }
                    </div>
                  </div>
                }
              </div>
            </div>
          </div>
        }
      }
    </div>

    <div class="col-md-4">
      <!-- Quick Stats -->
      <div class="card">
        <div class="card-header">
          <h5><i class="fas fa-chart-bar"></i> Quick Stats</h5>
        </div>
        <div class="card-body">
          <div class="text-center">
            <div class="mb-3">
              <h4 class="text-primary">@Model.Production.TotalCost.ToString("C")</h4>
              <small class="text-muted">Total Production Cost</small>
            </div>
            <div class="mb-3">
              <h4 class="text-info">@Model.Production.QuantityProduced</h4>
              <small class="text-muted">Units Produced</small>
            </div>
            @if (Model.Workflow?.Duration.HasValue == true)
            {
              <div class="mb-3">
                <h4 class="text-success">@Math.Round(Model.Workflow.Duration.Value.TotalHours, 1)h</h4>
                <small class="text-muted">Total Duration</small>
              </div>
            }
          </div>
        </div>
      </div>

      <!-- Quick Actions -->
      <div class="card mt-3">
        <div class="card-header">
          <h5><i class="fas fa-tools"></i> Quick Actions</h5>
        </div>
        <div class="card-body">
          <div class="d-grid gap-2">
            <a href="@Url.Action("BuildBom", new { bomId = Model.Production.BomId })" class="btn btn-success">
              <i class="fas fa-hammer"></i> Build More of This BOM
            </a>
            <a href="@Url.Action("FinishedGoodDetails", new { id = Model.Production.FinishedGoodId })" class="btn btn-outline-primary">
              <i class="fas fa-box"></i> View Finished Good
            </a>
            <a href="@Url.Action("Details", "Boms", new { id = Model.Production.BomId })" class="btn btn-outline-info">
              <i class="fas fa-eye"></i> View BOM Details
            </a>
            <a href="@Url.Action("Timeline", "WipDashboard", new { productionId = Model.Production.Id })" class="btn btn-outline-secondary">
              <i class="fas fa-clock"></i> Full Timeline
            </a>
          </div>
        </div>
      </div>

      <!-- Material Consumption -->
      @if (Model.Production.MaterialConsumptions?.Any() == true)
      {
        <div class="card mt-3">
          <div class="card-header">
            <h6><i class="fas fa-boxes"></i> Materials Used</h6>
          </div>
          <div class="card-body">
            @foreach (var consumption in Model.Production.MaterialConsumptions.Take(5))
            {
              <div class="d-flex justify-content-between mb-2">
                <span class="small">@consumption.Item?.PartNumber</span>
                <span class="small text-muted">@consumption.QuantityConsumed units</span>
              </div>
            }
            @if (Model.Production.MaterialConsumptions.Count() > 5)
            {
              <small class="text-muted">...and @(Model.Production.MaterialConsumptions.Count() - 5) more items</small>
            }
          </div>
        </div>
      }
    </div>
  </div>
</div>

<!-- Status Update Modals -->
<div class="modal fade" id="statusModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Update Status</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <label for="statusReason" class="form-label">Reason</label>
          <input type="text" class="form-control" id="statusReason" placeholder="Optional reason for status change">
        </div>
        <div class="mb-3">
          <label for="statusNotes" class="form-label">Notes</label>
          <textarea class="form-control" id="statusNotes" rows="3" placeholder="Additional notes..."></textarea>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="confirmStatusUpdate">Update Status</button>
      </div>
    </div>
  </div>
</div>

@functions {
  string GetStatusColor(ProductionStatus status)
  {
    return status switch
    {
      ProductionStatus.Planned => "info",
      ProductionStatus.InProgress => "warning",
      ProductionStatus.QualityCheck => "secondary",
      ProductionStatus.Completed => "success",
      ProductionStatus.OnHold => "danger",
      ProductionStatus.Cancelled => "dark",
      _ => "light"
    };
  }

  string GetPriorityColor(Priority priority)
  {
    return priority switch
    {
      Priority.Low => "success",
      Priority.Normal => "primary",
      Priority.High => "warning",
      Priority.Critical => "danger",
      _ => "secondary"
    };
  }
}

<style>
  /* Add pulsing animation for error alerts */
  @@keyframes alertPulse {
    0%, 100%

  {
    box-shadow: 0 4px 8px rgba(220, 53, 69, 0.2);
  }

  50% {
    box-shadow: 0 8px 16px rgba(220, 53, 69, 0.4);
  }

  }

  /* Enhanced styling for sticky alerts */
  .alert.position-fixed {
    border-radius: 8px;
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
  }

    .alert.position-fixed .btn-close {
      filter: none;
    }

    .alert.position-fixed .btn {
      font-size: 0.75rem;
    }

  /* Timeline styles */
  .timeline {
    position: relative;
    padding-left: 30px;
  }

  .timeline-item {
    position: relative;
    margin-bottom: 20px;
  }

  .timeline-marker {
    position: absolute;
    left: -35px;
    top: 5px;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background-color: #007bff;
    border: 3px solid #fff;
    box-shadow: 0 0 0 2px #007bff;
  }

  .timeline::before {
    content: '';
    position: absolute;
    left: -30px;
    top: 0;
    bottom: 0;
    width: 2px;
    background-color: #dee2e6;
  }

  .timeline-content {
    background-color: #f8f9fa;
    padding: 10px;
    border-radius: 5px;
    border-left: 3px solid #007bff;
  }
</style>

<script>
  let currentProductionId = @Model.Production.Id;
  let pendingStatusUpdate = null;

  // Get anti-forgery token
  function getAntiForgeryToken() {
    return document.querySelector('input[name="__RequestVerificationToken"]')?.value ||
           document.querySelector('[name="__RequestVerificationToken"]')?.value;
  }

  function startProduction(productionId) {
    const assignedTo = document.getElementById('assignTo')?.value;
    const token = getAntiForgeryToken();

    if (!token) {
      console.error('Anti-forgery token not found');
      showErrorMessage('Security token not found. Please refresh the page and try again.');
      return;
    }

    // Show loading state
    const button = event.target;
    const originalText = button.innerHTML;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Starting...';
    button.disabled = true;

    // First check if production can be started
    fetch(`/Production/CheckProductionReadiness?productionId=${productionId}`)
      .then(response => response.json())
      .then(readinessResult => {
        if (!readinessResult.success) {
          throw new Error(readinessResult.error || 'Failed to check production readiness');
        }

        if (!readinessResult.canStart) {
          showErrorMessage(readinessResult.reason);
          button.innerHTML = originalText;
          button.disabled = false;
          return;
        }

        // If readiness check passes, proceed with starting production
        const formData = new FormData();
        formData.append('productionId', productionId.toString());
        if (assignedTo) {
          formData.append('assignedTo', assignedTo);
        }
        formData.append('__RequestVerificationToken', token);

        return fetch('/Production/StartProduction', {
          method: 'POST',
          body: formData
        });
      })
      .then(response => {
        if (!response) return; // Readiness check failed, already handled above

        console.log('Response status:', response.status);
        if (!response.ok) {
          return response.text().then(text => {
            console.error('Error response body:', text);
            throw new Error(`HTTP ${response.status}: Server error occurred`);
          });
        }
        return response.text();
      })
      .then(data => {
        if (!data) return; // No data means readiness check failed

        console.log('Production started successfully, reloading page...');
        showSuccessMessage('Production started successfully - Status updated to In Progress');

        // Reload page to show updated status
        setTimeout(() => {
          location.reload();
        }, 1500);
      })
      .catch(error => {
        console.error('Error starting production:', error);
        showErrorMessage('Failed to start production: ' + error.message);

        // Restore button state
        button.innerHTML = originalText;
        button.disabled = false;
      });
  }

  function moveToQualityCheck(productionId) {
      updateStatus(productionId, 2, 'Moved to quality check');
  }

  function completeProduction(productionId) {
      updateStatus(productionId, 3, 'Production completed');
  }

  function putOnHold(productionId) {
      const reason = prompt('Reason for putting on hold:');
      if (reason) {
          updateStatus(productionId, 4, reason);
      }
  }

  function cancelProduction(productionId) {
      const reason = prompt('Reason for cancellation:');
      if (reason && confirm('Are you sure you want to cancel this production?')) {
          updateStatus(productionId, 5, reason);
      }
  }

  function assignProduction(productionId) {
      const assignedTo = document.getElementById('assignTo').value;
      if (!assignedTo) {
          showErrorMessage('Please enter an employee name');
          return;
      }

      const token = getAntiForgeryToken();
      const formData = new FormData();
      formData.append('productionId', productionId);
      formData.append('assignedTo', assignedTo);
      if (token) {
        formData.append('__RequestVerificationToken', token);
      }

      fetch(`/Production/AssignProduction`, {
          method: 'POST',
          body: formData
      })
      .then(response => {
        if (response.ok) {
          showSuccessMessage('Production assigned successfully');
          setTimeout(() => location.reload(), 1500);
        } else {
          showErrorMessage('Failed to assign production. Please try again.');
        }
      })
      .catch(error => {
        showErrorMessage('Error assigning production: ' + error.message);
      });
  }

  function completeQualityCheck(productionId, passed) {
      const notes = document.getElementById('qcNotes').value;
      const token = getAntiForgeryToken();

      const formData = new FormData();
      formData.append('productionId', productionId);
      formData.append('passed', passed);
      formData.append('notes', notes);
      if (token) {
        formData.append('__RequestVerificationToken', token);
      }

      fetch(`/Production/CompleteQualityCheck`, {
          method: 'POST',
          body: formData
      })
      .then(response => {
        if (response.ok) {
          showSuccessMessage(`Quality check ${passed ? 'passed' : 'failed'} successfully`);
          setTimeout(() => location.reload(), 1500);
        } else {
          showErrorMessage('Failed to complete quality check. Please try again.');
        }
      })
      .catch(error => {
        showErrorMessage('Error completing quality check: ' + error.message);
      });
  }

  function updateStatus(productionId, newStatus, reason) {
      const token = getAntiForgeryToken();
      const formData = new FormData();
      formData.append('productionId', productionId);
      formData.append('newStatus', newStatus);
      formData.append('reason', reason || '');
      if (token) {
        formData.append('__RequestVerificationToken', token);
      }

      fetch(`/Production/UpdateStatus`, {
          method: 'POST',
          body: formData
      })
      .then(response => {
        if (response.ok) {
          showSuccessMessage('Status updated successfully');
          setTimeout(() => location.reload(), 1500);
        } else {
          showErrorMessage('Failed to update status. Please try again.');
        }
      })
      .catch(error => {
        showErrorMessage('Error updating status: ' + error.message);
      });
  }

  // Enhanced success message - still auto-dismisses but with longer duration
  function showSuccessMessage(message) {
    // Remove any existing alerts of the same type first
    removeExistingAlerts('alert-success');

    const alert = document.createElement('div');
    alert.className = 'alert alert-success alert-dismissible fade show position-fixed shadow-lg';
    alert.style.cssText = `
      top: 20px;
      right: 20px;
      z-index: 9999;
      min-width: 350px;
      max-width: 500px;
      border-left: 4px solid #28a745;
    `;
    alert.innerHTML = `
      <div class="d-flex align-items-center">
        <i class="fas fa-check-circle me-2"></i>
        <div class="flex-grow-1">
          <strong>Success!</strong><br>
          <span class="small">${message}</span>
        </div>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      </div>
    `;
    document.body.appendChild(alert);

    // Auto-dismiss success messages after 4 seconds
    setTimeout(() => {
      if (alert.parentNode) {
        alert.remove();
      }
    }, 4000);
  }

  // Enhanced error message - STICKY (no auto-dismiss)
  function showErrorMessage(message) {
    // Remove any existing alerts of the same type first
    removeExistingAlerts('alert-danger');

    const alert = document.createElement('div');
    alert.className = 'alert alert-danger alert-dismissible fade show position-fixed shadow-lg';
    alert.style.cssText = `
      top: 20px;
      right: 20px;
      z-index: 9999;
      min-width: 350px;
      max-width: 600px;
      border-left: 4px solid #dc3545;
      word-wrap: break-word;
    `;

    // Enhanced error message with more detailed layout
    alert.innerHTML = `
      <div class="d-flex align-items-start">
        <i class="fas fa-exclamation-triangle me-2 mt-1 text-danger"></i>
        <div class="flex-grow-1">
          <strong>Error!</strong><br>
          <span class="small">${message}</span>
          <hr class="my-2">
          <div class="d-flex justify-content-between align-items-center">
            <small class="text-muted">This message will remain until dismissed</small>
            <div>
              <button type="button" class="btn btn-sm btn-outline-secondary me-2" onclick="location.reload()">
                <i class="fas fa-sync"></i> Refresh Page
              </button>
              <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
          </div>
        </div>
      </div>
    `;

    document.body.appendChild(alert);

    // Add a subtle pulsing animation to draw attention
    alert.style.animation = 'alertPulse 2s ease-in-out 3';

    // NO setTimeout - error messages are sticky until manually dismissed

    // Add click handler to the refresh button
    const refreshBtn = alert.querySelector('.btn-outline-secondary');
    if (refreshBtn) {
      refreshBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        location.reload();
      });
    }

    // Log error to console for debugging
    console.error('Production Error:', message);
  }

  // Utility function to remove existing alerts of the same type
  function removeExistingAlerts(alertClass) {
    const existingAlerts = document.querySelectorAll(`.${alertClass}.position-fixed`);
    existingAlerts.forEach(alert => {
      alert.remove();
    });
  }

  // Enhanced warning message (for less critical issues)
  function showWarningMessage(message) {
    removeExistingAlerts('alert-warning');

    const alert = document.createElement('div');
    alert.className = 'alert alert-warning alert-dismissible fade show position-fixed shadow-lg';
    alert.style.cssText = `
      top: 20px;
      right: 20px;
      z-index: 9999;
      min-width: 350px;
      max-width: 500px;
      border-left: 4px solid #ffc107;
    `;
    alert.innerHTML = `
      <div class="d-flex align-items-center">
        <i class="fas fa-exclamation-circle me-2"></i>
        <div class="flex-grow-1">
          <strong>Warning!</strong><br>
          <span class="small">${message}</span>
        </div>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      </div>
    `;
    document.body.appendChild(alert);

    // Auto-dismiss warnings after 8 seconds (longer than success, shorter than manual)
    setTimeout(() => {
      if (alert.parentNode) {
        alert.remove();
      }
    }, 8000);
  }
</script>