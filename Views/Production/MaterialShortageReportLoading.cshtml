@* Views/Production/MaterialShortageReportLoading.cshtml *@
@{
  ViewData["Title"] = "Generating Material Shortage Report";
  var bomId = ViewBag.BomId;
  var quantity = ViewBag.Quantity;
  var bomName = ViewBag.BomName;
}

<div class="container-fluid">
  <div class="row justify-content-center">
    <div class="col-md-8">
      <!-- Header -->
      <div class="d-flex justify-content-between align-items-center mb-4">
        <h1><i class="fas fa-chart-line text-primary"></i> Material Shortage Report</h1>
        <a href="/Production/BuildBom?bomId=@bomId" class="btn btn-outline-secondary">
          <i class="fas fa-arrow-left"></i> Back to Build BOM
        </a>
      </div>

      <!-- Loading Card -->
      <div class="card shadow-lg border-0" id="loadingCard">
        <div class="card-body p-5 text-center">
          <!-- Loading Animation -->
          <div class="mb-4">
            <div class="spinner-border text-primary" style="width: 4rem; height: 4rem;" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
          </div>

          <!-- Loading Message -->
          <h3 class="text-primary mb-3">Generating Material Shortage Report</h3>
          <p class="text-muted mb-4">
            Analyzing BOM structure for <strong>@bomName</strong>
            and checking inventory levels for <strong>@quantity unit(s)</strong>...
          </p>

          <!-- Progress Bar -->
          <div class="progress mb-4" style="height: 8px;">
            <div class="progress-bar progress-bar-striped progress-bar-animated bg-primary"
                 role="progressbar" style="width: 100%"></div>
          </div>

          <!-- Progress Steps -->
          <div class="row text-start" id="progressSteps">
            <div class="col-md-6">
              <div class="d-flex align-items-center mb-3" id="step1">
                <div class="spinner-border spinner-border-sm text-primary me-3" role="status"></div>
                <div>
                  <strong>Step 1:</strong> Loading BOM structure
                  <div class="small text-muted">Reading hierarchical component data...</div>
                </div>
              </div>
              <div class="d-flex align-items-center mb-3" id="step2">
                <div class="text-muted me-3">
                  <i class="fas fa-clock"></i>
                </div>
                <div class="text-muted">
                  <strong>Step 2:</strong> Calculating material requirements
                  <div class="small">Computing quantities for all components...</div>
                </div>
              </div>
            </div>
            <div class="col-md-6">
              <div class="d-flex align-items-center mb-3" id="step3">
                <div class="text-muted me-3">
                  <i class="fas fa-clock"></i>
                </div>
                <div class="text-muted">
                  <strong>Step 3:</strong> Checking inventory levels
                  <div class="small">Verifying current stock for each item...</div>
                </div>
              </div>
              <div class="d-flex align-items-center mb-3" id="step4">
                <div class="text-muted me-3">
                  <i class="fas fa-clock"></i>
                </div>
                <div class="text-muted">
                  <strong>Step 4:</strong> Generating shortage analysis
                  <div class="small">Identifying shortages and suggesting purchases...</div>
                </div>
              </div>
            </div>
          </div>

          <!-- Estimated Time -->
          <div class="alert alert-info" id="timeEstimate">
            <i class="fas fa-info-circle"></i>
            <strong>Estimated time:</strong> <span id="estimatedTime">10-30 seconds</span>
            <div class="small mt-1">Complex BOMs with many sub-assemblies may take longer</div>
          </div>
        </div>
      </div>

      <!-- Error Card (Hidden initially) -->
      <div class="card border-danger d-none" id="errorCard">
        <div class="card-body text-center p-5">
          <i class="fas fa-exclamation-triangle text-danger fa-3x mb-3"></i>
          <h4 class="text-danger">Error Generating Report</h4>
          <p class="text-muted mb-4" id="errorMessage">
            An error occurred while generating the material shortage report.
          </p>
          <div class="d-flex justify-content-center gap-3">
            <button class="btn btn-primary" onclick="retryReport()">
              <i class="fas fa-redo"></i> Retry
            </button>
            <a href="/Production/BuildBom?bomId=@bomId" class="btn btn-outline-secondary">
              <i class="fas fa-arrow-left"></i> Back to Build BOM
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
      const bomId = @bomId;
      const quantity = @quantity;
      let currentStep = 1;
      let startTime = Date.now();

      // Start the report generation process
      generateReport();

      async function generateReport() {
          try {
              // Simulate progress steps
              updateProgressSteps();

              // Make the actual API call to generate the report
              const response = await fetch(`/Production/GetMaterialShortageReportData?bomId=${bomId}&quantity=${quantity}`);
              const result = await response.json();

              if (result.success) {
                  // Report generated successfully - redirect to complete view
                  showCompletionAndRedirect(result.data);
              } else {
                  // Show error
                  showError(result.error || 'Unknown error occurred', result.details);
              }
          } catch (error) {
              console.error('Error generating report:', error);
              showError('Network error occurred while generating the report.',
                       'Please check your connection and try again.');
          }
      }

      function updateProgressSteps() {
          const steps = ['step1', 'step2', 'step3', 'step4'];
          let stepIndex = 0;

          const interval = setInterval(() => {
              if (stepIndex < steps.length) {
                  // Complete current step
                  if (stepIndex > 0) {
                      const prevStep = document.getElementById(steps[stepIndex - 1]);
                      const spinner = prevStep.querySelector('.spinner-border');
                      const icon = prevStep.querySelector('.text-muted i') || spinner;

                      spinner.remove();
                      prevStep.querySelector('.text-muted').classList.remove('text-muted');
                      prevStep.querySelector('.text-muted').classList.add('text-success');
                      prevStep.insertAdjacentHTML('afterbegin', '<i class="fas fa-check-circle text-success me-3"></i>');
                  }

                  // Start next step
                  if (stepIndex < steps.length) {
                      const currentStepEl = document.getElementById(steps[stepIndex]);
                      const textElements = currentStepEl.querySelectorAll('.text-muted');
                      textElements.forEach(el => {
                          el.classList.remove('text-muted');
                          el.classList.add('text-primary');
                      });

                      const clockIcon = currentStepEl.querySelector('.fa-clock');
                      if (clockIcon) {
                          clockIcon.parentElement.innerHTML = '<div class="spinner-border spinner-border-sm text-primary" role="status"></div>';
                      }
                  }

                  stepIndex++;
              } else {
                  clearInterval(interval);
              }
          }, 1500); // Update every 1.5 seconds
      }

      function showCompletionAndRedirect(data) {
          // Show completion message briefly before redirecting
          document.getElementById('loadingCard').innerHTML = `
              <div class="card-body p-5 text-center">
                  <i class="fas fa-check-circle text-success fa-4x mb-3"></i>
                  <h3 class="text-success mb-3">Report Generated Successfully!</h3>
                  <p class="text-muted mb-4">
                      Found ${data.hasShortages ? data.totalShortageItems + ' shortage(s)' : 'no shortages'}
                      in ${data.totalRequiredItems} required materials.
                  </p>
                  <div class="spinner-border spinner-border-sm text-primary me-2" role="status"></div>
                  <span>Loading complete report...</span>
              </div>
          `;

          // Redirect to the complete report after a brief delay
          setTimeout(() => {
              window.location.href = `/Production/MaterialShortageReportComplete?bomId=${bomId}&quantity=${quantity}`;
          }, 1500);
      }

      function showError(error, details) {
          document.getElementById('loadingCard').classList.add('d-none');
          document.getElementById('errorCard').classList.remove('d-none');
          document.getElementById('errorMessage').innerHTML = `
              <strong>${error}</strong>
              ${details ? '<br><small class="text-muted">' + details + '</small>' : ''}
          `;
      }

      window.retryReport = function() {
          document.getElementById('errorCard').classList.add('d-none');
          document.getElementById('loadingCard').classList.remove('d-none');
          currentStep = 1;
          generateReport();
      };

      // Update elapsed time display
      setInterval(() => {
          const elapsed = Math.floor((Date.now() - startTime) / 1000);
          const minutes = Math.floor(elapsed / 60);
          const seconds = elapsed % 60;
          const timeStr = minutes > 0 ? `${minutes}m ${seconds}s` : `${seconds}s`;

          const timeDisplay = document.querySelector('#timeEstimate strong');
          if (timeDisplay && elapsed > 10) {
              timeDisplay.innerHTML = `Elapsed time: ${timeStr}`;
          }
      }, 1000);
  });
</script>

<style>
  .spinner-border-sm {
    width: 1rem;
    height: 1rem;
  }

  .progress-bar-animated {
    animation: progress-bar-stripes 1s linear infinite;
  }

  @@keyframes progress-bar-stripes {
    0%

  {
    background-position: 1rem 0;
  }

  100% {
    background-position: 0 0;
  }

  }

  .card {
    transition: all 0.3s ease;
  }

  .fade-in {
    animation: fadeIn 0.5s ease-in;
  }

  @@keyframes fadeIn {
    from

  {
    opacity: 0;
    transform: translateY(20px);
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }

  }
</style>