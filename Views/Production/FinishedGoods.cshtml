@model IEnumerable<InventorySystem.Models.FinishedGood>
@{
  ViewData["Title"] = "Finished Goods";
}

<div class="d-flex justify-content-between align-items-center mb-4">
  <h1><i class="fas fa-box"></i> Finished Goods</h1>
  <div class="btn-group">
    <a href="/Production/CreateFinishedGood" class="btn btn-success">
      <i class="fas fa-plus"></i> Create Finished Good
    </a>
    <a href="/Production" class="btn btn-outline-secondary">
      <i class="fas fa-industry"></i> Productions
    </a>
    <a href="/Production/BuildBom" class="btn btn-outline-primary">
      <i class="fas fa-hammer"></i> Build BOM
    </a>
  </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
  <div class="alert alert-success alert-dismissible fade show">
    @TempData["SuccessMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

@if (TempData["ErrorMessage"] != null)
{
  <div class="alert alert-danger alert-dismissible fade show">
    @TempData["ErrorMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

<div class="card">
  <div class="card-header">
    <h5><i class="fas fa-list"></i> Finished Goods Inventory</h5>
  </div>
  <div class="card-body">
    @if (Model?.Any() == true)
    {
      <div class="table-responsive">
        <table class="table table-striped table-hover">
          <thead class="table-dark">
            <tr>
              <th width="80">Image</th>
              <th>Part Number</th>
              <th>Description</th>
              <th>Current Stock</th>
              <th>Unit Cost</th>
              <th>Selling Price</th>
              <th>Total Value</th>
              <th>BOM</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            @foreach (var finishedGood in Model)
            {
              <tr class="@(finishedGood.IsLowStock ? "table-warning" : "") clickable-row" data-finished-good-id="@finishedGood.Id" style="cursor: pointer;">
                <!-- ✅ NEW: Image Thumbnail Column -->
                <td class="align-middle text-center">
                  @if (finishedGood.HasImage)
                  {
                    <img src="/Production/GetFinishedGoodImageThumbnail/@finishedGood.Id?size=60" 
                         alt="@finishedGood.PartNumber" 
                         class="img-thumbnail finished-good-thumbnail" 
                         title="@finishedGood.PartNumber - @finishedGood.Description"
                         onclick="showImageModal('@finishedGood.PartNumber', '/Production/GetFinishedGoodImage/@finishedGood.Id', event)" />
                  }
                  else
                  {
                    <div class="no-image-placeholder" title="No image available">
                      <i class="fas fa-image text-muted"></i>
                    </div>
                  }
                </td>
                <td class="align-middle">
                  <strong>@finishedGood.PartNumber</strong>
                  @if (finishedGood.IsLowStock)
                  {
                    <i class="fas fa-exclamation-triangle text-warning" title="Low Stock"></i>
                  }
                </td>
                <td class="align-middle">@finishedGood.Description</td>
                <td class="align-middle">
                  <span class="badge bg-@(finishedGood.IsLowStock ? "warning" : "primary")">
                    @finishedGood.CurrentStock
                  </span>
                  @if (finishedGood.MinimumStock > 0)
                  {
                    <small class="text-muted">(Min: @finishedGood.MinimumStock)</small>
                  }
                </td>
                <td class="align-middle">@finishedGood.UnitCost.ToString("C")</td>
                <td class="align-middle">@finishedGood.SellingPrice.ToString("C")</td>
                <td class="align-middle">@finishedGood.TotalValue.ToString("C")</td>
                <td class="align-middle">
                  @if (finishedGood.BomId.HasValue)
                  {
                    <a href="/Boms/Details/@finishedGood.BomId" class="btn btn-sm btn-outline-info">
                      <i class="fas fa-eye"></i> View BOM
                    </a>
                  }
                  else
                  {
                    <span class="text-muted">No BOM</span>
                  }
                </td>
                <td class="align-middle">
                  <div class="btn-group btn-group-sm">
                    <a href="/Production/FinishedGoodDetails/@finishedGood.Id" class="btn btn-outline-primary">
                      <i class="fas fa-eye"></i> Details
                    </a>
                    <a href="/Production/EditFinishedGood/@finishedGood.Id" class="btn btn-outline-secondary">
                      <i class="fas fa-edit"></i> Edit
                    </a>
                    @if (finishedGood.BomId.HasValue)
                    {
                      <a href="/Production/BuildBom?bomId=@finishedGood.BomId" class="btn btn-outline-success">
                        <i class="fas fa-hammer"></i> Build
                      </a>
                    }
                  </div>
                </td>
              </tr>
            }
          </tbody>
        </table>
      </div>

      <div class="row mt-4">
        <div class="col-md-6">
          <div class="card bg-light">
            <div class="card-body">
              <h6>Total Items: <span class="badge bg-primary">@Model.Count()</span></h6>
              <h6>Total Stock: <span class="badge bg-info">@Model.Sum(fg => fg.CurrentStock)</span></h6>
              <h6>Total Value: <span class="badge bg-success">@Model.Sum(fg => fg.TotalValue).ToString("C")</span></h6>
            </div>
          </div>
        </div>
        <div class="col-md-6">
          @if (Model.Any(fg => fg.IsLowStock))
          {
            <div class="card border-warning">
              <div class="card-body">
                <h6><i class="fas fa-exclamation-triangle text-warning"></i> Low Stock Items</h6>
                <p class="mb-0">@Model.Count(fg => fg.IsLowStock) item(s) below minimum stock level</p>
                <hr class="my-2">
                @foreach (var lowStockItem in Model.Where(fg => fg.IsLowStock).Take(3))
                {
                  <small class="d-block">
                    <strong>@lowStockItem.PartNumber:</strong> @lowStockItem.CurrentStock / @lowStockItem.MinimumStock
                    @if (lowStockItem.BomId.HasValue)
                    {
                      <a href="/Production/BuildBom?bomId=@lowStockItem.BomId" class="btn btn-xs btn-outline-warning ms-1">Build</a>
                    }
                  </small>
                }
                @if (Model.Count(fg => fg.IsLowStock) > 3)
                {
                  <small class="text-muted">...and @(Model.Count(fg => fg.IsLowStock) - 3) more</small>
                }
              </div>
            </div>
          }
          else
          {
            <div class="card border-success">
              <div class="card-body">
                <h6><i class="fas fa-check-circle text-success"></i> Stock Levels Good</h6>
                <p class="mb-0">All finished goods are above minimum stock levels.</p>
              </div>
            </div>
          }
        </div>
      </div>
    }
    else
    {
      <div class="text-center py-5">
        <i class="fas fa-box fa-3x text-muted mb-3"></i>
        <h4 class="text-muted">No Finished Goods</h4>
        <p class="text-muted">Create finished goods to track your production inventory.</p>
        <a href="/Production/CreateFinishedGood" class="btn btn-success">
          <i class="fas fa-plus"></i> Create Your First Finished Good
        </a>
      </div>
    }
  </div>
</div>

<!-- ✅ NEW: Image Modal for larger view -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="imageModalLabel">Product Image</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body text-center">
        <img id="modalImage" src="#" alt="Product Image" class="img-fluid" style="max-height: 500px;" />
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

@section Scripts {
  <script>
    document.addEventListener('DOMContentLoaded', function() {
        // Make table rows clickable
        const clickableRows = document.querySelectorAll('.clickable-row');

        clickableRows.forEach(function(row) {
            row.addEventListener('click', function(e) {
                // Only proceed if the click wasn't on an action button, link, or image
                if (e.target.closest('.btn-group') || 
                    e.target.closest('a') || 
                    e.target.closest('button') ||
                    e.target.closest('.finished-good-thumbnail') ||
                    e.target.closest('.no-image-placeholder')) {
                    return;
                }

                const finishedGoodId = this.getAttribute('data-finished-good-id');
                if (finishedGoodId) {
                    window.location.href = '/Production/FinishedGoodDetails/' + finishedGoodId;
                }
            });

            // Add hover effect
            row.addEventListener('mouseenter', function() {
                if (!this.classList.contains('table-active')) {
                    this.style.backgroundColor = '#f8f9fa';
                }
            });

            row.addEventListener('mouseleave', function() {
                if (!this.classList.contains('table-active')) {
                    this.style.backgroundColor = '';
                }
            });
        });

        // Prevent action buttons from triggering row click
        const actionButtons = document.querySelectorAll('.btn-group a, .btn-group button');
        actionButtons.forEach(function(button) {
            button.addEventListener('click', function(e) {
                e.stopPropagation();
            });
        });
    });

    // ✅ NEW: Image modal functionality
    function showImageModal(partNumber, imageUrl, event) {
        event.preventDefault();
        event.stopPropagation();
        
        document.getElementById('imageModalLabel').textContent = 'Product Image - ' + partNumber;
        document.getElementById('modalImage').src = imageUrl;
        
        const imageModal = new bootstrap.Modal(document.getElementById('imageModal'));
        imageModal.show();
    }

    // ✅ NEW: Handle image loading errors
    document.addEventListener('DOMContentLoaded', function() {
        const thumbnails = document.querySelectorAll('.finished-good-thumbnail');
        thumbnails.forEach(function(img) {
            img.addEventListener('error', function() {
                // Replace broken image with placeholder
                const placeholder = document.createElement('div');
                placeholder.className = 'no-image-placeholder';
                placeholder.innerHTML = '<i class="fas fa-image text-muted"></i>';
                placeholder.title = 'Image not available';
                this.parentNode.replaceChild(placeholder, this);
            });
        });
    });
  </script>

  <style>
    /* ✅ NEW: Thumbnail styling */
    .finished-good-thumbnail {
      width: 60px;
      height: 60px;
      object-fit: cover;
      cursor: pointer;
      transition: transform 0.2s ease, box-shadow 0.2s ease;
      border-radius: 8px;
    }

    .finished-good-thumbnail:hover {
      transform: scale(1.1);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      z-index: 10;
      position: relative;
    }

    /* ✅ NEW: No image placeholder styling */
    .no-image-placeholder {
      width: 60px;
      height: 60px;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: #f8f9fa;
      border: 2px dashed #dee2e6;
      border-radius: 8px;
      color: #6c757d;
      font-size: 24px;
    }

    .no-image-placeholder:hover {
      background-color: #e9ecef;
      border-color: #adb5bd;
    }

    /* Existing styles */
    .clickable-row {
      transition: background-color 0.2s ease;
    }

    .clickable-row:hover {
      background-color: #f8f9fa !important;
    }

    .clickable-row:active {
      background-color: #e9ecef !important;
    }

    .clickable-row .btn-group {
      cursor: default;
    }

    .clickable-row {
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;
    }

    .clickable-row td:nth-child(2),
    .clickable-row td:nth-child(3) {
      -webkit-user-select: text;
      -moz-user-select: text;
      -ms-user-select: text;
      user-select: text;
    }

    .btn-xs {
      padding: 0.125rem 0.25rem;
      font-size: 0.65rem;
    }

    /* ✅ NEW: Ensure proper alignment */
    .align-middle {
      vertical-align: middle !important;
    }

    /* ✅ NEW: Table spacing adjustments */
    .table td {
      padding: 0.75rem 0.5rem;
    }

    .table th {
      padding: 0.75rem 0.5rem;
    }

    /* ✅ NEW: Modal image styling */
    #modalImage {
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
  </style>
}