@using InventorySystem.ViewModels
@model ProductionIndexViewModel
@{
  ViewData["Title"] = "Productions";
}

<div class="d-flex justify-content-between align-items-center mb-4">
  <h1><i class="fas fa-industry"></i> Production History</h1>
  <div class="btn-group">
    <a href="/Production/BuildBom" class="btn btn-success">
      <i class="fas fa-hammer"></i> Build BOM
    </a>
    <a href="/Production/FinishedGoods" class="btn btn-outline-primary">
      <i class="fas fa-box"></i> Finished Goods
    </a>
    <a href="/WipDashboard" class="btn btn-outline-info">
      <i class="fas fa-tachometer-alt"></i> WIP Dashboard
    </a>
  </div>
</div>

@* Safe TempData handling *@
@{
  string successMessage = null;
  string errorMessage = null;

  try
  {
    successMessage = TempData["SuccessMessage"]?.ToString();
    errorMessage = TempData["ErrorMessage"]?.ToString();
  }
  catch (Exception)
  {
    // Silently handle any TempData access issues
  }
}

@if (!string.IsNullOrEmpty(successMessage))
{
  <div class="alert alert-success alert-dismissible fade show">
    @successMessage
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
  <div class="alert alert-danger alert-dismissible fade show">
    @errorMessage
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

<!-- Enhanced Statistics Cards -->
<div class="row mb-4">
  <div class="col-md-3">
    <div class="card bg-primary text-white">
      <div class="card-body text-center">
        <h3>@Model.TotalProductions</h3>
        <p class="mb-0">Total Productions</p>
      </div>
    </div>
  </div>
  <div class="col-md-3">
    <div class="card bg-success text-white">
      <div class="card-body text-center">
        <h3>@Model.TotalUnitsProduced</h3>
        <p class="mb-0">Units Produced</p>
      </div>
    </div>
  </div>
  <div class="col-md-3">
    <div class="card bg-info text-white">
      <div class="card-body text-center">
        <h3>@Model.TotalValue.ToString("C0")</h3>
        <p class="mb-0">Total Value</p>
      </div>
    </div>
  </div>
  <div class="col-md-3">
    <div class="card bg-warning text-white">
      <div class="card-body text-center">
        <h3>@Model.AverageUnitCost.ToString("C6")</h3>
        <p class="mb-0">Avg Unit Cost</p>
      </div>
    </div>
  </div>
</div>

<!-- Active Productions Section (if workflow enabled) -->
@if (Model.ShowWorkflowView && Model.ActiveProductions.Any())
{
  <div class="card mb-4">
    <div class="card-header">
      <h5><i class="fas fa-play-circle"></i> Active Productions (@Model.ActiveProductions.Count)</h5>
    </div>
    <div class="card-body">
      <div class="table-responsive">
        <table class="table table-sm">
          <thead>
            <tr>
              <th>Production ID</th>
              <th>BOM</th>
              <th>Status</th>
              <th>Assigned To</th>
              <th>Progress</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            @foreach (var production in Model.ActiveProductions.Take(10))
            {
              <tr>
                <td>
                  <a href="/Production/Details/@production.ProductionId" class="fw-bold">
                    #@production.ProductionId
                  </a>
                </td>
                <td>@production.BomNumber</td>
                <td>
                  <span class="badge bg-@GetStatusColor(production.Status)">
                    @production.StatusDisplayName
                  </span>
                </td>
                <td>@(production.AssignedTo ?? "Unassigned")</td>
                <td>
                  @if (production.ProgressPercentage.HasValue)
                  {
                    <div class="progress" style="height: 20px;">
                      <div class="progress-bar" role="progressbar"
                           style="width: @production.ProgressPercentage%"
                           aria-valuenow="@production.ProgressPercentage"
                           aria-valuemin="0" aria-valuemax="100">
                        @production.ProgressPercentage.Value.ToString("F0")%
                      </div>
                    </div>
                  }
                  else
                  {
                    <span class="text-muted">N/A</span>
                  }
                </td>
                <td>
                  <a href="/Production/Details/@production.ProductionId" class="btn btn-sm btn-outline-primary">
                    <i class="fas fa-eye"></i>
                  </a>
                </td>
              </tr>
            }
          </tbody>
        </table>
      </div>
      @if (Model.ActiveProductions.Count > 10)
      {
        <div class="text-center">
          <a href="/WipDashboard" class="btn btn-outline-primary">
            <i class="fas fa-tachometer-alt"></i> View All Active Productions
          </a>
        </div>
      }
    </div>
  </div>
}

<!-- All Productions History -->
<div class="card">
  <div class="card-header">
    <h5><i class="fas fa-history"></i> Production History</h5>
  </div>
  <div class="card-body">
    @if (Model.AllProductions?.Any() == true)
    {
      <div class="table-responsive">
        <table class="table table-striped table-hover">
          <thead class="table-dark">
            <tr>
              <th>Production Date</th>
              <th>Finished Good</th>
              <th>BOM</th>
              <th>Quantity</th>
              <th>Unit Cost</th>
              <th>Total Cost</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            @foreach (var production in Model.AllProductions.OrderByDescending(p => p.ProductionDate))
            {
              <tr>
                <td>@production.ProductionDate.ToString("MM/dd/yyyy")</td>
                <td>
                  <a href="/Production/FinishedGoodDetails/@production.FinishedGoodId" class="text-decoration-none">
                    <strong>@production.FinishedGood?.PartNumber</strong>
                  </a>
                  <br><small class="text-muted">@production.FinishedGood?.Description</small>
                </td>
                <td>
                  <a href="/Boms/Details/@production.BomId" class="text-decoration-none">
                    @production.Bom?.BomNumber
                  </a>
                </td>
                <td>
                  <span class="badge bg-info">@production.QuantityProduced</span>
                </td>
                <td>@production.UnitCost.ToString("C")</td>
                <td>@production.TotalCost.ToString("C")</td>
                <td>
                  <a href="/Production/Details/@production.Id" class="btn btn-sm btn-outline-primary">
                    <i class="fas fa-eye"></i> Details
                  </a>
                </td>
              </tr>
            }
          </tbody>
        </table>
      </div>
    }
    else
    {
      <div class="text-center py-5">
        <i class="fas fa-industry fa-3x text-muted mb-3"></i>
        <h4 class="text-muted">No Production Records</h4>
        <p class="text-muted">Start building BOMs to create production records.</p>
        <a href="/Production/BuildBom" class="btn btn-success">
          <i class="fas fa-hammer"></i> Build Your First BOM
        </a>
      </div>
    }
  </div>
</div>

@functions {
  string GetStatusColor(InventorySystem.Domain.Enums.ProductionStatus status)
  {
    return status switch
    {
      InventorySystem.Domain.Enums.ProductionStatus.Planned => "secondary",
      InventorySystem.Domain.Enums.ProductionStatus.InProgress => "warning",
      InventorySystem.Domain.Enums.ProductionStatus.QualityCheck => "info",
      InventorySystem.Domain.Enums.ProductionStatus.Completed => "success",
      InventorySystem.Domain.Enums.ProductionStatus.OnHold => "danger",
      InventorySystem.Domain.Enums.ProductionStatus.Cancelled => "dark",
      _ => "light"
    };
  }
}