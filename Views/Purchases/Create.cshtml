@* Views/Purchases/Create.cshtml - Enhanced with working item search dropdown *@
@model InventorySystem.ViewModels.CreatePurchaseViewModel

@{
  ViewData["Title"] = "Create Purchase";
}

<div class="container-fluid">
  <div class="row">
    <div class="col-lg-8">
      <div class="card">
        <div class="card-header">
          <h5><i class="fas fa-shopping-cart"></i> @ViewData["Title"]</h5>
        </div>
        <div class="card-body">
          <form asp-action="Create" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <!-- FIXED: Enhanced Item Selection with Search Dropdown -->
            <div class="mb-3">
              <label for="itemSearch" class="form-label">
                <i class="fas fa-cube text-primary"></i>
                Item <span class="text-danger">*</span>
              </label>
              
              <!-- Search Input Container -->
              <div class="position-relative">
                <div class="input-group">
                  <input type="text" 
                         id="itemSearch" 
                         class="form-control" 
                         placeholder="Search by part number or description..." 
                         autocomplete="off" />
                  <span class="input-group-text">
                    <i class="fas fa-search text-muted" id="searchIcon"></i>
                    <div class="spinner-border spinner-border-sm text-primary d-none" id="searchSpinner"></div>
                  </span>
                </div>
                
                <!-- FIXED: Proper Bootstrap Dropdown for Search Results -->
                <div class="dropdown-menu w-100" id="searchResults" style="max-height: 350px; overflow-y: auto; z-index: 1050;">
                  <!-- Results will be populated here via JavaScript -->
                </div>
              </div>
              
              <!-- Hidden field to store selected item ID -->
              <input type="hidden" asp-for="ItemId" id="selectedItemId" />
              <span asp-validation-for="ItemId" class="text-danger"></span>
              
              <!-- Selected Item Display -->
              <div id="selectedItemDisplay" class="mt-2 d-none">
                <div class="alert alert-success py-2">
                  <i class="fas fa-check-circle"></i>
                  <strong>Selected:</strong> <span id="selectedItemInfo"></span>
                  <button type="button" class="btn btn-sm btn-outline-secondary ms-2" id="clearSelection">
                    <i class="fas fa-times"></i> Change
                  </button>
                </div>
              </div>
              
              <!-- Search Instructions -->
              <div class="form-text">
                <i class="fas fa-info-circle"></i>
                Type to search for items. You can use * for wildcards (e.g., "PUMP*" or "*resistor*").
              </div>
            </div>

            <!-- Vendor Selection with Last Used Default -->
            <div class="mb-3">
              <label asp-for="VendorId" class="form-label">
                <i class="fas fa-building text-success"></i>
                Vendor <span class="text-danger">*</span>
              </label>
              <div class="input-group">
                <select asp-for="VendorId" asp-items="ViewBag.VendorId" class="form-select" id="vendorSelect">
                  <option value="">-- Select Vendor --</option>
                </select>
                <button type="button" class="btn btn-outline-info" id="useLastVendorBtn" title="Use Recommended Vendor for Selected Item">
                  <i class="fas fa-star"></i>
                </button>
              </div>
              <span asp-validation-for="VendorId" class="text-danger"></span>
              <div class="form-text">
                <i class="fas fa-info-circle"></i>
                The preferred vendor for the selected item will be automatically selected (Primary → Preferred → Last Used).
              </div>
              
              @* Display vendor selection reason if available *@
              @if (ViewBag.VendorSelectionReason != null)
              {
                <div class="form-text text-success">
                  <i class="fas fa-check-circle"></i>
                  @ViewBag.VendorSelectionReason
                </div>
              }
            </div>

            <div class="row">
              <!-- Purchase Date -->
              <div class="col-md-6">
                <div class="mb-3">
                  <label asp-for="PurchaseDate" class="form-label">
                    <i class="fas fa-calendar text-info"></i>
                    Purchase Date <span class="text-danger">*</span>
                  </label>
                  <input asp-for="PurchaseDate" class="form-control" type="date" />
                  <span asp-validation-for="PurchaseDate" class="text-danger"></span>
                </div>
              </div>

              <!-- Purchase Order Number -->
              <div class="col-md-6">
                <div class="mb-3">
                  <label asp-for="PurchaseOrderNumber" class="form-label">
                    <i class="fas fa-file-invoice text-secondary"></i>
                    Purchase Order Number
                  </label>
                  <div class="input-group">
                    <input asp-for="PurchaseOrderNumber" class="form-control" placeholder="Auto-generated if empty" />
                    <button type="button" class="btn btn-outline-info" id="generatePOBtn" title="Generate Purchase Order Number">
                      <i class="fas fa-magic"></i>
                    </button>
                  </div>
                  <span asp-validation-for="PurchaseOrderNumber" class="text-danger"></span>
                  <div class="form-text">
                    <i class="fas fa-info-circle"></i>
                    Leave empty to auto-generate (Format: PO-YYYYMMDD-###)
                  </div>
                </div>
              </div>
            </div>

            <div class="row">
              <!-- Quantity -->
              <div class="col-md-4">
                <div class="mb-3">
                  <label asp-for="QuantityPurchased" class="form-label">
                    <i class="fas fa-boxes text-warning"></i>
                    Quantity <span class="text-danger">*</span>
                  </label>
                  <input asp-for="QuantityPurchased" class="form-control" type="number" min="1" />
                  <span asp-validation-for="QuantityPurchased" class="text-danger"></span>
                </div>
              </div>

              <!-- Cost Per Unit -->
              <div class="col-md-4">
                <div class="mb-3">
                  <label asp-for="CostPerUnit" class="form-label">
                    <i class="fas fa-dollar-sign text-success"></i>
                    Cost Per Unit <span class="text-danger">*</span>
                  </label>
                  <input asp-for="CostPerUnit" class="form-control" type="number" step="0.0001" min="0.0001" placeholder="e.g., 0.05436" />
                  <span asp-validation-for="CostPerUnit" class="text-danger"></span>
                  <div class="form-text">
                    <i class="fas fa-info-circle"></i>
                    Up to 6 decimal places supported (e.g., 0.054360)
                  </div>
                </div>
              </div>

              <!-- Total Cost (calculated) -->
              <div class="col-md-4">
                <div class="mb-3">
                  <label class="form-label">
                    <i class="fas fa-calculator text-info"></i>
                    Total Cost
                  </label>
                  <input type="text" class="form-control" id="totalCost" readonly />
                </div>
              </div>
            </div>

            <div class="row">
              <!-- Shipping Cost -->
              <div class="col-md-6">
                <div class="mb-3">
                  <label asp-for="ShippingCost" class="form-label">
                    <i class="fas fa-shipping-fast text-primary"></i>
                    Shipping Cost
                  </label>
                  <input asp-for="ShippingCost" class="form-control" type="number" step="0.000001" min="0" placeholder="e.g., 12.345678" />
                  <span asp-validation-for="ShippingCost" class="text-danger"></span>
                  <div class="form-text">
                    <i class="fas fa-info-circle"></i>
                    Up to 6 decimal places supported (e.g., 12.345678)
                  </div>
                </div>
              </div>

              <!-- Tax Amount -->
              <div class="col-md-6">
                <div class="mb-3">
                  <label asp-for="TaxAmount" class="form-label">
                    <i class="fas fa-percentage text-danger"></i>
                    Tax Amount
                  </label>
                  <input asp-for="TaxAmount" class="form-control" type="number" step="0.0001" min="0" />
                  <span asp-validation-for="TaxAmount" class="text-danger"></span>
                </div>
              </div>
            </div>

            <!-- Purchase Status -->
            <div class="row">
              <div class="col-md-6">
                <div class="mb-3">
                  <label asp-for="Status" class="form-label">
                    <i class="fas fa-flag text-warning"></i>
                    Purchase Status
                  </label>
                  <select asp-for="Status" class="form-select" asp-items="Html.GetEnumSelectList<InventorySystem.Models.Enums.PurchaseStatus>()">
                  </select>
                  <span asp-validation-for="Status" class="text-danger"></span>
                </div>
              </div>

              <!-- Expected Delivery Date -->
              <div class="col-md-6">
                <div class="mb-3">
                  <label asp-for="ExpectedDeliveryDate" class="form-label">
                    <i class="fas fa-clock text-info"></i>
                    Expected Delivery Date
                  </label>
                  <input asp-for="ExpectedDeliveryDate" class="form-control" type="date" />
                  <span asp-validation-for="ExpectedDeliveryDate" class="text-danger"></span>
                </div>
              </div>
            </div>

            <!-- Notes -->
            <div class="mb-3">
              <label asp-for="Notes" class="form-label">
                <i class="fas fa-sticky-note text-secondary"></i>
                Notes
              </label>
              <textarea asp-for="Notes" class="form-control" rows="3"></textarea>
              <span asp-validation-for="Notes" class="text-danger"></span>
            </div>

            <!-- Buttons -->
            <div class="d-flex justify-content-between">
              <a href="@Url.Action("Index")" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back to List
              </a>
              <button type="submit" class="btn btn-success">
                <i class="fas fa-save"></i> Create Purchase
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Summary Panel -->
    <div class="col-lg-4">
      <div class="card">
        <div class="card-header">
          <h6><i class="fas fa-calculator"></i> Purchase Summary</h6>
        </div>
        <div class="card-body">
          <dl class="row">
            <dt class="col-sm-6">Subtotal:</dt>
            <dd class="col-sm-6" id="summarySubtotal">$0.00</dd>

            <dt class="col-sm-6">Shipping:</dt>
            <dd class="col-sm-6" id="summaryShipping">$0.00</dd>

            <dt class="col-sm-6">Tax:</dt>
            <dd class="col-sm-6" id="summaryTax">$0.00</dd>

            <dt class="col-sm-6 border-top pt-2"><strong>Total:</strong></dt>
            <dd class="col-sm-6 border-top pt-2"><strong id="summaryTotal">$0.00</strong></dd>
          </dl>
        </div>
      </div>

      <!-- Item Details Panel -->
      <div class="card mt-3" id="itemDetailsPanel" style="display: none;">
        <div class="card-header">
          <h6><i class="fas fa-info-circle"></i> Selected Item Details</h6>
        </div>
        <div class="card-body">
          <dl class="row">
            <dt class="col-sm-6">Part Number:</dt>
            <dd class="col-sm-6" id="detailPartNumber">-</dd>

            <dt class="col-sm-6">Description:</dt>
            <dd class="col-sm-6" id="detailDescription">-</dd>

            <dt class="col-sm-6">Current Stock:</dt>
            <dd class="col-sm-6" id="detailCurrentStock">-</dd>

            <dt class="col-sm-6">Minimum Stock:</dt>
            <dd class="col-sm-6" id="detailMinimumStock">-</dd>

            <dt class="col-sm-6">Unit of Measure:</dt>
            <dd class="col-sm-6" id="detailUnitOfMeasure">-</dd>
          </dl>
          <div id="stockWarning" class="alert alert-warning d-none">
            <i class="fas fa-exclamation-triangle"></i>
            This item is currently low on stock or out of stock.
          </div>
        </div>
      </div>

      <div class="card mt-3">
        <div class="card-header">
          <h6><i class="fas fa-info-circle"></i> Quick Tips</h6>
        </div>
        <div class="card-body">
          <ul class="list-unstyled mb-0">
            <li class="mb-2">
              <i class="fas fa-search text-primary"></i>
              Start typing to search for items by part number or description
            </li>
            <li class="mb-2">
              <i class="fas fa-lightbulb text-warning"></i>
              Select an item to auto-populate the preferred vendor
            </li>
            <li class="mb-2">
              <i class="fas fa-magic text-primary"></i>
              Purchase Order Numbers are auto-generated if left empty
            </li>
            <li class="mb-2">
              <i class="fas fa-history text-info"></i>
              Click the star button to use the recommended vendor for the selected item
            </li>
            <li class="mb-0">
              <i class="fas fa-calculator text-success"></i>
              Total cost updates automatically as you type
            </li>
          </ul>
        </div>
      </div>
    </div>
  </div>
</div>

@section Scripts {
  <script>
    $(document).ready(function () {
        let searchTimeout;
        let selectedItem = null;
        
        console.log('Purchase Create page loaded - Search functionality initialized');

        // Auto-update totals when values change
        function updateTotals() {
            var quantity = parseFloat($('#QuantityPurchased').val()) || 0;
            var costPerUnit = parseFloat($('#CostPerUnit').val()) || 0;
            var shipping = parseFloat($('#ShippingCost').val()) || 0;
            var tax = parseFloat($('#TaxAmount').val()) || 0;

            var subtotal = quantity * costPerUnit;
            var total = subtotal + shipping + tax;

            // Show higher precision in calculations
            $('#totalCost').val(subtotal.toFixed(6));
            $('#summarySubtotal').text('$' + subtotal.toFixed(4));
            $('#summaryShipping').text('$' + shipping.toFixed(6));
            $('#summaryTax').text('$' + tax.toFixed(4));
            $('#summaryTotal').text('$' + total.toFixed(4));
        }

        // Bind change events for total calculation
        $('#QuantityPurchased, #CostPerUnit, #ShippingCost, #TaxAmount').on('input change', updateTotals);

        // FIXED: Enhanced Item Search Functionality
        $('#itemSearch').on('input', function() {
            const query = $(this).val();
            console.log('Search input changed:', query);
            
            // Clear previous timeout
            clearTimeout(searchTimeout);
            
            // Hide results if query is too short
            if (query.length < 2) {
                hideSearchResults();
                return;
            }

            // Show loading spinner
            showLoadingSpinner();

            // Debounce search
            searchTimeout = setTimeout(function() {
                performItemSearch(query);
            }, 300);
        });

        // FIXED: Show loading spinner
        function showLoadingSpinner() {
            $('#searchIcon').addClass('d-none');
            $('#searchSpinner').removeClass('d-none');
        }

        // FIXED: Hide loading spinner
        function hideLoadingSpinner() {
            $('#searchIcon').removeClass('d-none');
            $('#searchSpinner').addClass('d-none');
        }

        // FIXED: Hide search results
        function hideSearchResults() {
            $('#searchResults').removeClass('show').hide();
        }

        // FIXED: Show search results
        function showSearchResults() {
            $('#searchResults').addClass('show').show();
        }

        // Perform the actual search
        function performItemSearch(query) {
            console.log('Performing search for:', query);
            
            $.ajax({
                url: '@Url.Action("SearchItems")',
                type: 'GET',
                data: { query: query, page: 1, pageSize: 10 },
                success: function(response) {
                    hideLoadingSpinner();
                    
                    console.log('Search response received:', response);
                    
                    if (response.success && response.items && response.items.length > 0) {
                        console.log('Displaying', response.items.length, 'search results');
                        displaySearchResults(response.items, response.hasMore);
                    } else {
                        console.log('No items found or search failed');
                        displayNoResults(response.message || 'No items found');
                        
                        // Log debug info if available
                        if (response.debug) {
                            console.log('Search debug info:', response.debug);
                        }
                    }
                },
                error: function(xhr, status, error) {
                    hideLoadingSpinner();
                    console.error('AJAX Error:', status, error);
                    console.error('Response:', xhr.responseText);
                    displayNoResults('Error searching items. Please try again.');
                }
            });
        }

        // FIXED: Display search results with proper dropdown styling
        function displaySearchResults(items, hasMore) {
            console.log('displaySearchResults called with', items.length, 'items');
            
            let html = '';
            
            // Store items data globally for easier access
            window.searchResultsData = items;
            
            items.forEach(function(item, index) {
                let stockBadge = '';
                if (item.isLowStock) {
                    stockBadge = '<span class="badge bg-warning text-dark ms-2">Low Stock</span>';
                }
                
                // Create dropdown item with proper Bootstrap classes
                html += `
                    <a href="#" class="dropdown-item item-result py-2" data-item-index="${index}">
                        <div class="d-flex justify-content-between align-items-start">
                            <div class="flex-grow-1">
                                <div class="fw-bold">${escapeHtml(item.partNumber)} ${stockBadge}</div>
                                <div class="text-muted small">${escapeHtml(item.description)}</div>
                                <div class="text-muted small">${escapeHtml(item.stockInfo)} | ${escapeHtml(item.unitOfMeasure)}</div>
                            </div>
                            <div class="text-end">
                                <small class="badge bg-secondary">${escapeHtml(item.itemType)}</small>
                            </div>
                        </div>
                    </a>
                `;
            });

            if (hasMore) {
                html += '<div class="dropdown-header text-center text-muted"><small><em>Type more to refine search...</em></small></div>';
            }

            // FIXED: Properly show dropdown
            const $searchResults = $('#searchResults');
            $searchResults.html(html);
            showSearchResults();
            
            console.log('Search results HTML updated, dropdown should be visible');
            
            // Bind click events to new results
            bindResultClicks();
        }

        // FIXED: Display no results message
        function displayNoResults(message) {
            console.log('displayNoResults called with message:', message);
            
            const html = `
                <div class="dropdown-header text-center text-muted py-3">
                    <i class="fas fa-search"></i> ${escapeHtml(message)}
                </div>
            `;
            
            const $searchResults = $('#searchResults');
            $searchResults.html(html);
            showSearchResults();
        }

        // FIXED: Bind click events to search results
        function bindResultClicks() {
            console.log('Binding click events to search results');
            
            $('.item-result').off('click').on('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                const itemIndex = parseInt($(this).data('item-index'));
                console.log('Item clicked, index:', itemIndex);
                
                if (window.searchResultsData && window.searchResultsData[itemIndex]) {
                    const itemData = window.searchResultsData[itemIndex];
                    console.log('Selected item:', itemData);
                    selectItem(itemData);
                    hideSearchResults();
                } else {
                    console.error('Item data not found for index:', itemIndex);
                }
            });
        }

        // Select an item
        function selectItem(item) {
            console.log('selectItem called with:', item);
            selectedItem = item;
            
            // Set the hidden field value
            $('#selectedItemId').val(item.id);
            
            // Update the search input
            $('#itemSearch').val(item.displayText);
            
            // Show selected item display
            $('#selectedItemInfo').text(item.displayText);
            $('#selectedItemDisplay').removeClass('d-none');
            
            // Update item details panel
            $('#detailPartNumber').text(item.partNumber);
            $('#detailDescription').text(item.description);
            $('#detailCurrentStock').text(item.currentStock);
            $('#detailMinimumStock').text(item.minimumStock);
            $('#detailUnitOfMeasure').text(item.unitOfMeasure);
            
            // Show/hide stock warning
            if (item.isLowStock) {
                $('#stockWarning').removeClass('d-none');
            } else {
                $('#stockWarning').addClass('d-none');
            }
            
            $('#itemDetailsPanel').show();

            // Clear validation error if present
            $('span[data-valmsg-for="ItemId"]').text('');
            
            console.log('Item selected successfully, getting recommended vendor');
            
            // Auto-select recommended vendor
            getRecommendedVendorForItem(item.id);
        }

        // ENHANCED: Function to load item by ID (for pre-population)
        function loadItemById(itemId) {
            console.log('Loading item by ID:', itemId);
            
            showLoadingSpinner();
            
            $.ajax({
                url: '@Url.Action("SearchItems")',
                type: 'GET',
                data: { query: '*', page: 1, pageSize: 1000 }, // Get all items and find the one we need
                success: function(response) {
                    hideLoadingSpinner();
                    
                    console.log('Search response for pre-population:', response);
                    
                    if (response.success && response.items && response.items.length > 0) {
                        const preSelectedItem = response.items.find(item => item.id === itemId);
                        if (preSelectedItem) {
                            console.log('Found pre-selected item:', preSelectedItem);
                            selectItem(preSelectedItem);
                        } else {
                            console.warn('Item with ID', itemId, 'not found in search results');
                            loadItemByIdFallback(itemId);
                        }
                    } else {
                        console.warn('No items returned from search for pre-population');
                        loadItemByIdFallback(itemId);
                    }
                },
                error: function(xhr, status, error) {
                    hideLoadingSpinner();
                    console.error('Error loading item by ID:', error);
                    console.log('Could not load pre-selected item');
                }
            });
        }

        // Fallback method to load item by ID using different search patterns
        function loadItemByIdFallback(itemId) {
            console.log('Trying fallback method for item ID:', itemId);
            
            const searchPatterns = ['*', 'A*', 'B*', 'C*', '1*', '2*', '3*', '0*', '4*', '5*'];
            let patternIndex = 0;
            
            function tryNextPattern() {
                if (patternIndex >= searchPatterns.length) {
                    console.warn('Could not find item with ID', itemId, 'using any search pattern');
                    return;
                }
                
                const pattern = searchPatterns[patternIndex++];
                
                $.ajax({
                    url: '@Url.Action("SearchItems")',
                    type: 'GET',
                    data: { query: pattern, page: 1, pageSize: 100 },
                    success: function(response) {
                        if (response.success && response.items && response.items.length > 0) {
                            const preSelectedItem = response.items.find(item => item.id === itemId);
                            if (preSelectedItem) {
                                console.log('Found pre-selected item with pattern', pattern, ':', preSelectedItem);
                                selectItem(preSelectedItem);
                                return;
                            }
                        }
                        // Try next pattern
                        tryNextPattern();
                    },
                    error: function() {
                        // Try next pattern
                        tryNextPattern();
                    }
                });
            }
            
            tryNextPattern();
        }

        // Clear item selection
        $('#clearSelection').on('click', function() {
            selectedItem = null;
            $('#selectedItemId').val('');
            $('#itemSearch').val('');
            $('#selectedItemDisplay').addClass('d-none');
            $('#itemDetailsPanel').hide();
            $('#vendorSelect').val('');
            $('#CostPerUnit').val('');
            updateTotals();
            $('#itemSearch').focus();
        });

        // Hide search results when clicking outside
        $(document).on('click', function(e) {
            if (!$(e.target).closest('#itemSearch, #searchResults').length) {
                hideSearchResults();
            }
        });

        // Auto-select recommended vendor when item changes
        function getRecommendedVendorForItem(itemId) {
            $.ajax({
                url: '@Url.Action("GetRecommendedVendorForItem")',
                type: 'GET',
                data: { itemId: itemId },
                success: function (response) {
                    if (response.success && response.vendorId) {
                        $('#vendorSelect').val(response.vendorId);
                        
                        // Also update the cost if available
                        if (response.recommendedCost && response.recommendedCost > 0) {
                            $('#CostPerUnit').val(response.recommendedCost.toFixed(6));
                            updateTotals(); // Recalculate totals
                        }
                        
                        // Show enhanced notification with selection reason
                        var vendorName = $('#vendorSelect option:selected').text();
                        var message = 'Vendor selected: ' + vendorName;
                        if (response.selectionReason) {
                            message += ' (' + response.selectionReason + ')';
                        }
                        
                        showTempMessage(message, 'success');
                        
                        // Update vendor selection button tooltip
                        updateVendorButtonTooltip(response);
                    } else {
                        showTempMessage('No preferred vendor found for this item', 'warning');
                    }
                },
                error: function() {
                    showTempMessage('Could not retrieve vendor recommendation', 'warning');
                }
            });
        }

        // Manual "Use Recommended Vendor" button
        $('#useLastVendorBtn').click(function () {
            if (!selectedItem) {
                alert('Please select an item first');
                return;
            }

            getRecommendedVendorForItem(selectedItem.id);
        });

        // Generate Purchase Order Number
        $('#generatePOBtn').click(function () {
            $.ajax({
                url: '@Url.Action("GeneratePurchaseOrderNumber")',
                type: 'GET',
                success: function (response) {
                    if (response.success) {
                        $('#PurchaseOrderNumber').val(response.purchaseOrderNumber);
                        showTempMessage('Purchase Order Number generated: ' + response.purchaseOrderNumber);
                    } else {
                        alert('Error generating Purchase Order Number: ' + response.error);
                    }
                },
                error: function () {
                    alert('Error generating Purchase Order Number');
                }
            });
        });

        // Helper function to update vendor button tooltip with detailed info
        function updateVendorButtonTooltip(response) {
            var tooltip = 'Vendor Selection Info:\n';
            
            if (response.hasPrimaryVendor) {
                tooltip += '• Primary: ' + response.primaryVendorName + '\n';
            }
            if (response.hasItemPreferredVendor) {
                tooltip += '• Item Preferred: ' + response.itemPreferredVendorName + '\n';
            }
            if (response.hasLastPurchaseVendor) {
                tooltip += '• Last Used: ' + response.lastPurchaseVendorName;
                if (response.lastPurchaseDate) {
                    tooltip += ' (' + response.lastPurchaseDate + ')';
                }
            }
            
            $('#useLastVendorBtn').attr('title', tooltip);
        }

        // Helper function to show temporary messages
        function showTempMessage(message, type = 'info') {
            var alertClass = type === 'warning' ? 'alert-warning' : 
                           type === 'success' ? 'alert-success' : 'alert-info';
            var icon = type === 'warning' ? 'fas fa-exclamation-triangle' : 
                      type === 'success' ? 'fas fa-check-circle' : 'fas fa-info-circle';

            var $alert = $('<div class="alert ' + alertClass + ' alert-dismissible fade show" role="alert">' +
                '<i class="' + icon + '"></i> ' + message +
                '<button type="button" class="btn-close" data-bs-dismiss="alert"></button>' +
                '</div>');

            $('.card-body').first().prepend($alert);

            setTimeout(function () {
                $alert.alert('close');
            }, 3000);
        }

        // Helper function to escape HTML
        function escapeHtml(text) {
            if (!text) return '';
            return text.toString()
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        // Initial calculation
        updateTotals();
        
        // IMPROVED: Handle pre-selected item (when coming from Items page)
        @if (Model.ItemId > 0)
        {
            <text>
            console.log('Pre-selecting item with ID:', @Model.ItemId);
            // Load the specific item by ID
            loadItemById(@Model.ItemId);
            </text>
        }
        else
        {
            <text>
            // Focus on search input when page loads (only if no pre-selection)
            $('#itemSearch').focus();
            </text>
        }
        
        // Add debug function for testing
        window.testSearch = function(query) {
            console.log('Testing search with query:', query);
            performItemSearch(query || 'test');
        };
        
        console.log('Purchase Create page JavaScript loaded. Test search with: testSearch("your-query")');
    });
  </script>
}

@section Styles {
  <style>
    /* FIXED: Proper dropdown styling */
    #searchResults {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        z-index: 1050;
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        max-height: 350px;
        overflow-y: auto;
        display: none; /* Hidden by default */
    }

    #searchResults.show {
        display: block !important;
    }

    /* Style dropdown items properly */
    #searchResults .dropdown-item {
        padding: 0.75rem 1rem;
        border-bottom: 1px solid #f8f9fa;
        cursor: pointer;
        text-decoration: none;
        color: inherit;
    }

    #searchResults .dropdown-item:last-child {
        border-bottom: none;
    }

    #searchResults .dropdown-item:hover {
        background-color: #f8f9fa;
        color: inherit;
        text-decoration: none;
    }

    #searchResults .dropdown-item:focus {
        background-color: #e9ecef;
        color: inherit;
        text-decoration: none;
    }

    /* Ensure spinner alignment */
    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
    }

    /* Ensure proper positioning context */
    .position-relative {
        position: relative !important;
    }

    /* Badge styling in search results */
    #searchResults .badge {
        font-size: 0.65rem;
    }

    /* Typography improvements */
    #searchResults .fw-bold {
        font-weight: 600 !important;
    }

    #searchResults .text-muted {
        color: #6c757d !important;
    }
  </style>
}