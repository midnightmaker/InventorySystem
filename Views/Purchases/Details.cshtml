@model InventorySystem.Models.Purchase
@{
  ViewData["Title"] = "Purchase Details";
}

<div class="d-flex justify-content-between align-items-center mb-4">
  <h1><i class="fas fa-receipt"></i> Purchase Details</h1>
  <div class="btn-group">
    <a href="/Purchases/Edit/@Model.Id" class="btn btn-outline-primary">
      <i class="fas fa-edit"></i> Edit
    </a>
    <a href="/Purchases/UploadDocument?purchaseId=@Model.Id" class="btn btn-success">
      <i class="fas fa-upload"></i> Upload Document
    </a>
    <div class="btn-group" role="group">
      <button type="button" class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
        <i class="fas fa-ellipsis-h"></i> More
      </button>
      <ul class="dropdown-menu">
        <li>
          <a class="dropdown-item" href="/Purchases/Delete/@Model.Id">
            <i class="fas fa-trash text-danger"></i> Delete Purchase
          </a>
        </li>
        <li>
          <a class="dropdown-item" href="/Inventory/Adjust?itemId=@Model.ItemId">
            <i class="fas fa-balance-scale"></i> Adjust Inventory
          </a>
        </li>
      </ul>
    </div>
  </div>
</div>

<!-- Status Alert -->
@if (Model.IsOverdue)
{
  <div class="alert alert-warning">
    <i class="fas fa-exclamation-triangle"></i>
    <strong>Overdue:</strong> This purchase was expected @Model.ExpectedDeliveryDate?.ToString("MM/dd/yyyy")
    (@Math.Abs(Model.DaysUntilExpected) days ago)
  </div>
}
else if (Model.Status == InventorySystem.Models.Enums.PurchaseStatus.Received)
{
  <div class="alert alert-success">
    <i class="fas fa-check-circle"></i>
    <strong>Complete:</strong> All items have been received.
  </div>
}

<div class="row">
  <div class="col-md-8">
    <div class="card">
      <div class="card-header">
        <h5><i class="fas fa-info-circle"></i> Purchase Information</h5>
      </div>
      <div class="card-body">
        <dl class="row">
          <dt class="col-sm-3">Item:</dt>
          <dd class="col-sm-9">
            <a href="/Items/Details/@Model.Item.Id" class="fw-bold">@Model.Item.PartNumber</a>
            <br><small class="text-muted">@Model.Item.Description</small>
          </dd>

          <dt class="col-sm-3">Vendor:</dt>
          <dd class="col-sm-9">@Model.Vendor</dd>

          <dt class="col-sm-3">Purchase Date:</dt>
          <dd class="col-sm-9">@Model.PurchaseDate.ToString("MM/dd/yyyy")</dd>

          <dt class="col-sm-3">PO Number:</dt>
          <dd class="col-sm-9">@(string.IsNullOrEmpty(Model.PurchaseOrderNumber) ? "N/A" : Model.PurchaseOrderNumber)</dd>

          <!-- NEW: Purchase Status -->
          <dt class="col-sm-3">Status:</dt>
          <dd class="col-sm-9">
            <span class="badge bg-@GetStatusColor(Model.Status) fs-6">
              @Model.Status.ToString().Replace("PartiallyReceived", "Partially Received")
            </span>
          </dd>

          <dt class="col-sm-3">Quantity:</dt>
          <dd class="col-sm-9">
            <span class="fs-5 fw-bold">@Model.QuantityPurchased</span> units
          </dd>

          <dt class="col-sm-3">Cost per Unit:</dt>
          <dd class="col-sm-9">$@Model.CostPerUnit.ToString("F2")</dd>

          <dt class="col-sm-3">Subtotal:</dt>
          <dd class="col-sm-9">$@Model.TotalCost.ToString("F2")</dd>

          @if (Model.ShippingCost > 0)
          {
            <dt class="col-sm-3">Shipping:</dt>
            <dd class="col-sm-9">$@Model.ShippingCost.ToString("F2")</dd>
          }

          @if (Model.TaxAmount > 0)
          {
            <dt class="col-sm-3">Tax:</dt>
            <dd class="col-sm-9">$@Model.TaxAmount.ToString("F2")</dd>
          }

          <dt class="col-sm-3">Total Paid:</dt>
          <dd class="col-sm-9">
            <span class="fs-4 fw-bold text-success">$@Model.TotalPaid.ToString("F2")</span>
          </dd>

          <dt class="col-sm-3">Remaining Qty:</dt>
          <dd class="col-sm-9">
            @if (Model.RemainingQuantity > 0)
            {
              <span class="badge bg-success fs-6">@Model.RemainingQuantity units</span>
            }
            else
            {
              <span class="badge bg-secondary fs-6">Fully consumed</span>
            }
          </dd>

          <!-- NEW: Delivery Information -->
          @if (Model.ExpectedDeliveryDate.HasValue)
          {
            <dt class="col-sm-3">Expected Delivery:</dt>
            <dd class="col-sm-9">
              @Model.ExpectedDeliveryDate.Value.ToString("MM/dd/yyyy")
              @if (Model.DaysUntilExpected > 0)
              {
                <small class="text-muted">(@Model.DaysUntilExpected days from now)</small>
              }
              else if (Model.DaysUntilExpected < 0)
              {
                <small class="text-danger">(@Math.Abs(Model.DaysUntilExpected) days overdue)</small>
              }
              else
              {
                <small class="text-info">(Expected today)</small>
              }
            </dd>
          }

          @if (Model.ActualDeliveryDate.HasValue)
          {
            <dt class="col-sm-3">Actual Delivery:</dt>
            <dd class="col-sm-9">
              @Model.ActualDeliveryDate.Value.ToString("MM/dd/yyyy")
              @if (Model.ExpectedDeliveryDate.HasValue)
              {
                var deliveryDifference = (Model.ActualDeliveryDate.Value - Model.ExpectedDeliveryDate.Value).Days;
                if (deliveryDifference > 0)
                {
                  <small class="text-warning">(@deliveryDifference days late)</small>
                }
                else if (deliveryDifference < 0)
                {
                  <small class="text-success">(@Math.Abs(deliveryDifference) days early)</small>
                }
                else
                {
                  <small class="text-success">(On time)</small>
                }
              }
            </dd>
          }

          @if (!string.IsNullOrEmpty(Model.Notes))
          {
            <dt class="col-sm-3">Notes:</dt>
            <dd class="col-sm-9">@Model.Notes</dd>
          }

          <dt class="col-sm-3">Created:</dt>
          <dd class="col-sm-9">@Model.CreatedDate.ToString("MM/dd/yyyy HH:mm")</dd>
        </dl>
      </div>
    </div>

    <!-- Purchase Documents Section -->
    @if (Model.PurchaseDocuments != null && Model.PurchaseDocuments.Any())
    {
      <div class="card mt-4">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h5><i class="fas fa-file"></i> Documents (@Model.DocumentCount)</h5>
          <a href="/Purchases/UploadDocument?purchaseId=@Model.Id" class="btn btn-sm btn-success">
            <i class="fas fa-plus"></i> Add Document
          </a>
        </div>
        <div class="card-body">
          <div class="table-responsive">
            <table class="table table-sm">
              <thead>
                <tr>
                  <th>Document</th>
                  <th>Type</th>
                  <th>Size</th>
                  <th>Upload Date</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                @foreach (var doc in Model.PurchaseDocuments)
                {
                  <tr>
                    <td>
                      <strong>@doc.DocumentName</strong>
                      @if (!string.IsNullOrEmpty(doc.Description))
                      {
                        <br>
                  
                        <small class="text-muted">@doc.Description</small>
                      }
                    </td>
                    <td>
                      <span class="badge bg-secondary">@doc.DocumentType</span>
                    </td>
                    <td>@doc.FileSizeFormatted</td>
                    <td>@doc.UploadedDate.ToString("MM/dd/yyyy")</td>
                    <td>
                      <div class="btn-group btn-group-sm">
                        <a href="/Purchases/DownloadDocument/@doc.Id" class="btn btn-outline-primary" title="Download">
                          <i class="fas fa-download"></i>
                        </a>
                        <a href="/Purchases/DeleteDocument/@doc.Id" class="btn btn-outline-danger" title="Delete">
                          <i class="fas fa-trash"></i>
                        </a>
                      </div>
                    </td>
                  </tr>
                }
              </tbody>
            </table>
          </div>
        </div>
      </div>
    }
    else
    {
      <div class="card mt-4">
        <div class="card-header">
          <h5><i class="fas fa-file"></i> Documents</h5>
        </div>
        <div class="card-body text-center">
          <i class="fas fa-file fa-3x text-muted mb-3"></i>
          <h6 class="text-muted">No Documents</h6>
          <p class="text-muted">No documents have been uploaded for this purchase.</p>
          <a href="/Purchases/UploadDocument?purchaseId=@Model.Id" class="btn btn-success">
            <i class="fas fa-plus"></i> Upload First Document
          </a>
        </div>
      </div>
    }
  </div>

  <div class="col-md-4">
    <!-- Quick Actions -->
    <div class="card">
      <div class="card-header">
        <h5><i class="fas fa-tools"></i> Quick Actions</h5>
      </div>
      <div class="card-body">
        <div class="d-grid gap-2">
          <!-- Status Update Actions -->
          @if (Model.Status == InventorySystem.Models.Enums.PurchaseStatus.Pending)
          {
            <button type="button" class="btn btn-success" onclick="updateStatus('Confirmed')">
              <i class="fas fa-check"></i> Mark as Confirmed
            </button>
          }
          @if (Model.Status == InventorySystem.Models.Enums.PurchaseStatus.Confirmed)
          {
            <button type="button" class="btn btn-info" onclick="updateStatus('Shipped')">
              <i class="fas fa-shipping-fast"></i> Mark as Shipped
            </button>
          }
          @if (Model.Status == InventorySystem.Models.Enums.PurchaseStatus.Shipped || Model.Status == InventorySystem.Models.Enums.PurchaseStatus.PartiallyReceived)
          {
            <button type="button" class="btn btn-success" onclick="updateStatus('Received')">
              <i class="fas fa-check-circle"></i> Mark as Received
            </button>
          }

          <a href="/Purchases/Create?itemId=@Model.ItemId" class="btn btn-outline-primary">
            <i class="fas fa-plus"></i> Reorder This Item
          </a>
          <a href="/Items/Details/@Model.ItemId" class="btn btn-outline-info">
            <i class="fas fa-eye"></i> View Item Details
          </a>
          <a href="/Purchases" class="btn btn-outline-secondary">
            <i class="fas fa-list"></i> All Purchases
          </a>
        </div>
      </div>
    </div>

    <!-- Purchase Summary -->
    <div class="card mt-3">
      <div class="card-header">
        <h5><i class="fas fa-chart-line"></i> Summary</h5>
      </div>
      <div class="card-body">
        <div class="row text-center">
          <div class="col-6">
            <h4 class="text-primary">@Model.QuantityPurchased</h4>
            <small class="text-muted">Purchased</small>
          </div>
          <div class="col-6">
            <h4 class="text-success">@Model.RemainingQuantity</h4>
            <small class="text-muted">Remaining</small>
          </div>
        </div>
        <hr>
        <div class="text-center">
          <h4 class="text-info">@Model.TotalPaid.ToString("C")</h4>
          <small class="text-muted">Total Cost</small>
        </div>
      </div>
    </div>

    <!-- Status Timeline -->
    <div class="card mt-3">
      <div class="card-header">
        <h5><i class="fas fa-history"></i> Status Timeline</h5>
      </div>
      <div class="card-body">
        <div class="timeline">
          <div class="timeline-item @(GetTimelineItemClass(InventorySystem.Models.Enums.PurchaseStatus.Pending, Model.Status))">
            <i class="fas fa-plus-circle"></i>
            <span>Order Created</span>
          </div>
          <div class="timeline-item @(GetTimelineItemClass(InventorySystem.Models.Enums.PurchaseStatus.Confirmed, Model.Status))">
            <i class="fas fa-check-circle"></i>
            <span>Confirmed</span>
          </div>
          <div class="timeline-item @(GetTimelineItemClass(InventorySystem.Models.Enums.PurchaseStatus.Shipped, Model.Status))">
            <i class="fas fa-shipping-fast"></i>
            <span>Shipped</span>
          </div>
          <div class="timeline-item @(GetTimelineItemClass(InventorySystem.Models.Enums.PurchaseStatus.Received, Model.Status))">
            <i class="fas fa-check-double"></i>
            <span>Received</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

@functions {
  string GetStatusColor(InventorySystem.Models.Enums.PurchaseStatus status)
  {
    return status switch
    {
      InventorySystem.Models.Enums.PurchaseStatus.Pending => "warning",
      InventorySystem.Models.Enums.PurchaseStatus.Confirmed => "info",
      InventorySystem.Models.Enums.PurchaseStatus.Shipped => "primary",
      InventorySystem.Models.Enums.PurchaseStatus.PartiallyReceived => "warning",
      InventorySystem.Models.Enums.PurchaseStatus.Received => "success",
      InventorySystem.Models.Enums.PurchaseStatus.Cancelled => "danger",
      InventorySystem.Models.Enums.PurchaseStatus.Returned => "secondary",
      _ => "secondary"
    };
  }

  string GetTimelineItemClass(InventorySystem.Models.Enums.PurchaseStatus timelineStatus, InventorySystem.Models.Enums.PurchaseStatus currentStatus)
  {
    if ((int)currentStatus >= (int)timelineStatus)
      return "completed";
    else
      return "pending";
  }
}

<style>
  .timeline {
    position: relative;
    padding-left: 30px;
  }

    .timeline::before {
      content: '';
      position: absolute;
      left: 15px;
      top: 0;
      bottom: 0;
      width: 2px;
      background: #dee2e6;
    }

  .timeline-item {
    position: relative;
    margin-bottom: 20px;
    padding-left: 25px;
  }

    .timeline-item i {
      position: absolute;
      left: -23px;
      top: 2px;
      width: 16px;
      height: 16px;
      background: white;
      border: 2px solid #dee2e6;
      border-radius: 50%;
      color: #6c757d;
    }

    .timeline-item.completed i {
      color: #198754;
      border-color: #198754;
    }

    .timeline-item.pending i {
      color: #6c757d;
      border-color: #dee2e6;
    }
</style>

<!-- Add CSRF token for form submissions -->
<form style="display: none;">
  @Html.AntiForgeryToken()
</form>

<script>
  function updateStatus(newStatus) {
    if (confirm(`Are you sure you want to mark this purchase as ${newStatus}?`)) {
      // Use form submission approach for better compatibility
      const form = document.createElement('form');
      form.method = 'POST';
      form.action = '/Purchases/UpdateStatusForm/@Model.Id';

      // Add CSRF token
      const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
      const tokenInput = document.createElement('input');
      tokenInput.type = 'hidden';
      tokenInput.name = '__RequestVerificationToken';
      tokenInput.value = token;
      form.appendChild(tokenInput);

      // Add status
      const statusInput = document.createElement('input');
      statusInput.type = 'hidden';
      statusInput.name = 'status';
      statusInput.value = newStatus;
      form.appendChild(statusInput);

      // Add actual delivery date if marking as received
      if (newStatus === 'Received') {
        const dateInput = document.createElement('input');
        dateInput.type = 'hidden';
        dateInput.name = 'actualDeliveryDate';
        dateInput.value = new Date().toISOString().split('T')[0];
        form.appendChild(dateInput);
      }

      document.body.appendChild(form);
      form.submit();
    }
  }
</script>