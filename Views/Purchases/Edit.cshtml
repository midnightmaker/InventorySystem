@model InventorySystem.Models.Purchase
@{
  ViewData["Title"] = "Edit Purchase";
  // UPDATED: Use the new computed property instead of old IsExpense logic
  bool isExpenseItem = Model.IsExpensePurchase;
}

<div class="d-flex justify-content-between align-items-center mb-4">
  <h1><i class="fas fa-edit"></i> @(isExpenseItem ? "Edit Expense Purchase" : "Edit Purchase")</h1>
  <div class="btn-group">
    <a href="/Purchases/Details/@Model.Id" class="btn btn-outline-secondary">
      <i class="fas fa-arrow-left"></i> Back to Details
    </a>
    <a href="/Purchases" class="btn btn-outline-info">
      <i class="fas fa-list"></i> All Purchases
    </a>
  </div>
</div>

@if (TempData["ErrorMessage"] != null)
{
  <div class="alert alert-danger alert-dismissible fade show">
    @TempData["ErrorMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

@if (TempData["SuccessMessage"] != null)
{
  <div class="alert alert-success alert-dismissible fade show">
    @TempData["SuccessMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  </div>
}

<div class="row">
  <div class="col-md-8">
    <!-- Purchase Details Form -->
    <form asp-action="Edit" method="post">
      <input asp-for="Id" type="hidden" />
      <input asp-for="RemainingQuantity" type="hidden" />
      <input asp-for="CreatedDate" type="hidden" />

      <div class="card">
        <div class="card-header">
          <h5><i class="fas fa-info-circle"></i> Purchase Details</h5>
          @if (isExpenseItem)
          {
            <small class="text-muted d-block mt-1">
              <i class="fas fa-info-circle"></i> This purchase is for operational expenses (non-inventory items)
            </small>
          }
        </div>
        <div class="card-body">
          <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label asp-for="ItemId" class="form-label">
                  <i class="fas fa-cube text-primary"></i>
                  Item <span class="text-danger">*</span>
                </label>
                <select asp-for="ItemId" class="form-select" asp-items="ViewBag.ItemId" id="itemSelect">
                  <option value="">-- Select Item --</option>
                </select>
                <span asp-validation-for="ItemId" class="text-danger"></span>
                @if (isExpenseItem)
                {
                  <div class="form-text">
                    <i class="fas fa-info-circle"></i>
                    This item is for operational expenses and won't affect inventory levels
                  </div>
                }
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label asp-for="PurchaseDate" class="form-label">
                  <i class="fas fa-calendar text-info"></i>
                  Purchase Date <span class="text-danger">*</span>
                </label>
                <input asp-for="PurchaseDate" class="form-control" type="date" />
                <span asp-validation-for="PurchaseDate" class="text-danger"></span>
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label asp-for="VendorId" class="form-label">
                  <i class="fas fa-building text-success"></i>
                  Vendor <span class="text-danger">*</span>
                </label>
                <div class="input-group">
                  <select asp-for="VendorId" class="form-select" asp-items="ViewBag.VendorId" id="vendorSelect">
                    <option value="">-- Select Vendor --</option>
                  </select>
                  <button type="button" class="btn btn-outline-info" id="useLastVendorBtn" title="Use Last Vendor for Selected Item">
                    <i class="fas fa-history"></i>
                  </button>
                </div>
                <span asp-validation-for="VendorId" class="text-danger"></span>
                <div class="form-text">
                  <i class="fas fa-info-circle"></i>
                  Select the vendor for this purchase. Click the history button to use the last vendor for the selected item.
                </div>
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label asp-for="PurchaseOrderNumber" class="form-label">
                  <i class="fas fa-receipt text-warning"></i>
                  Purchase Order Number
                </label>
                <input asp-for="PurchaseOrderNumber" class="form-control" placeholder="Optional PO number" />
                <span asp-validation-for="PurchaseOrderNumber" class="text-danger"></span>
              </div>
            </div>
          </div>

          <!-- UPDATED: Show appropriate warning based on item type -->
          @if (Model.IsInventoryPurchase)
          {
            <div class="alert alert-warning">
              <i class="fas fa-exclamation-triangle"></i>
              <strong>Inventory Item:</strong> Changing quantity will affect FIFO calculations and inventory levels.
              Current remaining quantity: <strong>@Model.RemainingQuantity</strong>
            </div>
          }
          else
          {
            <div class="alert alert-info">
              <i class="fas fa-info-circle"></i>
              <strong>Operational Expense:</strong> This purchase is for @Model.GetExpenseCategory().ToLower() and will not affect inventory levels.
              Changes will be posted to: <strong>@Model.GetAccountName()</strong>
            </div>
          }

          <div class="row">
            <div class="col-md-4">
              <div class="mb-3">
                <label asp-for="QuantityPurchased" class="form-label">
                  <i class="fas fa-boxes text-primary"></i>
                  Quantity Purchased <span class="text-danger">*</span>
                </label>
                <input asp-for="QuantityPurchased" class="form-control" type="number" min="1" />
                <span asp-validation-for="QuantityPurchased" class="text-danger"></span>
                @if (isExpenseItem)
                {
                  <div class="form-text">
                    <i class="fas fa-info-circle"></i>
                    For services and subscriptions, quantity typically represents units, hours, or licenses
                  </div>
                }
              </div>
            </div>
            <div class="col-md-4">
              <div class="mb-3">
                <label asp-for="CostPerUnit" class="form-label">
                  <i class="fas fa-dollar-sign text-success"></i>
                  Cost Per Unit <span class="text-danger">*</span>
                </label>
                <input asp-for="CostPerUnit" class="form-control" type="number" step="0.000001" min="0" />
                <span asp-validation-for="CostPerUnit" class="text-danger"></span>
                <div class="form-text">
                  <i class="fas fa-info-circle"></i>
                  Up to 6 decimal places supported for precision
                </div>
              </div>
            </div>
            <div class="col-md-4">
              <div class="mb-3">
                <label class="form-label">
                  <i class="fas fa-calculator text-info"></i>
                  Subtotal
                </label>
                <input type="text" class="form-control" id="totalCost" readonly
                       value="@((Model.QuantityPurchased * Model.CostPerUnit).ToString("C"))" />
              </div>
            </div>
          </div>

          <div class="row">
            <!-- UPDATED: Show shipping for inventory items, hide for most expense items -->
            @if (Model.IsInventoryPurchase || Model.Item?.ItemType == ItemType.Consumable)
            {
              <div class="col-md-6">
                <div class="mb-3">
                  <label asp-for="ShippingCost" class="form-label">
                    <i class="fas fa-shipping-fast text-primary"></i>
                    Shipping Cost
                  </label>
                  <input asp-for="ShippingCost" class="form-control" type="number" step="0.000001" min="0" />
                  <span asp-validation-for="ShippingCost" class="text-danger"></span>
                  <div class="form-text">
                    <i class="fas fa-info-circle"></i>
                    Up to 6 decimal places supported
                  </div>
                </div>
              </div>
              <div class="col-md-6">
                <div class="mb-3">
                  <label asp-for="TaxAmount" class="form-label">
                    <i class="fas fa-percentage text-danger"></i>
                    Tax Amount
                  </label>
                  <input asp-for="TaxAmount" class="form-control" type="number" step="0.01" min="0" />
                  <span asp-validation-for="TaxAmount" class="text-danger"></span>
                </div>
              </div>
            }
            else
            {
              <!-- For pure services/subscriptions, only show tax -->
              <div class="col-md-12">
                <div class="mb-3">
                  <label asp-for="TaxAmount" class="form-label">
                    <i class="fas fa-percentage text-danger"></i>
                    Tax Amount
                  </label>
                  <input asp-for="TaxAmount" class="form-control" type="number" step="0.01" min="0" />
                  <span asp-validation-for="TaxAmount" class="text-danger"></span>
                </div>
              </div>
              <!-- Hidden shipping field for services -->
              <input asp-for="ShippingCost" type="hidden" value="0" />
            }
          </div>

          <!-- UPDATED: Show delivery dates for physical items only -->
          @if (Model.IsInventoryPurchase || Model.Item?.ItemType == ItemType.Consumable)
          {
            <div class="row">
              <div class="col-md-6">
                <div class="mb-3">
                  <label asp-for="ExpectedDeliveryDate" class="form-label">
                    <i class="fas fa-clock text-info"></i>
                    Expected Delivery Date
                  </label>
                  <input asp-for="ExpectedDeliveryDate" class="form-control" type="date" />
                  <span asp-validation-for="ExpectedDeliveryDate" class="text-danger"></span>
                </div>
              </div>
              <div class="col-md-6">
                <div class="mb-3">
                  <label asp-for="ActualDeliveryDate" class="form-label">
                    <i class="fas fa-check-circle text-success"></i>
                    Actual Delivery Date
                  </label>
                  <input asp-for="ActualDeliveryDate" class="form-control" type="date" />
                  <span asp-validation-for="ActualDeliveryDate" class="text-danger"></span>
                </div>
              </div>
            </div>
          }

          <div class="mb-3">
            <label asp-for="Status" class="form-label">
              <i class="fas fa-flag text-primary"></i>
              Status
            </label>
            <select asp-for="Status" class="form-select">
              <option value="Pending">Pending</option>
              <option value="Ordered">Ordered</option>
              @if (Model.IsInventoryPurchase || Model.Item?.ItemType == ItemType.Consumable)
              {
                <option value="Shipped">Shipped</option>
                <option value="Delivered">Delivered</option>
                <option value="PartiallyReceived">Partially Received</option>
              }
              <option value="Received">@(isExpenseItem ? "Completed" : "Received")</option>
              <option value="Cancelled">Cancelled</option>
            </select>
            <span asp-validation-for="Status" class="text-danger"></span>
            @if (isExpenseItem)
            {
              <div class="form-text">
                <i class="fas fa-info-circle"></i>
                For operational expenses, "Received" means the service/expense has been completed
              </div>
            }
          </div>

          <!-- UPDATED: Add Invoice Number field -->
          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label asp-for="InvoiceNumber" class="form-label">
                  <i class="fas fa-file-invoice text-info"></i>
                  Vendor Invoice Number
                </label>
                <input asp-for="InvoiceNumber" class="form-control" placeholder="Invoice number from vendor" />
                <span asp-validation-for="InvoiceNumber" class="text-danger"></span>
              </div>
            </div>
            <div class="col-md-6">
              <!-- Project field for R&D items -->
              @if (Model.Item?.ItemType == ItemType.RnDMaterials)
              {
                <div class="mb-3">
                  <label asp-for="ProjectId" class="form-label">
                    <i class="fas fa-project-diagram text-warning"></i>
                    R&D Project
                  </label>
                  <select asp-for="ProjectId" class="form-select" asp-items="ViewBag.ProjectId">
                    <option value="">-- No Project Assignment --</option>
                  </select>
                  <span asp-validation-for="ProjectId" class="text-danger"></span>
                </div>
              }
            </div>
          </div>

          <div class="mb-3">
            <label asp-for="Notes" class="form-label">
              <i class="fas fa-sticky-note text-secondary"></i>
              Notes
            </label>
            <textarea asp-for="Notes" class="form-control" rows="3" placeholder="Optional notes about this purchase"></textarea>
            <span asp-validation-for="Notes" class="text-danger"></span>
          </div>
        </div>

        <div class="card-footer">
          <div class="d-flex justify-content-between">
            <div>
              <small class="text-muted">
                <i class="fas fa-info-circle"></i>
                Created: @Model.CreatedDate.ToString("MM/dd/yyyy hh:mm tt")
              </small>
              @if (!string.IsNullOrEmpty(Model.AccountCode))
              {
                <br>
                <small class="text-muted">
                  <i class="fas fa-chart-line"></i>
                  GL Account: @Model.AccountCode - @Model.GetAccountName()
                </small>
              }
            </div>
            <div>
              <button type="submit" class="btn btn-success me-2">
                <i class="fas fa-save"></i> Update Purchase
              </button>
              <a href="/Purchases/Details/@Model.Id" class="btn btn-outline-secondary">
                <i class="fas fa-times"></i> Cancel
              </a>
            </div>
          </div>
        </div>
      </div>
    </form>

    <!-- Purchase Documents Section -->
    <div class="card mt-4">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h5><i class="fas fa-paperclip"></i> @(isExpenseItem ? "Receipts & Documents" : "Purchase Documents")</h5>
        <a href="/PurchaseDocuments/Upload?purchaseId=@Model.Id" class="btn btn-success btn-sm">
          <i class="fas fa-upload"></i> Upload @(isExpenseItem ? "Receipt" : "Document")
        </a>
      </div>
      <div class="card-body">
        @if (Model.PurchaseDocuments?.Any() == true)
        {
          <div class="table-responsive">
            <table class="table table-sm">
              <thead>
                <tr>
                  <th>Document Name</th>
                  <th>Type</th>
                  <th>Size</th>
                  <th>Uploaded</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                @foreach (var doc in Model.PurchaseDocuments.OrderByDescending(d => d.UploadedDate))
                {
                  <tr>
                    <td>
                      <div class="d-flex align-items-center">
                        <i class="@doc.FileTypeIcon me-2"></i>
                        <div>
                          <strong>@doc.DocumentName</strong>
                          @if (!string.IsNullOrEmpty(doc.Description))
                          {
                            <br><small class="text-muted">@doc.Description</small>
                          }
                        </div>
                      </div>
                    </td>
                    <td>
                      <span class="badge bg-secondary">@doc.DocumentType</span>
                    </td>
                    <td>@doc.FileSizeFormatted</td>
                    <td>
                      <small>@doc.UploadedDate.ToString("MM/dd/yyyy")</small>
                    </td>
                    <td>
                      <div class="btn-group btn-group-sm">
                        @{
                          var canPreview = new[] { ".pdf", ".png", ".jpg", ".jpeg", ".gif", ".bmp", ".tiff" }
                          .Contains(System.IO.Path.GetExtension(doc.FileName).ToLowerInvariant());
                        }

                        @if (canPreview)
                        {
                          <a href="/PurchaseDocuments/Preview/@doc.Id" class="btn btn-outline-info" title="Preview" target="_blank">
                            <i class="fas fa-eye"></i>
                          </a>
                        }

                        <a href="/PurchaseDocuments/Download/@doc.Id" class="btn btn-outline-primary" title="Download">
                          <i class="fas fa-download"></i>
                        </a>

                        <form asp-controller="PurchaseDocuments" asp-action="Delete" method="post" style="display:inline;">
                          <input type="hidden" name="id" value="@doc.Id" />
                          <button type="submit" class="btn btn-outline-danger"
                                  onclick="return confirm('Delete this document? This action cannot be undone.')"
                                  title="Delete Document">
                            <i class="fas fa-trash"></i>
                          </button>
                        </form>
                      </div>
                    </td>
                  </tr>
                }
              </tbody>
            </table>
          </div>
        }
        else
        {
          <div class="text-center py-4">
            <i class="fas fa-file-upload fa-3x text-muted mb-3"></i>
            <h6 class="text-muted">No @(isExpenseItem ? "Receipts" : "Documents") Uploaded</h6>
            <p class="text-muted">Upload @(isExpenseItem ? "receipts, invoices" : "invoices, receipts, purchase orders"), and other purchase-related documents.</p>
            <a href="/PurchaseDocuments/Upload?purchaseId=@Model.Id" class="btn btn-outline-success">
              <i class="fas fa-upload"></i> Upload First @(isExpenseItem ? "Receipt" : "Document")
            </a>
          </div>
        }
      </div>
    </div>
  </div>

  <!-- Right Sidebar -->
  <div class="col-md-4">
    <!-- Purchase Summary Card -->
    <div class="card">
      <div class="card-header">
        <h5><i class="fas fa-chart-line"></i> Purchase Summary</h5>
      </div>
      <div class="card-body">
        <div class="row text-center">
          <div class="col-6">
            <h4 class="text-primary">@Model.QuantityPurchased</h4>
            <small class="text-muted">Quantity</small>
          </div>
          <div class="col-6">
            <h4 class="text-success" id="summaryTotal">@((Model.QuantityPurchased * Model.CostPerUnit).ToString("C"))</h4>
            <small class="text-muted">Subtotal</small>
          </div>
        </div>
        <hr>
        <div class="row text-center">
          @if (Model.IsInventoryPurchase || Model.Item?.ItemType == ItemType.Consumable)
          {
            <div class="col-6">
              <h5 class="text-info">@Model.ShippingCost.ToString("C")</h5>
              <small class="text-muted">Shipping</small>
            </div>
            <div class="col-6">
              <h5 class="text-warning">@Model.TaxAmount.ToString("C")</h5>
              <small class="text-muted">Tax</small>
            </div>
          }
          else
          {
            <div class="col-12">
              <h5 class="text-warning">@Model.TaxAmount.ToString("C")</h5>
              <small class="text-muted">Tax</small>
            </div>
          }
        </div>
        <hr>
        <div class="text-center">
          <h4 class="text-dark" id="grandTotal">
            @Model.ExtendedTotal.ToString("C")
          </h4>
          <small class="text-muted">Grand Total</small>
        </div>
        
        <!-- UPDATED: Show accounting information -->
        @if (!string.IsNullOrEmpty(Model.AccountCode))
        {
          <hr>
          <div class="text-center">
            <small class="text-muted">
              <strong>GL Account:</strong><br>
              @Model.AccountCode - @Model.GetAccountName()
            </small>
          </div>
        }
      </div>
    </div>

    <!-- Item Information Card -->
    @if (Model.Item != null)
    {
      <div class="card mt-3">
        <div class="card-header">
          <h5><i class="fas fa-cube"></i> Item Information</h5>
        </div>
        <div class="card-body">
          <p><strong>Part Number:</strong> @Model.Item.PartNumber</p>
          <p><strong>Description:</strong> @Model.Item.Description</p>
          <p><strong>Type:</strong> 
            <span class="badge bg-@(Model.IsInventoryPurchase ? "primary" : "secondary")">
              @Model.Item.ItemType.ToString().Replace("_", " ")
            </span>
          </p>
          @if (Model.IsInventoryPurchase)
          {
            <p><strong>Current Stock:</strong> @Model.Item.CurrentStock</p>
            <p><strong>Min Stock:</strong> @Model.Item.MinimumStock</p>
          }
          else
          {
            <p><strong>Expense Category:</strong> @Model.GetExpenseCategory()</p>
          }
          <hr>
          <a href="/Items/Details/@Model.Item.Id" class="btn btn-outline-info btn-sm">
            <i class="fas fa-eye"></i> View Item Details
          </a>
        </div>
      </div>
    }

    <!-- Vendor Information Card -->
    @if (Model.Vendor != null)
    {
      <div class="card mt-3">
        <div class="card-header">
          <h5><i class="fas fa-building"></i> Current Vendor</h5>
        </div>
        <div class="card-body">
          <p><strong>Company:</strong> @Model.Vendor.CompanyName</p>
          @if (!string.IsNullOrEmpty(Model.Vendor.ContactName))
          {
            <p><strong>Contact:</strong> @Model.Vendor.ContactName</p>
          }
          @if (!string.IsNullOrEmpty(Model.Vendor.ContactEmail))
          {
            <p><strong>Email:</strong> @Model.Vendor.ContactEmail</p>
          }
          <p><strong>Payment Terms:</strong> @Model.Vendor.PaymentTerms</p>
          <hr>
          <a href="/Vendors/Details/@Model.Vendor.Id" class="btn btn-outline-success btn-sm">
            <i class="fas fa-eye"></i> View Vendor Details
          </a>
        </div>
      </div>
    }

    <!-- UPDATED: Project Information for R&D Materials -->
    @if (Model.Project != null)
    {
      <div class="card mt-3">
        <div class="card-header">
          <h5><i class="fas fa-project-diagram"></i> R&D Project</h5>
        </div>
        <div class="card-body">
          <p><strong>Project:</strong> @Model.Project.ProjectName</p>
          <p><strong>Code:</strong> @Model.Project.ProjectCode</p>
          <p><strong>Status:</strong> @Model.Project.Status</p>
          @if (!string.IsNullOrEmpty(Model.Project.ProjectManager))
          {
            <p><strong>Manager:</strong> @Model.Project.ProjectManager</p>
          }
          <hr>
          <a href="/Projects/Details/@Model.Project.Id" class="btn btn-outline-warning btn-sm">
            <i class="fas fa-eye"></i> View Project Details
          </a>
        </div>
      </div>
    }
  </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            var isExpenseItem = @(isExpenseItem.ToString().ToLower());
            var hasShipping = @((Model.IsInventoryPurchase || Model.Item?.ItemType == ItemType.Consumable).ToString().ToLower());

            // Auto-calculate totals when values change
            function updateTotals() {
                var quantity = parseFloat($('#QuantityPurchased').val()) || 0;
                var costPerUnit = parseFloat($('#CostPerUnit').val()) || 0;
                var shipping = hasShipping ? (parseFloat($('#ShippingCost').val()) || 0) : 0;
                var tax = parseFloat($('#TaxAmount').val()) || 0;

                var subtotal = quantity * costPerUnit;
                var grandTotal = subtotal + shipping + tax;

                $('#totalCost').val('$' + subtotal.toFixed(2));
                $('#summaryTotal').text('$' + subtotal.toFixed(2));
                $('#grandTotal').text('$' + grandTotal.toFixed(2));
            }

            // Auto-select last vendor when item changes
            $('#itemSelect').change(function() {
                var itemId = $(this).val();
                if (itemId) {
                    $.get('/Purchases/GetLastVendorForItem', { itemId: itemId })
                        .done(function(data) {
                            if (data.success && data.vendorId) {
                                $('#vendorSelect').val(data.vendorId);
                            }
                        })
                        .fail(function() {
                            console.log('Could not retrieve last vendor for item');
                        });
                }
            });

            // Use last vendor button
            $('#useLastVendorBtn').click(function() {
                var itemId = $('#itemSelect').val();
                if (itemId) {
                    $.get('/Purchases/GetLastVendorForItem', { itemId: itemId })
                        .done(function(data) {
                            if (data.success && data.vendorId) {
                                $('#vendorSelect').val(data.vendorId);

                                // Visual feedback
                                var btn = $('#useLastVendorBtn');
                                btn.removeClass('btn-outline-info').addClass('btn-success');
                                btn.html('<i class="fas fa-check"></i>');

                                setTimeout(function() {
                                    btn.removeClass('btn-success').addClass('btn-outline-info');
                                    btn.html('<i class="fas fa-history"></i>');
                                }, 1000);
                            } else {
                                alert('No previous vendor found for this item.');
                            }
                        })
                        .fail(function() {
                            alert('Error retrieving last vendor information.');
                        });
                } else {
                    alert('Please select an item first.');
                }
            });

            // Bind total calculation to input changes
            var inputsToWatch = '#QuantityPurchased, #CostPerUnit, #TaxAmount';
            if (hasShipping) {
                inputsToWatch += ', #ShippingCost';
            }
            $(inputsToWatch).on('input', updateTotals);

            // Form validation
            $('form').submit(function(e) {
                var itemId = $('#itemSelect').val();
                var vendorId = $('#vendorSelect').val();
                var quantity = $('#QuantityPurchased').val();
                var costPerUnit = $('#CostPerUnit').val();

                if (!itemId) {
                    alert('Please select an item.');
                    e.preventDefault();
                    return false;
                }

                if (!vendorId) {
                    alert('Please select a vendor.');
                    e.preventDefault();
                    return false;
                }

                if (!quantity || quantity <= 0) {
                    alert('Please enter a valid quantity.');
                    e.preventDefault();
                    return false;
                }

                if (!costPerUnit || costPerUnit < 0) {
                    alert('Please enter a valid cost per unit.');
                    e.preventDefault();
                    return false;
                }
            });

            // Initial total calculation
            updateTotals();
        });
    </script>

    <style>
        .card-footer {
          background-color: #f8f9fa;
          border-top: 1px solid #dee2e6;
        }

        .input-group .btn {
          border-left: 0;
        }

        #totalCost {
          background-color: #e9ecef;
          font-weight: bold;
        }

        .alert-warning {
          border-left: 4px solid #ffc107;
        }

        .alert-info {
          border-left: 4px solid #17a2b8;
        }

        .form-text {
          font-size: 0.875em;
        }

        .table th {
          border-top: none;
          font-weight: 600;
          font-size: 0.875rem;
        }

        .badge {
          font-size: 0.75rem;
        }

        .text-muted {
          font-size: 0.875rem;
        }
    </style>
}
